

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Jul 19 02:47:29 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.20
    65                           ; Generated 09/04/2020 GMT
    66                           ; 
    67                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F877A Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  0081                     	;# 
   134  0085                     	;# 
   135  0086                     	;# 
   136  0087                     	;# 
   137  0088                     	;# 
   138  0089                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0098                     	;# 
   147  0099                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  0081                     	;# 
   194  0085                     	;# 
   195  0086                     	;# 
   196  0087                     	;# 
   197  0088                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0094                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  010C                     	;# 
   273  010D                     	;# 
   274  010E                     	;# 
   275  010F                     	;# 
   276  018C                     	;# 
   277  018D                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  000E                     	;# 
   294  000F                     	;# 
   295  0010                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0014                     	;# 
   300  0015                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  001D                     	;# 
   311  001E                     	;# 
   312  001F                     	;# 
   313  0081                     	;# 
   314  0085                     	;# 
   315  0086                     	;# 
   316  0087                     	;# 
   317  0088                     	;# 
   318  0089                     	;# 
   319  008C                     	;# 
   320  008D                     	;# 
   321  008E                     	;# 
   322  0091                     	;# 
   323  0092                     	;# 
   324  0093                     	;# 
   325  0094                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  009F                     	;# 
   332  010C                     	;# 
   333  010D                     	;# 
   334  010E                     	;# 
   335  010F                     	;# 
   336  018C                     	;# 
   337  018D                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0008                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000E                     	;# 
   354  000F                     	;# 
   355  0010                     	;# 
   356  0011                     	;# 
   357  0012                     	;# 
   358  0013                     	;# 
   359  0014                     	;# 
   360  0015                     	;# 
   361  0015                     	;# 
   362  0016                     	;# 
   363  0017                     	;# 
   364  0018                     	;# 
   365  0019                     	;# 
   366  001A                     	;# 
   367  001B                     	;# 
   368  001B                     	;# 
   369  001C                     	;# 
   370  001D                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  0081                     	;# 
   374  0085                     	;# 
   375  0086                     	;# 
   376  0087                     	;# 
   377  0088                     	;# 
   378  0089                     	;# 
   379  008C                     	;# 
   380  008D                     	;# 
   381  008E                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0094                     	;# 
   386  0098                     	;# 
   387  0099                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  009F                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  018C                     	;# 
   397  018D                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000D                     	;# 
   412  000E                     	;# 
   413  000E                     	;# 
   414  000F                     	;# 
   415  0010                     	;# 
   416  0011                     	;# 
   417  0012                     	;# 
   418  0013                     	;# 
   419  0014                     	;# 
   420  0015                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0017                     	;# 
   424  0018                     	;# 
   425  0019                     	;# 
   426  001A                     	;# 
   427  001B                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001D                     	;# 
   431  001E                     	;# 
   432  001F                     	;# 
   433  0081                     	;# 
   434  0085                     	;# 
   435  0086                     	;# 
   436  0087                     	;# 
   437  0088                     	;# 
   438  0089                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  008E                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0094                     	;# 
   446  0098                     	;# 
   447  0099                     	;# 
   448  009C                     	;# 
   449  009D                     	;# 
   450  009E                     	;# 
   451  009F                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  010F                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000D                     	;# 
   472  000E                     	;# 
   473  000E                     	;# 
   474  000F                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0014                     	;# 
   480  0015                     	;# 
   481  0015                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  0081                     	;# 
   494  0085                     	;# 
   495  0086                     	;# 
   496  0087                     	;# 
   497  0088                     	;# 
   498  0089                     	;# 
   499  008C                     	;# 
   500  008D                     	;# 
   501  008E                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0093                     	;# 
   505  0094                     	;# 
   506  0098                     	;# 
   507  0099                     	;# 
   508  009C                     	;# 
   509  009D                     	;# 
   510  009E                     	;# 
   511  009F                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  010F                     	;# 
   516  018C                     	;# 
   517  018D                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  0008                     	;# 
   527  0009                     	;# 
   528  000A                     	;# 
   529  000B                     	;# 
   530  000C                     	;# 
   531  000D                     	;# 
   532  000E                     	;# 
   533  000E                     	;# 
   534  000F                     	;# 
   535  0010                     	;# 
   536  0011                     	;# 
   537  0012                     	;# 
   538  0013                     	;# 
   539  0014                     	;# 
   540  0015                     	;# 
   541  0015                     	;# 
   542  0016                     	;# 
   543  0017                     	;# 
   544  0018                     	;# 
   545  0019                     	;# 
   546  001A                     	;# 
   547  001B                     	;# 
   548  001B                     	;# 
   549  001C                     	;# 
   550  001D                     	;# 
   551  001E                     	;# 
   552  001F                     	;# 
   553  0081                     	;# 
   554  0085                     	;# 
   555  0086                     	;# 
   556  0087                     	;# 
   557  0088                     	;# 
   558  0089                     	;# 
   559  008C                     	;# 
   560  008D                     	;# 
   561  008E                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0093                     	;# 
   565  0094                     	;# 
   566  0098                     	;# 
   567  0099                     	;# 
   568  009C                     	;# 
   569  009D                     	;# 
   570  009E                     	;# 
   571  009F                     	;# 
   572  010C                     	;# 
   573  010D                     	;# 
   574  010E                     	;# 
   575  010F                     	;# 
   576  018C                     	;# 
   577  018D                     	;# 
   578                           
   579                           	psect	idataBANK0
   580  0D86                     __pidataBANK0:
   581                           
   582                           ;initializer for _temp_set
   583  0D86  343C               	retlw	60
   584                           
   585                           ;initializer for _blink
   586  0D87  3401               	retlw	1
   587                           
   588                           	psect	idataBANK1
   589  0DBF                     __pidataBANK1:
   590                           
   591                           ;initializer for segment_display@F864
   592  0DBF  343F               	retlw	63
   593  0DC0  3406               	retlw	6
   594  0DC1  345B               	retlw	91
   595  0DC2  344F               	retlw	79
   596  0DC3  3466               	retlw	102
   597  0DC4  346D               	retlw	109
   598  0DC5  347D               	retlw	125
   599  0DC6  3407               	retlw	7
   600  0DC7  347F               	retlw	127
   601  0DC8  346F               	retlw	111
   602  000E                     _TMR1	set	14
   603  0001                     _TMR0	set	1
   604  0011                     _TMR2	set	17
   605  001E                     _ADRESH	set	30
   606  001F                     _ADCON0bits	set	31
   607  001F                     _ADCON0	set	31
   608  0013                     _SSPBUF	set	19
   609  0005                     _PORTA	set	5
   610  0008                     _PORTD	set	8
   611  0006                     _PORTB	set	6
   612  0035                     _RB5	set	53
   613  0034                     _RB4	set	52
   614  002D                     _RA5	set	45
   615  002C                     _RA4	set	44
   616  005A                     _TMR0IF	set	90
   617  0061                     _TMR2IF	set	97
   618  0060                     _TMR1IF	set	96
   619  005D                     _TMR0IE	set	93
   620  0092                     _TMR2ON	set	146
   621  0080                     _TMR1ON	set	128
   622  0096                     _TOUTPS3	set	150
   623  0095                     _TOUTPS2	set	149
   624  0094                     _TOUTPS1	set	148
   625  0093                     _TOUTPS0	set	147
   626  0091                     _T2CKPS1	set	145
   627  0090                     _T2CKPS0	set	144
   628  0085                     _T1CKPS1	set	133
   629  0084                     _T1CKPS0	set	132
   630  0083                     _T1OSCEN	set	131
   631  0081                     _TMR1CS	set	129
   632  00FA                     _GO_DONE	set	250
   633  0063                     _SSPIF	set	99
   634  00A0                     _SSPM0	set	160
   635  00A1                     _SSPM1	set	161
   636  00A2                     _SSPM2	set	162
   637  00A3                     _SSPM3	set	163
   638  00A5                     _SSPEN	set	165
   639  005E                     _PEIE	set	94
   640  005F                     _GIE	set	95
   641  005C                     _INTE	set	92
   642  003A                     _RC2	set	58
   643  003D                     _RC5	set	61
   644  0031                     _RB1	set	49
   645  0059                     _INTF	set	89
   646  0092                     _PR2	set	146
   647  009E                     _ADRESL	set	158
   648  009F                     _ADCON1	set	159
   649  0093                     _SSPADD	set	147
   650  0094                     _SSPSTAT	set	148
   651  0091                     _SSPCON2	set	145
   652  0085                     _TRISA	set	133
   653  0088                     _TRISD	set	136
   654  0087                     _TRISC	set	135
   655  0086                     _TRISB	set	134
   656  0461                     _TMR2IE	set	1121
   657  0460                     _TMR1IE	set	1120
   658  040C                     _T0SE	set	1036
   659  040D                     _T0CS	set	1037
   660  040A                     _PS2	set	1034
   661  0409                     _PS1	set	1033
   662  0408                     _PS0	set	1032
   663  040B                     _PSA	set	1035
   664  048E                     _ACKSTAT	set	1166
   665  0489                     _RSEN	set	1161
   666  048A                     _PEN	set	1162
   667  0488                     _SEN	set	1160
   668  043C                     _TRISC4	set	1084
   669  043B                     _TRISC3	set	1083
   670  040E                     _INTEDG	set	1038
   671  0431                     _TRISB1	set	1073
   672                           
   673                           	psect	cinit
   674  0015                     start_initialization:	
   675                           ; #config settings
   676                           
   677  0015                     __initialization:
   678                           
   679                           ; Initialize objects allocated to BANK1
   680  0015  1383               	bcf	3,7	;select IRP bank0
   681  0016  30DE               	movlw	low (__pdataBANK1+10)
   682  0017  00FD               	movwf	btemp+-1
   683  0018  300D               	movlw	high __pidataBANK1
   684  0019  00FE               	movwf	btemp
   685  001A  30BF               	movlw	low __pidataBANK1
   686  001B  00FF               	movwf	btemp+1
   687  001C  30D4               	movlw	low __pdataBANK1
   688  001D  0084               	movwf	4
   689  001E  120A  158A  2621  120A  118A  	fcall	init_ram0
   690                           
   691                           ; Initialize objects allocated to BANK0
   692  0023  120A  158A  2586  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   693  0028  00D5               	movwf	__pdataBANK0& (0+127)
   694  0029  120A  158A  2587  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   695  002E  00D6               	movwf	(__pdataBANK0+1)& (0+127)
   696                           
   697                           ; Clear objects allocated to BANK1
   698  002F  30C7               	movlw	low __pbssBANK1
   699  0030  0084               	movwf	4
   700  0031  30D4               	movlw	low (__pbssBANK1+13)
   701  0032  120A  158A  25A4  120A  118A  	fcall	clear_ram0
   702                           
   703                           ; Clear objects allocated to BANK0
   704  0037  303E               	movlw	low __pbssBANK0
   705  0038  0084               	movwf	4
   706  0039  3055               	movlw	low (__pbssBANK0+23)
   707  003A  120A  158A  25A4   	fcall	clear_ram0
   708  003D                     end_of_initialization:	
   709                           ;End of C runtime variable initialization code
   710                           
   711  003D                     __end_of__initialization:
   712  003D  0183               	clrf	3
   713  003E  120A  118A  2C74   	ljmp	_main	;jump to C main() function
   714                           
   715                           	psect	bssBANK0
   716  003E                     __pbssBANK0:
   717  003E                     _past_temps:
   718  003E                     	ds	10
   719  0048                     _Voltage:
   720  0048                     	ds	3
   721  004B                     _temperature:
   722  004B                     	ds	2
   723  004D                     _AN0RES:
   724  004D                     	ds	2
   725  004F                     _ON_OFF_FLAG:
   726  004F                     	ds	1
   727  0050                     _temp_setting_mode:
   728  0050                     	ds	1
   729  0051                     _index:
   730  0051                     	ds	1
   731  0052                     _T0:
   732  0052                     	ds	1
   733  0053                     _T2:
   734  0053                     	ds	1
   735  0054                     _T1:
   736  0054                     	ds	1
   737                           
   738                           	psect	dataBANK0
   739  0055                     __pdataBANK0:
   740  0055                     _temp_set:
   741  0055                     	ds	1
   742  0056                     _blink:
   743  0056                     	ds	1
   744                           
   745                           	psect	bssBANK1
   746  00C7                     __pbssBANK1:
   747  00C7                     _TMR0_REG:
   748  00C7                     	ds	1
   749  00C8                     _counter0:
   750  00C8                     	ds	1
   751  00C9                     _TMR2_REG:
   752  00C9                     	ds	1
   753  00CA                     _counter2:
   754  00CA                     	ds	1
   755  00CB                     _TMR1_REG:
   756  00CB                     	ds	1
   757  00CC                     _counter1:
   758  00CC                     	ds	1
   759  00CD                     set_timer1@tmr1:
   760  00CD                     	ds	2
   761  00CF                     set_timer0@cntr0:
   762  00CF                     	ds	1
   763  00D0                     set_timer0@tmr0:
   764  00D0                     	ds	1
   765  00D1                     set_timer2@cntr2:
   766  00D1                     	ds	1
   767  00D2                     set_timer2@tmr2:
   768  00D2                     	ds	1
   769  00D3                     set_timer1@cntr1:
   770  00D3                     	ds	1
   771                           
   772                           	psect	dataBANK1
   773  00D4                     __pdataBANK1:
   774  00D4                     segment_display@F864:
   775  00D4                     	ds	10
   776                           
   777                           	psect	inittext
   778  0E1D                     init_fetch0:	
   779                           ;	Called with low address in FSR and high address in W
   780                           
   781  0E1D  087E               	movf	126,w
   782  0E1E  008A               	movwf	10
   783  0E1F  087F               	movf	127,w
   784  0E20  0082               	movwf	2
   785  0E21                     init_ram0:	
   786                           ;Called with:
   787                           ;	high address of idata address in btemp 
   788                           ;	low address of idata address in btemp+1 
   789                           ;	low address of data in FSR
   790                           ;	high address + 1 of data in btemp-1
   791                           
   792  0E21  261D  120A  158A   	fcall	init_fetch0
   793  0E24  0080               	movwf	0
   794  0E25  0A84               	incf	4,f
   795  0E26  0804               	movf	4,w
   796  0E27  067D               	xorwf	125,w
   797  0E28  1903               	btfsc	3,2
   798  0E29  3400               	retlw	0
   799  0E2A  0AFF               	incf	127,f
   800  0E2B  1903               	btfsc	3,2
   801  0E2C  0AFE               	incf	126,f
   802  0E2D  2E21               	goto	init_ram0
   803                           
   804                           	psect	clrtext
   805  0DA4                     clear_ram0:	
   806                           ;	Called with FSR containing the base address, and
   807                           ;	W with the last address+1
   808                           
   809  0DA4  0064               	clrwdt	;clear the watchdog before getting into this loop
   810  0DA5                     clrloop0:
   811  0DA5  0180               	clrf	0	;clear RAM location pointed to by FSR
   812  0DA6  0A84               	incf	4,f	;increment pointer
   813  0DA7  0604               	xorwf	4,w	;XOR with final address
   814  0DA8  1903               	btfsc	3,2	;have we reached the end yet?
   815  0DA9  3400               	retlw	0	;all done for this memory range, return
   816  0DAA  0604               	xorwf	4,w	;XOR again to restore value
   817  0DAB  2DA5               	goto	clrloop0	;do the next byte
   818                           
   819                           	psect	cstackBANK1
   820  00A0                     __pcstackBANK1:
   821  00A0                     ??_stop_timer:
   822  00A0                     ??_ADC_Init:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  00A0                     ??_restart_timer:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  00A0                     ??_segment_display_off:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  00A0                     ??_set_blink:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  00A0                     ??_temp_setting_up:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  00A0                     ??_temp_setting_down:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  00A0                     ?___lwdiv:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  00A0                     ?_multiply:	
   844                           ; 2 bytes @ 0x0
   845                           
   846  00A0                     ?___lldiv:	
   847                           ; 4 bytes @ 0x0
   848                           
   849  00A0                     ?___llmod:	
   850                           ; 4 bytes @ 0x0
   851                           
   852  00A0                     stop_timer@timer:	
   853                           ; 4 bytes @ 0x0
   854                           
   855  00A0                     restart_timer@timer:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  00A0                     multiply@x:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  00A0                     ___lwdiv@divisor:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  00A0                     ___lldiv@divisor:	
   865                           ; 2 bytes @ 0x0
   866                           
   867  00A0                     ___llmod@divisor:	
   868                           ; 4 bytes @ 0x0
   869                           
   870                           
   871                           ; 4 bytes @ 0x0
   872  00A0                     	ds	2
   873  00A2                     ??_off:
   874  00A2                     multiply@y:	
   875                           ; 1 bytes @ 0x2
   876                           
   877  00A2                     ___lwdiv@dividend:	
   878                           ; 2 bytes @ 0x2
   879                           
   880                           
   881                           ; 2 bytes @ 0x2
   882  00A2                     	ds	2
   883  00A4                     ??_multiply:
   884  00A4                     ??___lwdiv:	
   885                           ; 1 bytes @ 0x4
   886                           
   887  00A4                     ___lwdiv@counter:	
   888                           ; 1 bytes @ 0x4
   889                           
   890  00A4                     ___lldiv@dividend:	
   891                           ; 1 bytes @ 0x4
   892                           
   893  00A4                     ___llmod@dividend:	
   894                           ; 4 bytes @ 0x4
   895                           
   896                           
   897                           ; 4 bytes @ 0x4
   898  00A4                     	ds	1
   899  00A5                     ___lwdiv@quotient:
   900                           
   901                           ; 2 bytes @ 0x5
   902  00A5                     	ds	2
   903  00A7                     ??_check_temp:
   904  00A7                     ?___lwmod:	
   905                           ; 1 bytes @ 0x7
   906                           
   907  00A7                     ___lwmod@divisor:	
   908                           ; 2 bytes @ 0x7
   909                           
   910                           
   911                           ; 2 bytes @ 0x7
   912  00A7                     	ds	1
   913  00A8                     ??___lldiv:
   914  00A8                     ??___llmod:	
   915                           ; 1 bytes @ 0x8
   916                           
   917                           
   918                           ; 1 bytes @ 0x8
   919  00A8                     	ds	1
   920  00A9                     ___llmod@counter:
   921  00A9                     check_temp@sum:	
   922                           ; 1 bytes @ 0x9
   923                           
   924  00A9                     ___lwmod@dividend:	
   925                           ; 2 bytes @ 0x9
   926                           
   927  00A9                     ___lldiv@quotient:	
   928                           ; 2 bytes @ 0x9
   929                           
   930                           
   931                           ; 4 bytes @ 0x9
   932  00A9                     	ds	2
   933  00AB                     ??___lwmod:
   934  00AB                     ___lwmod@counter:	
   935                           ; 1 bytes @ 0xB
   936                           
   937  00AB                     check_temp@avg:	
   938                           ; 1 bytes @ 0xB
   939                           
   940                           
   941                           ; 2 bytes @ 0xB
   942  00AB                     	ds	1
   943  00AC                     ?_segment_display:
   944  00AC                     multiply@i:	
   945                           ; 1 bytes @ 0xC
   946                           
   947  00AC                     segment_display@x:	
   948                           ; 2 bytes @ 0xC
   949                           
   950                           
   951                           ; 2 bytes @ 0xC
   952  00AC                     	ds	1
   953  00AD                     check_temp@i:
   954  00AD                     ___lldiv@counter:	
   955                           ; 1 bytes @ 0xD
   956                           
   957                           
   958                           ; 1 bytes @ 0xD
   959  00AD                     	ds	1
   960  00AE                     ??_segment_display:
   961  00AE                     multiply@i_321:	
   962                           ; 1 bytes @ 0xE
   963                           
   964                           
   965                           ; 2 bytes @ 0xE
   966  00AE                     	ds	2
   967  00B0                     multiply@sum:
   968                           
   969                           ; 4 bytes @ 0x10
   970  00B0                     	ds	2
   971  00B2                     segment_display@binary_pattern:
   972                           
   973                           ; 10 bytes @ 0x12
   974  00B2                     	ds	2
   975  00B4                     ?_set_timer1:
   976  00B4                     ?_set_timer2:	
   977                           ; 1 bytes @ 0x14
   978                           
   979  00B4                     ?_set_timer0:	
   980                           ; 1 bytes @ 0x14
   981                           
   982  00B4                     set_timer1@time:	
   983                           ; 1 bytes @ 0x14
   984                           
   985  00B4                     set_timer2@time:	
   986                           ; 2 bytes @ 0x14
   987                           
   988  00B4                     set_timer0@time:	
   989                           ; 2 bytes @ 0x14
   990                           
   991                           
   992                           ; 2 bytes @ 0x14
   993  00B4                     	ds	2
   994  00B6                     ??_set_timer1:
   995  00B6                     ??_set_timer2:	
   996                           ; 1 bytes @ 0x16
   997                           
   998  00B6                     ??_set_timer0:	
   999                           ; 1 bytes @ 0x16
  1000                           
  1001                           
  1002                           ; 1 bytes @ 0x16
  1003  00B6                     	ds	2
  1004  00B8                     set_timer1@Time:
  1005  00B8                     set_timer2@Time:	
  1006                           ; 4 bytes @ 0x18
  1007                           
  1008  00B8                     set_timer0@Time:	
  1009                           ; 4 bytes @ 0x18
  1010                           
  1011                           
  1012                           ; 4 bytes @ 0x18
  1013  00B8                     	ds	4
  1014  00BC                     set_timer1@resolution:
  1015  00BC                     set_timer2@resolution:	
  1016                           ; 2 bytes @ 0x1C
  1017                           
  1018  00BC                     set_timer0@resolution:	
  1019                           ; 2 bytes @ 0x1C
  1020                           
  1021  00BC                     segment_display@a1:	
  1022                           ; 2 bytes @ 0x1C
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0x1C
  1026  00BC                     	ds	2
  1027  00BE                     set_timer1@i:
  1028  00BE                     set_timer2@i:	
  1029                           ; 2 bytes @ 0x1E
  1030                           
  1031  00BE                     set_timer0@i:	
  1032                           ; 2 bytes @ 0x1E
  1033                           
  1034  00BE                     segment_display@a2:	
  1035                           ; 2 bytes @ 0x1E
  1036                           
  1037                           
  1038                           ; 2 bytes @ 0x1E
  1039  00BE                     	ds	2
  1040  00C0                     ?_start_timer:
  1041  00C0                     ?_segment_display_blink:	
  1042                           ; 1 bytes @ 0x20
  1043                           
  1044  00C0                     start_timer@time:	
  1045                           ; 1 bytes @ 0x20
  1046                           
  1047  00C0                     segment_display_blink@x:	
  1048                           ; 2 bytes @ 0x20
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0x20
  1052  00C0                     	ds	2
  1053  00C2                     ??_start_timer:
  1054  00C2                     ??_segment_display_blink:	
  1055                           ; 1 bytes @ 0x22
  1056                           
  1057  00C2                     start_timer@timer:	
  1058                           ; 1 bytes @ 0x22
  1059                           
  1060                           
  1061                           ; 1 bytes @ 0x22
  1062  00C2                     	ds	1
  1063  00C3                     ??_check_active_button:
  1064                           
  1065                           ; 1 bytes @ 0x23
  1066  00C3                     	ds	2
  1067  00C5                     ??_main:
  1068                           
  1069                           ; 1 bytes @ 0x25
  1070  00C5                     	ds	2
  1071                           
  1072                           	psect	cstackCOMMON
  1073  0070                     __pcstackCOMMON:
  1074  0070                     ?_save_temp:
  1075  0070                     ?_set_temp_off:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ?_stop_timer:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ?_alternate:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ??_alternate:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ?_alternate_on_off:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ??_alternate_on_off:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_timer_ISR:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ??_timer_ISR:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_ADC_Init:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_check_active_button:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_check_temp:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ?_off:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_i2c_master_init:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ??_i2c_master_init:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_i2c_start:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ??_i2c_start:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_i2c_restart:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ??_i2c_restart:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ?_i2c_write_slave_address_with_write_req:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ??_i2c_write_slave_address_with_write_req:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_i2c_master_write:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ??_i2c_master_write:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_i2c_stop:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ??_i2c_stop:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_i2c_wait:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_i2c_wait:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_isr:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_main:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_restart_timer:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_segment_display_off:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_set_blink:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_temp_setting_up:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_temp_setting_down:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ?i1_stop_timer:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ??i1_stop_timer:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     ?_ADC_Read:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ?___ftpack:	
  1184                           ; 2 bytes @ 0x0
  1185                           
  1186  0070                     i2c_master_write@data:	
  1187                           ; 3 bytes @ 0x0
  1188                           
  1189  0070                     i1stop_timer@timer:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     save_temp@temp:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0070                     ___ftpack@arg:	
  1196                           ; 2 bytes @ 0x0
  1197                           
  1198                           
  1199                           ; 3 bytes @ 0x0
  1200  0070                     	ds	1
  1201  0071                     i2c_write_slave_address_with_write_req@address:
  1202                           
  1203                           ; 1 bytes @ 0x1
  1204  0071                     	ds	1
  1205  0072                     ??_save_temp:
  1206  0072                     ?_eeprom_write:	
  1207                           ; 1 bytes @ 0x2
  1208                           
  1209  0072                     ??_ADC_Read:	
  1210                           ; 1 bytes @ 0x2
  1211                           
  1212  0072                     eeprom_write@data:	
  1213                           ; 1 bytes @ 0x2
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0x2
  1217  0072                     	ds	1
  1218  0073                     ??_eeprom_write:
  1219  0073                     eeprom_write@address:	
  1220                           ; 1 bytes @ 0x3
  1221                           
  1222  0073                     ADC_Read@ANC:	
  1223                           ; 1 bytes @ 0x3
  1224                           
  1225  0073                     ___ftpack@exp:	
  1226                           ; 1 bytes @ 0x3
  1227                           
  1228                           
  1229                           ; 1 bytes @ 0x3
  1230  0073                     	ds	1
  1231  0074                     ??_set_temp_off:
  1232  0074                     ___ftpack@sign:	
  1233                           ; 1 bytes @ 0x4
  1234                           
  1235                           
  1236                           ; 1 bytes @ 0x4
  1237  0074                     	ds	1
  1238  0075                     ??___ftpack:
  1239                           
  1240                           ; 1 bytes @ 0x5
  1241  0075                     	ds	3
  1242  0078                     ?___ftdiv:
  1243  0078                     ?___lwtoft:	
  1244                           ; 3 bytes @ 0x8
  1245                           
  1246  0078                     ___lwtoft@c:	
  1247                           ; 3 bytes @ 0x8
  1248                           
  1249  0078                     ___ftdiv@f2:	
  1250                           ; 2 bytes @ 0x8
  1251                           
  1252                           
  1253                           ; 3 bytes @ 0x8
  1254  0078                     	ds	3
  1255  007B                     ??___ftmul:
  1256  007B                     ??___lwtoft:	
  1257                           ; 1 bytes @ 0xB
  1258                           
  1259  007B                     ___ftdiv@f1:	
  1260                           ; 1 bytes @ 0xB
  1261                           
  1262                           
  1263                           ; 3 bytes @ 0xB
  1264  007B                     	ds	3
  1265  007E                     ??_temperature_read:
  1266                           
  1267                           	psect	cstackBANK0
  1268  0020                     __pcstackBANK0:	
  1269                           ; 1 bytes @ 0xE
  1270                           
  1271  0020                     ??___ftdiv:
  1272  0020                     ?___ftmul:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0020                     ___ftmul@f1:	
  1276                           ; 3 bytes @ 0x0
  1277                           
  1278                           
  1279                           ; 3 bytes @ 0x0
  1280  0020                     	ds	3
  1281  0023                     ___ftdiv@cntr:
  1282  0023                     ___ftmul@f2:	
  1283                           ; 1 bytes @ 0x3
  1284                           
  1285                           
  1286                           ; 3 bytes @ 0x3
  1287  0023                     	ds	1
  1288  0024                     ___ftdiv@f3:
  1289                           
  1290                           ; 3 bytes @ 0x4
  1291  0024                     	ds	2
  1292  0026                     ___ftmul@exp:
  1293                           
  1294                           ; 1 bytes @ 0x6
  1295  0026                     	ds	1
  1296  0027                     ___ftdiv@exp:
  1297  0027                     ___ftmul@f3_as_product:	
  1298                           ; 1 bytes @ 0x7
  1299                           
  1300                           
  1301                           ; 3 bytes @ 0x7
  1302  0027                     	ds	1
  1303  0028                     ___ftdiv@sign:
  1304                           
  1305                           ; 1 bytes @ 0x8
  1306  0028                     	ds	1
  1307  0029                     ?___fttol:
  1308  0029                     ___fttol@f1:	
  1309                           ; 4 bytes @ 0x9
  1310                           
  1311                           
  1312                           ; 3 bytes @ 0x9
  1313  0029                     	ds	1
  1314  002A                     ___ftmul@cntr:
  1315                           
  1316                           ; 1 bytes @ 0xA
  1317  002A                     	ds	1
  1318  002B                     ___ftmul@sign:
  1319                           
  1320                           ; 1 bytes @ 0xB
  1321  002B                     	ds	2
  1322  002D                     ??___fttol:
  1323                           
  1324                           ; 1 bytes @ 0xD
  1325  002D                     	ds	3
  1326  0030                     ___fttol@sign1:
  1327                           
  1328                           ; 1 bytes @ 0x10
  1329  0030                     	ds	1
  1330  0031                     ___fttol@lval:
  1331                           
  1332                           ; 4 bytes @ 0x11
  1333  0031                     	ds	4
  1334  0035                     ___fttol@exp1:
  1335                           
  1336                           ; 1 bytes @ 0x15
  1337  0035                     	ds	1
  1338  0036                     ?_temperature_read:
  1339                           
  1340                           ; 2 bytes @ 0x16
  1341  0036                     	ds	3
  1342  0039                     temperature_read@pin:
  1343                           
  1344                           ; 1 bytes @ 0x19
  1345  0039                     	ds	1
  1346  003A                     ??_isr:
  1347                           
  1348                           ; 1 bytes @ 0x1A
  1349  003A                     	ds	4
  1350                           
  1351                           	psect	maintext
  1352  0474                     __pmaintext:	
  1353 ;;
  1354 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1355 ;;
  1356 ;; *************** function _main *****************
  1357 ;; Defined at:
  1358 ;;		line 48 in file "main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : B00/0
  1369 ;;		On exit  : 300/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1372 ;;      Params:         0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0
  1374 ;;      Temps:          0       0       2       0       0
  1375 ;;      Totals:         0       0       2       0       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels required when called:    9
  1378 ;; This function calls:
  1379 ;;		_ADC_Init
  1380 ;;		_check_active_button
  1381 ;;		_check_temp
  1382 ;;		_off
  1383 ;;		_segment_display
  1384 ;;		_segment_display_blink
  1385 ;;		_start_timer
  1386 ;; This function is called by:
  1387 ;;		Startup code after reset
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _main
  1393  0474                     _main:
  1394                           
  1395                           ;main.c: 52: TRISB=0;
  1396                           
  1397                           ;incstack = 0
  1398 ;; hardware stack exceeded
  1399                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1400  0474  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0475  0186               	clrf	6	;volatile
  1402                           
  1403                           ;main.c: 53: TRISB |=0b00110001;
  1404  0476  3031               	movlw	49
  1405  0477  00FF               	movwf	127
  1406  0478  087F               	movf	127,w
  1407  0479  0486               	iorwf	6,f	;volatile
  1408                           
  1409                           ;main.c: 54: TRISB1=0;
  1410  047A  1086               	bcf	6,1	;volatile
  1411                           
  1412                           ;main.c: 55: RB1=0;
  1413  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1414  047C  1086               	bcf	6,1	;volatile
  1415                           
  1416                           ;main.c: 56: PORTB=0;
  1417  047D  0186               	clrf	6	;volatile
  1418                           
  1419                           ;main.c: 57: TRISC &=0b11011011;
  1420  047E  30DB               	movlw	219
  1421  047F  00FF               	movwf	127
  1422  0480  087F               	movf	127,w
  1423  0481  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0482  0587               	andwf	7,f	;volatile
  1425                           
  1426                           ;main.c: 58: RC5=0;
  1427  0483  1283               	bcf	3,5	;RP0=0, select bank0
  1428  0484  1287               	bcf	7,5	;volatile
  1429                           
  1430                           ;main.c: 59: RC2=0;
  1431  0485  1107               	bcf	7,2	;volatile
  1432                           
  1433                           ;main.c: 60: TRISD=0;
  1434  0486  1683               	bsf	3,5	;RP0=1, select bank1
  1435  0487  0188               	clrf	8	;volatile
  1436                           
  1437                           ;main.c: 61: PORTD=0;
  1438  0488  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0489  0188               	clrf	8	;volatile
  1440                           
  1441                           ;main.c: 62: TRISA |= 0b00000100;
  1442  048A  1683               	bsf	3,5	;RP0=1, select bank1
  1443  048B  1505               	bsf	5,2	;volatile
  1444                           
  1445                           ;main.c: 63: TRISA &= 0b11001111;
  1446  048C  30CF               	movlw	207
  1447  048D  00FF               	movwf	127
  1448  048E  087F               	movf	127,w
  1449  048F  0585               	andwf	5,f	;volatile
  1450                           
  1451                           ;main.c: 64: PORTA=0;
  1452  0490  1283               	bcf	3,5	;RP0=0, select bank0
  1453  0491  0185               	clrf	5	;volatile
  1454                           
  1455                           ;main.c: 65: ADC_Init();
  1456  0492  120A  118A  27FA  120A  118A  	fcall	_ADC_Init
  1457                           
  1458                           ;main.c: 66: INTE=1;
  1459  0497  160B               	bsf	11,4	;volatile
  1460                           
  1461                           ;main.c: 67: INTEDG=0;
  1462  0498  1301               	bcf	1,6	;volatile
  1463                           
  1464                           ;main.c: 68: GIE=1;
  1465  0499  178B               	bsf	11,7	;volatile
  1466                           
  1467                           ;main.c: 69: PEIE=1;
  1468  049A  170B               	bsf	11,6	;volatile
  1469                           
  1470                           ;main.c: 70: start_timer(0,100);
  1471  049B  3064               	movlw	100
  1472  049C  00C0               	movwf	start_timer@time^(0+128)
  1473  049D  3000               	movlw	0
  1474  049E  00C1               	movwf	(start_timer@time^(0+128)+1)
  1475  049F  3000               	movlw	0
  1476  04A0  120A  158A  2774  120A  118A  	fcall	_start_timer
  1477                           
  1478                           ;main.c: 71: start_timer(2,1000);
  1479  04A5  30E8               	movlw	232
  1480  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  1481  04A7  00C0               	movwf	start_timer@time^(0+128)
  1482  04A8  3003               	movlw	3
  1483  04A9  00C1               	movwf	(start_timer@time^(0+128)+1)
  1484  04AA  3002               	movlw	2
  1485  04AB  120A  158A  2774  120A  118A  	fcall	_start_timer
  1486  04B0  2CDF               	goto	l3216
  1487  04B1                     l117:
  1488                           
  1489                           ;main.c: 78: RC5=0;
  1490  04B1  1287               	bcf	7,5	;volatile
  1491                           
  1492                           ;main.c: 79: RC2=0;
  1493  04B2  1107               	bcf	7,2	;volatile
  1494                           
  1495                           ;main.c: 80: RB1=0;
  1496  04B3  1086               	bcf	6,1	;volatile
  1497                           
  1498                           ;main.c: 81: segment_display_blink(temp_set);
  1499  04B4  0855               	movf	_temp_set,w
  1500  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  1501  04B6  00C5               	movwf	??_main^(0+128)
  1502  04B7  01C6               	clrf	(??_main^(0+128)+1)
  1503  04B8  0845               	movf	??_main^(0+128),w
  1504  04B9  00C0               	movwf	segment_display_blink@x^(0+128)
  1505  04BA  0846               	movf	(??_main+1)^(0+128),w
  1506  04BB  00C1               	movwf	(segment_display_blink@x+1)^(0+128)
  1507  04BC  120A  158A  260C  120A  118A  	fcall	_segment_display_blink
  1508                           
  1509                           ;main.c: 82: check_active_button();
  1510  04C1  120A  118A  2687  120A  118A  	fcall	_check_active_button
  1511  04C6                     l3212:
  1512  04C6  0850               	movf	_temp_setting_mode,w
  1513  04C7  1D03               	btfss	3,2
  1514  04C8  2CB1               	goto	l117
  1515                           
  1516                           ;main.c: 83: };main.c: 84: segment_display(temperature);
  1517  04C9  084C               	movf	_temperature+1,w
  1518  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  1519  04CB  00AD               	movwf	(segment_display@x+1)^(0+128)
  1520  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1521  04CD  084B               	movf	_temperature,w
  1522  04CE  1683               	bsf	3,5	;RP0=1, select bank1
  1523  04CF  00AC               	movwf	segment_display@x^(0+128)
  1524  04D0  120A  118A  24E9  120A  118A  	fcall	_segment_display
  1525                           
  1526                           ;main.c: 85: check_temp();
  1527  04D5  120A  118A  25C8  120A  118A  	fcall	_check_temp
  1528                           
  1529                           ;main.c: 86: check_active_button();
  1530  04DA  120A  118A  2687  120A  118A  	fcall	_check_active_button
  1531  04DF                     l3216:
  1532  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1533  04E0  084F               	movf	_ON_OFF_FLAG,w
  1534  04E1  1D03               	btfss	3,2
  1535  04E2  2CC6               	goto	l3212
  1536                           
  1537                           ;main.c: 89: };main.c: 90: off();
  1538  04E3  120A  158A  25AC  120A  118A  	fcall	_off
  1539  04E8  2CDF               	goto	l3216
  1540  04E9                     __end_of_main:
  1541                           
  1542                           	psect	text1
  1543  0E0C                     __ptext1:	
  1544 ;; *************** function _segment_display_blink *****************
  1545 ;; Defined at:
  1546 ;;		line 33 in file "ssd.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  x               2   32[BANK1 ] unsigned short 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 300/100
  1557 ;;		On exit  : 300/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1560 ;;      Params:         0       0       2       0       0
  1561 ;;      Locals:         0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0
  1563 ;;      Totals:         0       0       2       0       0
  1564 ;;Total ram usage:        2 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    7
  1567 ;; This function calls:
  1568 ;;		_segment_display
  1569 ;;		_segment_display_off
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           
  1576                           ;psect for function _segment_display_blink
  1577  0E0C                     _segment_display_blink:
  1578                           
  1579                           ;ssd.c: 34: if(blink){
  1580                           
  1581                           ;incstack = 0
  1582                           ; Regs used in _segment_display_blink: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1583  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0E0D  0856               	movf	_blink,w
  1585  0E0E  1903               	btfsc	3,2
  1586  0E0F  2E19               	goto	l3118
  1587                           
  1588                           ;ssd.c: 35: segment_display(x);
  1589  0E10  1683               	bsf	3,5	;RP0=1, select bank1
  1590  0E11  0841               	movf	(segment_display_blink@x+1)^(0+128),w
  1591  0E12  00AD               	movwf	(segment_display@x+1)^(0+128)
  1592  0E13  0840               	movf	segment_display_blink@x^(0+128),w
  1593  0E14  00AC               	movwf	segment_display@x^(0+128)
  1594  0E15  120A  118A  24E9   	fcall	_segment_display
  1595                           
  1596                           ;ssd.c: 36: }
  1597  0E18  0008               	return
  1598  0E19                     l3118:
  1599                           
  1600                           ;ssd.c: 37: else {;ssd.c: 38: segment_display_off();
  1601  0E19  120A  158A  26BF   	fcall	_segment_display_off
  1602  0E1C  0008               	return
  1603  0E1D                     __end_of_segment_display_blink:
  1604                           
  1605                           	psect	text2
  1606  04E9                     __ptext2:	
  1607 ;; *************** function _segment_display *****************
  1608 ;; Defined at:
  1609 ;;		line 9 in file "ssd.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  x               2   12[BANK1 ] unsigned short 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  binary_patte   10   18[BANK1 ] unsigned char [10]
  1614 ;;  a2              2   30[BANK1 ] unsigned int 
  1615 ;;  a1              2   28[BANK1 ] unsigned int 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 300/100
  1622 ;;		On exit  : 300/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         0       0       2       0       0
  1626 ;;      Locals:         0       0      14       0       0
  1627 ;;      Temps:          0       0       4       0       0
  1628 ;;      Totals:         0       0      20       0       0
  1629 ;;Total ram usage:       20 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    6
  1632 ;; This function calls:
  1633 ;;		___lwdiv
  1634 ;;		___lwmod
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;;		_segment_display_blink
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function _segment_display
  1643  04E9                     _segment_display:
  1644                           
  1645                           ;ssd.c: 11: unsigned char binary_pattern[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F
      +                          ,0x6F};
  1646                           
  1647                           ;incstack = 0
  1648                           ; Regs used in _segment_display: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1649  04E9  30B2               	movlw	segment_display@binary_pattern& (0+255)
  1650  04EA  0084               	movwf	4
  1651  04EB  30D4               	movlw	low segment_display@F864
  1652  04EC  00AE               	movwf	??_segment_display^(0+128)
  1653  04ED  0804               	movf	4,w
  1654  04EE  00AF               	movwf	(??_segment_display^(0+128)+1)
  1655  04EF  300A               	movlw	10
  1656  04F0  00B0               	movwf	(??_segment_display^(0+128)+2)
  1657  04F1                     u3150:
  1658  04F1  082E               	movf	??_segment_display^(0+128),w
  1659  04F2  0084               	movwf	4
  1660  04F3  1383               	bcf	3,7	;select IRP bank1
  1661  04F4  0800               	movf	0,w
  1662  04F5  00B1               	movwf	(??_segment_display^(0+128)+3)
  1663  04F6  0AAE               	incf	??_segment_display^(0+128),f
  1664  04F7  082F               	movf	(??_segment_display^(0+128)+1),w
  1665  04F8  0084               	movwf	4
  1666  04F9  0831               	movf	(??_segment_display^(0+128)+3),w
  1667  04FA  0080               	movwf	0
  1668  04FB  0AAF               	incf	(??_segment_display^(0+128)+1),f
  1669  04FC  0BB0               	decfsz	(??_segment_display^(0+128)+2),f
  1670  04FD  2CF1               	goto	u3150
  1671                           
  1672                           ;ssd.c: 12: a1 = ((x/10)%10);
  1673  04FE  300A               	movlw	10
  1674  04FF  00A7               	movwf	___lwmod@divisor^(0+128)
  1675  0500  3000               	movlw	0
  1676  0501  00A8               	movwf	(___lwmod@divisor^(0+128)+1)
  1677  0502  300A               	movlw	10
  1678  0503  00A0               	movwf	___lwdiv@divisor^(0+128)
  1679  0504  3000               	movlw	0
  1680  0505  00A1               	movwf	(___lwdiv@divisor^(0+128)+1)
  1681  0506  082D               	movf	(segment_display@x+1)^(0+128),w
  1682  0507  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  1683  0508  082C               	movf	segment_display@x^(0+128),w
  1684  0509  00A2               	movwf	___lwdiv@dividend^(0+128)
  1685  050A  120A  158A  2738  120A  118A  	fcall	___lwdiv
  1686  050F  0821               	movf	(?___lwdiv+1)^(0+128),w
  1687  0510  00AA               	movwf	(___lwmod@dividend+1)^(0+128)
  1688  0511  0820               	movf	?___lwdiv^(0+128),w
  1689  0512  00A9               	movwf	___lwmod@dividend^(0+128)
  1690  0513  120A  118A  27C8  120A  118A  	fcall	___lwmod
  1691  0518  0828               	movf	(?___lwmod+1)^(0+128),w
  1692  0519  00BD               	movwf	(segment_display@a1+1)^(0+128)
  1693  051A  0827               	movf	?___lwmod^(0+128),w
  1694  051B  00BC               	movwf	segment_display@a1^(0+128)
  1695                           
  1696                           ;ssd.c: 13: a2 = (x%10);
  1697  051C  300A               	movlw	10
  1698  051D  00A7               	movwf	___lwmod@divisor^(0+128)
  1699  051E  3000               	movlw	0
  1700  051F  00A8               	movwf	(___lwmod@divisor^(0+128)+1)
  1701  0520  082D               	movf	(segment_display@x+1)^(0+128),w
  1702  0521  00AA               	movwf	(___lwmod@dividend+1)^(0+128)
  1703  0522  082C               	movf	segment_display@x^(0+128),w
  1704  0523  00A9               	movwf	___lwmod@dividend^(0+128)
  1705  0524  120A  118A  27C8  120A  118A  	fcall	___lwmod
  1706  0529  0828               	movf	(?___lwmod+1)^(0+128),w
  1707  052A  00BF               	movwf	(segment_display@a2+1)^(0+128)
  1708  052B  0827               	movf	?___lwmod^(0+128),w
  1709  052C  00BE               	movwf	segment_display@a2^(0+128)
  1710                           
  1711                           ;ssd.c: 14: RA4=0; RA5=1;
  1712  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1713  052E  1205               	bcf	5,4	;volatile
  1714  052F  1685               	bsf	5,5	;volatile
  1715                           
  1716                           ;ssd.c: 15: PORTD = binary_pattern[a2];
  1717  0530  1683               	bsf	3,5	;RP0=1, select bank1
  1718  0531  083E               	movf	segment_display@a2^(0+128),w
  1719  0532  3EB2               	addlw	(low (segment_display@binary_pattern| 0))& (0+255)
  1720  0533  0084               	movwf	4
  1721  0534  1383               	bcf	3,7	;select IRP bank1
  1722  0535  0800               	movf	0,w
  1723  0536  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0537  0088               	movwf	8	;volatile
  1725                           
  1726                           ;ssd.c: 16: _delay((unsigned long)((10)*(4000000/4000.0)));
  1727  0538  300D               	movlw	13
  1728  0539  1683               	bsf	3,5	;RP0=1, select bank1
  1729  053A  1303               	bcf	3,6	;RP1=0, select bank1
  1730  053B  00AF               	movwf	(??_segment_display^(0+128)+1)
  1731  053C  30FB               	movlw	251
  1732  053D  00AE               	movwf	??_segment_display^(0+128)
  1733  053E                     u3377:
  1734  053E  0BAE               	decfsz	??_segment_display^(0+128),f
  1735  053F  2D3E               	goto	u3377
  1736  0540  0BAF               	decfsz	(??_segment_display^(0+128)+1),f
  1737  0541  2D3E               	goto	u3377
  1738                           
  1739                           ;ssd.c: 17: RA4=1; RA5=0;
  1740  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0544  1605               	bsf	5,4	;volatile
  1743  0545  1285               	bcf	5,5	;volatile
  1744                           
  1745                           ;ssd.c: 18: PORTD = binary_pattern[a1];
  1746  0546  1683               	bsf	3,5	;RP0=1, select bank1
  1747  0547  083C               	movf	segment_display@a1^(0+128),w
  1748  0548  3EB2               	addlw	(low (segment_display@binary_pattern| 0))& (0+255)
  1749  0549  0084               	movwf	4
  1750  054A  1383               	bcf	3,7	;select IRP bank1
  1751  054B  0800               	movf	0,w
  1752  054C  1283               	bcf	3,5	;RP0=0, select bank0
  1753  054D  0088               	movwf	8	;volatile
  1754                           
  1755                           ;ssd.c: 19: _delay((unsigned long)((10)*(4000000/4000.0)));
  1756  054E  300D               	movlw	13
  1757  054F  1683               	bsf	3,5	;RP0=1, select bank1
  1758  0550  1303               	bcf	3,6	;RP1=0, select bank1
  1759  0551  00AF               	movwf	(??_segment_display^(0+128)+1)
  1760  0552  30FB               	movlw	251
  1761  0553  00AE               	movwf	??_segment_display^(0+128)
  1762  0554                     u3387:
  1763  0554  0BAE               	decfsz	??_segment_display^(0+128),f
  1764  0555  2D54               	goto	u3387
  1765  0556  0BAF               	decfsz	(??_segment_display^(0+128)+1),f
  1766  0557  2D54               	goto	u3387
  1767                           
  1768                           ;ssd.c: 20: RA5=1;
  1769  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1771  055A  1685               	bsf	5,5	;volatile
  1772  055B  0008               	return
  1773  055C                     __end_of_segment_display:
  1774                           
  1775                           	psect	text3
  1776  07C8                     __ptext3:	
  1777 ;; *************** function ___lwmod *****************
  1778 ;; Defined at:
  1779 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  divisor         2    7[BANK1 ] unsigned int 
  1782 ;;  dividend        2    9[BANK1 ] unsigned int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  counter         1   11[BANK1 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2    7[BANK1 ] unsigned int 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, btemp+1
  1789 ;; Tracked objects:
  1790 ;;		On entry : 300/100
  1791 ;;		On exit  : 300/100
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1794 ;;      Params:         0       0       4       0       0
  1795 ;;      Locals:         0       0       1       0       0
  1796 ;;      Temps:          0       0       0       0       0
  1797 ;;      Totals:         0       0       5       0       0
  1798 ;;Total ram usage:        5 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    5
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_segment_display
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function ___lwmod
  1810  07C8                     ___lwmod:
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1814  07C8  0827               	movf	___lwmod@divisor^(0+128),w
  1815  07C9  0428               	iorwf	(___lwmod@divisor+1)^(0+128),w
  1816  07CA  1903               	btfsc	3,2
  1817  07CB  2FF5               	goto	l2990
  1818  07CC  01AB               	clrf	___lwmod@counter^(0+128)
  1819  07CD  0AAB               	incf	___lwmod@counter^(0+128),f
  1820  07CE                     l2980:
  1821  07CE  1BA8               	btfsc	(___lwmod@divisor+1)^(0+128),7
  1822  07CF  2FDC               	goto	l2982
  1823  07D0  3001               	movlw	1
  1824  07D1                     u3045:
  1825  07D1  1003               	clrc
  1826  07D2  0DA7               	rlf	___lwmod@divisor^(0+128),f
  1827  07D3  0DA8               	rlf	(___lwmod@divisor+1)^(0+128),f
  1828  07D4  3EFF               	addlw	-1
  1829  07D5  1D03               	skipz
  1830  07D6  2FD1               	goto	u3045
  1831  07D7  3001               	movlw	1
  1832  07D8  00FF               	movwf	127
  1833  07D9  087F               	movf	127,w
  1834  07DA  07AB               	addwf	___lwmod@counter^(0+128),f
  1835  07DB  2FCE               	goto	l2980
  1836  07DC                     l2982:
  1837  07DC  0828               	movf	(___lwmod@divisor+1)^(0+128),w
  1838  07DD  022A               	subwf	(___lwmod@dividend+1)^(0+128),w
  1839  07DE  1D03               	skipz
  1840  07DF  2FE2               	goto	u3065
  1841  07E0  0827               	movf	___lwmod@divisor^(0+128),w
  1842  07E1  0229               	subwf	___lwmod@dividend^(0+128),w
  1843  07E2                     u3065:
  1844  07E2  1C03               	skipc
  1845  07E3  2FEA               	goto	l2986
  1846  07E4  0827               	movf	___lwmod@divisor^(0+128),w
  1847  07E5  02A9               	subwf	___lwmod@dividend^(0+128),f
  1848  07E6  0828               	movf	(___lwmod@divisor+1)^(0+128),w
  1849  07E7  1C03               	skipc
  1850  07E8  03AA               	decf	(___lwmod@dividend+1)^(0+128),f
  1851  07E9  02AA               	subwf	(___lwmod@dividend+1)^(0+128),f
  1852  07EA                     l2986:
  1853  07EA  3001               	movlw	1
  1854  07EB                     u3075:
  1855  07EB  1003               	clrc
  1856  07EC  0CA8               	rrf	(___lwmod@divisor+1)^(0+128),f
  1857  07ED  0CA7               	rrf	___lwmod@divisor^(0+128),f
  1858  07EE  3EFF               	addlw	-1
  1859  07EF  1D03               	skipz
  1860  07F0  2FEB               	goto	u3075
  1861  07F1  3001               	movlw	1
  1862  07F2  02AB               	subwf	___lwmod@counter^(0+128),f
  1863  07F3  1D03               	btfss	3,2
  1864  07F4  2FDC               	goto	l2982
  1865  07F5                     l2990:
  1866  07F5  082A               	movf	(___lwmod@dividend+1)^(0+128),w
  1867  07F6  00A8               	movwf	(?___lwmod+1)^(0+128)
  1868  07F7  0829               	movf	___lwmod@dividend^(0+128),w
  1869  07F8  00A7               	movwf	?___lwmod^(0+128)
  1870  07F9  0008               	return
  1871  07FA                     __end_of___lwmod:
  1872                           
  1873                           	psect	text4
  1874  0DAC                     __ptext4:	
  1875 ;; *************** function _off *****************
  1876 ;; Defined at:
  1877 ;;		line 95 in file "heater.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0, pclath, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 300/0
  1888 ;;		On exit  : 300/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1891 ;;      Params:         0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    6
  1898 ;; This function calls:
  1899 ;;		_segment_display_off
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function _off
  1907  0DAC                     _off:
  1908                           
  1909                           ;heater.c: 96: if(ON_OFF_FLAG==0){
  1910                           
  1911                           ;incstack = 0
  1912                           ; Regs used in _off: [wreg+status,2+status,0+pclath+cstack]
  1913  0DAC  084F               	movf	_ON_OFF_FLAG,w
  1914  0DAD  1D03               	btfss	3,2
  1915  0DAE  0008               	return
  1916                           
  1917                           ;heater.c: 97: RC2=0;
  1918  0DAF  1107               	bcf	7,2	;volatile
  1919                           
  1920                           ;heater.c: 98: RC5=0;
  1921  0DB0  1287               	bcf	7,5	;volatile
  1922                           
  1923                           ;heater.c: 99: segment_display_off();
  1924  0DB1  120A  158A  26BF   	fcall	_segment_display_off
  1925  0DB4  0008               	return
  1926  0DB5                     __end_of_off:
  1927                           
  1928                           	psect	text5
  1929  0EBF                     __ptext5:	
  1930 ;; *************** function _segment_display_off *****************
  1931 ;; Defined at:
  1932 ;;		line 23 in file "ssd.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2
  1941 ;; Tracked objects:
  1942 ;;		On entry : 300/0
  1943 ;;		On exit  : 300/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1946 ;;      Params:         0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0
  1948 ;;      Temps:          0       0       2       0       0
  1949 ;;      Totals:         0       0       2       0       0
  1950 ;;Total ram usage:        2 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    5
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_segment_display_blink
  1957 ;;		_off
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _segment_display_off
  1963  0EBF                     _segment_display_off:
  1964                           
  1965                           ;ssd.c: 24: RA4=0; RA5=1;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _segment_display_off: [wreg+status,2]
  1969  0EBF  1205               	bcf	5,4	;volatile
  1970  0EC0  1685               	bsf	5,5	;volatile
  1971                           
  1972                           ;ssd.c: 25: PORTD = 0;
  1973  0EC1  0188               	clrf	8	;volatile
  1974                           
  1975                           ;ssd.c: 26: _delay((unsigned long)((10)*(4000000/4000.0)));
  1976  0EC2  300D               	movlw	13
  1977  0EC3  1683               	bsf	3,5	;RP0=1, select bank1
  1978  0EC4  1303               	bcf	3,6	;RP1=0, select bank1
  1979  0EC5  00A1               	movwf	(??_segment_display_off^(0+128)+1)
  1980  0EC6  30FB               	movlw	251
  1981  0EC7  00A0               	movwf	??_segment_display_off^(0+128)
  1982  0EC8                     u3397:
  1983  0EC8  0BA0               	decfsz	??_segment_display_off^(0+128),f
  1984  0EC9  2EC8               	goto	u3397
  1985  0ECA  0BA1               	decfsz	(??_segment_display_off^(0+128)+1),f
  1986  0ECB  2EC8               	goto	u3397
  1987                           
  1988                           ;ssd.c: 27: RA4=1; RA5=0;
  1989  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  1990  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  1991  0ECE  1605               	bsf	5,4	;volatile
  1992  0ECF  1285               	bcf	5,5	;volatile
  1993                           
  1994                           ;ssd.c: 28: PORTD = 0;
  1995  0ED0  0188               	clrf	8	;volatile
  1996                           
  1997                           ;ssd.c: 29: _delay((unsigned long)((10)*(4000000/4000.0)));
  1998  0ED1  300D               	movlw	13
  1999  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  2000  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  2001  0ED4  00A1               	movwf	(??_segment_display_off^(0+128)+1)
  2002  0ED5  30FB               	movlw	251
  2003  0ED6  00A0               	movwf	??_segment_display_off^(0+128)
  2004  0ED7                     u3407:
  2005  0ED7  0BA0               	decfsz	??_segment_display_off^(0+128),f
  2006  0ED8  2ED7               	goto	u3407
  2007  0ED9  0BA1               	decfsz	(??_segment_display_off^(0+128)+1),f
  2008  0EDA  2ED7               	goto	u3407
  2009                           
  2010                           ;ssd.c: 30: RA5=1;
  2011  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0EDD  1685               	bsf	5,5	;volatile
  2014  0EDE  0008               	return
  2015  0EDF                     __end_of_segment_display_off:
  2016                           
  2017                           	psect	text6
  2018  05C8                     __ptext6:	
  2019 ;; *************** function _check_temp *****************
  2020 ;; Defined at:
  2021 ;;		line 11 in file "heater.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  i               1   13[BANK1 ] unsigned char 
  2026 ;;  avg             2   11[BANK1 ] unsigned short 
  2027 ;;  sum             2    9[BANK1 ] unsigned short 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 300/0
  2034 ;;		On exit  : B00/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2037 ;;      Params:         0       0       0       0       0
  2038 ;;      Locals:         0       0       5       0       0
  2039 ;;      Temps:          0       0       2       0       0
  2040 ;;      Totals:         0       0       7       0       0
  2041 ;;Total ram usage:        7 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    6
  2044 ;; This function calls:
  2045 ;;		___lwdiv
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _check_temp
  2053  05C8                     _check_temp:
  2054                           
  2055                           ;heater.c: 12: unsigned short int sum=0;
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in _check_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2059  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  2060  05C9  01A9               	clrf	check_temp@sum^(0+128)
  2061  05CA  01AA               	clrf	(check_temp@sum+1)^(0+128)
  2062                           
  2063                           ;heater.c: 14: for (char i=0;i<10;i++)
  2064  05CB  01AD               	clrf	check_temp@i^(0+128)
  2065  05CC                     l3144:
  2066                           
  2067                           ;heater.c: 15: sum=sum+past_temps[i];
  2068  05CC  082D               	movf	check_temp@i^(0+128),w
  2069  05CD  3E3E               	addlw	(low (_past_temps| 0))& (0+255)
  2070  05CE  0084               	movwf	4
  2071  05CF  1383               	bcf	3,7	;select IRP bank0
  2072  05D0  0800               	movf	0,w
  2073  05D1  0729               	addwf	check_temp@sum^(0+128),w
  2074  05D2  00A9               	movwf	check_temp@sum^(0+128)
  2075  05D3  082A               	movf	(check_temp@sum+1)^(0+128),w
  2076  05D4  1803               	skipnc
  2077  05D5  0A2A               	incf	(check_temp@sum+1)^(0+128),w
  2078  05D6  00AA               	movwf	(check_temp@sum^(0+128)+1)
  2079  05D7  3001               	movlw	1
  2080  05D8  00FF               	movwf	127
  2081  05D9  087F               	movf	127,w
  2082  05DA  07AD               	addwf	check_temp@i^(0+128),f
  2083  05DB  300A               	movlw	10
  2084  05DC  022D               	subwf	check_temp@i^(0+128),w
  2085  05DD  1C03               	skipc
  2086  05DE  2DCC               	goto	l3144
  2087                           
  2088                           ;heater.c: 16: avg=sum/10;
  2089  05DF  300A               	movlw	10
  2090  05E0  00A0               	movwf	___lwdiv@divisor^(0+128)
  2091  05E1  3000               	movlw	0
  2092  05E2  00A1               	movwf	(___lwdiv@divisor^(0+128)+1)
  2093  05E3  082A               	movf	(check_temp@sum+1)^(0+128),w
  2094  05E4  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  2095  05E5  0829               	movf	check_temp@sum^(0+128),w
  2096  05E6  00A2               	movwf	___lwdiv@dividend^(0+128)
  2097  05E7  120A  158A  2738  120A  118A  	fcall	___lwdiv
  2098  05EC  0821               	movf	(?___lwdiv+1)^(0+128),w
  2099  05ED  00AC               	movwf	(check_temp@avg+1)^(0+128)
  2100  05EE  0820               	movf	?___lwdiv^(0+128),w
  2101  05EF  00AB               	movwf	check_temp@avg^(0+128)
  2102                           
  2103                           ;heater.c: 17: if (avg<(temp_set-5))
  2104  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2105  05F1  0855               	movf	_temp_set,w
  2106  05F2  3EFB               	addlw	251
  2107  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  2108  05F4  00A7               	movwf	??_check_temp^(0+128)
  2109  05F5  30FF               	movlw	255
  2110  05F6  1803               	skipnc
  2111  05F7  3000               	movlw	0
  2112  05F8  00A8               	movwf	(??_check_temp^(0+128)+1)
  2113  05F9  0828               	movf	(??_check_temp+1)^(0+128),w
  2114  05FA  022C               	subwf	(check_temp@avg+1)^(0+128),w
  2115  05FB  1D03               	skipz
  2116  05FC  2DFF               	goto	u3305
  2117  05FD  0827               	movf	??_check_temp^(0+128),w
  2118  05FE  022B               	subwf	check_temp@avg^(0+128),w
  2119  05FF                     u3305:
  2120  05FF  1803               	skipnc
  2121  0600  2E0E               	goto	l3164
  2122                           
  2123                           ;heater.c: 18: {;heater.c: 19: RC5=1;
  2124  0601  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0602  1687               	bsf	7,5	;volatile
  2126                           
  2127                           ;heater.c: 20: RC2=0;
  2128  0603  1107               	bcf	7,2	;volatile
  2129                           
  2130                           ;heater.c: 21: if (blink==1)
  2131  0604  0356               	decf	_blink,w
  2132  0605  1D03               	btfss	3,2
  2133  0606  2E09               	goto	l3160
  2134                           
  2135                           ;heater.c: 22: RB1=1;
  2136  0607  1486               	bsf	6,1	;volatile
  2137  0608  0008               	return
  2138  0609                     l3160:
  2139                           
  2140                           ;heater.c: 23: else if(blink==0)
  2141  0609  0856               	movf	_blink,w
  2142  060A  1D03               	btfss	3,2
  2143  060B  0008               	return
  2144                           
  2145                           ;heater.c: 24: RB1=0;
  2146  060C  1086               	bcf	6,1	;volatile
  2147  060D  0008               	return
  2148  060E                     l3164:
  2149                           
  2150                           ;heater.c: 26: else if(avg>(temp_set+5))
  2151  060E  1283               	bcf	3,5	;RP0=0, select bank0
  2152  060F  0855               	movf	_temp_set,w
  2153  0610  3E05               	addlw	5
  2154  0611  1683               	bsf	3,5	;RP0=1, select bank1
  2155  0612  00A7               	movwf	??_check_temp^(0+128)
  2156  0613  3000               	movlw	0
  2157  0614  1803               	skipnc
  2158  0615  3001               	movlw	1
  2159  0616  00A8               	movwf	(??_check_temp^(0+128)+1)
  2160  0617  082C               	movf	(check_temp@avg+1)^(0+128),w
  2161  0618  0228               	subwf	(??_check_temp+1)^(0+128),w
  2162  0619  1D03               	skipz
  2163  061A  2E1D               	goto	u3335
  2164  061B  082B               	movf	check_temp@avg^(0+128),w
  2165  061C  0227               	subwf	??_check_temp^(0+128),w
  2166  061D                     u3335:
  2167  061D  1803               	skipnc
  2168  061E  2E24               	goto	l527
  2169                           
  2170                           ;heater.c: 27: {;heater.c: 28: RC2=1;
  2171  061F  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0620  1507               	bsf	7,2	;volatile
  2173                           
  2174                           ;heater.c: 29: RC5=0;
  2175  0621  1287               	bcf	7,5	;volatile
  2176                           
  2177                           ;heater.c: 30: RB1=1;
  2178  0622  1486               	bsf	6,1	;volatile
  2179                           
  2180                           ;heater.c: 31: }
  2181  0623  0008               	return
  2182  0624                     l527:
  2183                           
  2184                           ;heater.c: 32: else;heater.c: 33: {RC5=0;
  2185  0624  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0625  1287               	bcf	7,5	;volatile
  2187                           
  2188                           ;heater.c: 34: RC2=0;
  2189  0626  1107               	bcf	7,2	;volatile
  2190                           
  2191                           ;heater.c: 35: RB1=0;
  2192  0627  1086               	bcf	6,1	;volatile
  2193  0628  0008               	return
  2194  0629                     __end_of_check_temp:
  2195                           
  2196                           	psect	text7
  2197  0F38                     __ptext7:	
  2198 ;; *************** function ___lwdiv *****************
  2199 ;; Defined at:
  2200 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  divisor         2    0[BANK1 ] unsigned int 
  2203 ;;  dividend        2    2[BANK1 ] unsigned int 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  quotient        2    5[BANK1 ] unsigned int 
  2206 ;;  counter         1    4[BANK1 ] unsigned char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  2    0[BANK1 ] unsigned int 
  2209 ;; Registers used:
  2210 ;;		wreg, status,2, status,0, btemp+1
  2211 ;; Tracked objects:
  2212 ;;		On entry : B00/100
  2213 ;;		On exit  : B00/100
  2214 ;;		Unchanged: 800/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2216 ;;      Params:         0       0       4       0       0
  2217 ;;      Locals:         0       0       3       0       0
  2218 ;;      Temps:          0       0       0       0       0
  2219 ;;      Totals:         0       0       7       0       0
  2220 ;;Total ram usage:        7 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    5
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_segment_display
  2227 ;;		_check_temp
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function ___lwdiv
  2233  0F38                     ___lwdiv:
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2237  0F38  01A5               	clrf	___lwdiv@quotient^(0+128)
  2238  0F39  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  2239  0F3A  0820               	movf	___lwdiv@divisor^(0+128),w
  2240  0F3B  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  2241  0F3C  1903               	btfsc	3,2
  2242  0F3D  2F6F               	goto	l2968
  2243  0F3E  01A4               	clrf	___lwdiv@counter^(0+128)
  2244  0F3F  0AA4               	incf	___lwdiv@counter^(0+128),f
  2245  0F40                     l2956:
  2246  0F40  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  2247  0F41  2F4E               	goto	l2958
  2248  0F42  3001               	movlw	1
  2249  0F43                     u2975:
  2250  0F43  1003               	clrc
  2251  0F44  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  2252  0F45  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  2253  0F46  3EFF               	addlw	-1
  2254  0F47  1D03               	skipz
  2255  0F48  2F43               	goto	u2975
  2256  0F49  3001               	movlw	1
  2257  0F4A  00FF               	movwf	127
  2258  0F4B  087F               	movf	127,w
  2259  0F4C  07A4               	addwf	___lwdiv@counter^(0+128),f
  2260  0F4D  2F40               	goto	l2956
  2261  0F4E                     l2958:
  2262  0F4E  3001               	movlw	1
  2263  0F4F                     u2995:
  2264  0F4F  1003               	clrc
  2265  0F50  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  2266  0F51  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2267  0F52  3EFF               	addlw	-1
  2268  0F53  1D03               	skipz
  2269  0F54  2F4F               	goto	u2995
  2270  0F55  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2271  0F56  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  2272  0F57  1D03               	skipz
  2273  0F58  2F5B               	goto	u3005
  2274  0F59  0820               	movf	___lwdiv@divisor^(0+128),w
  2275  0F5A  0222               	subwf	___lwdiv@dividend^(0+128),w
  2276  0F5B                     u3005:
  2277  0F5B  1C03               	skipc
  2278  0F5C  2F64               	goto	l2964
  2279  0F5D  0820               	movf	___lwdiv@divisor^(0+128),w
  2280  0F5E  02A2               	subwf	___lwdiv@dividend^(0+128),f
  2281  0F5F  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2282  0F60  1C03               	skipc
  2283  0F61  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  2284  0F62  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  2285  0F63  1425               	bsf	___lwdiv@quotient^(0+128),0
  2286  0F64                     l2964:
  2287  0F64  3001               	movlw	1
  2288  0F65                     u3015:
  2289  0F65  1003               	clrc
  2290  0F66  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  2291  0F67  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  2292  0F68  3EFF               	addlw	-1
  2293  0F69  1D03               	skipz
  2294  0F6A  2F65               	goto	u3015
  2295  0F6B  3001               	movlw	1
  2296  0F6C  02A4               	subwf	___lwdiv@counter^(0+128),f
  2297  0F6D  1D03               	btfss	3,2
  2298  0F6E  2F4E               	goto	l2958
  2299  0F6F                     l2968:
  2300  0F6F  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  2301  0F70  00A1               	movwf	(?___lwdiv+1)^(0+128)
  2302  0F71  0825               	movf	___lwdiv@quotient^(0+128),w
  2303  0F72  00A0               	movwf	?___lwdiv^(0+128)
  2304  0F73  0008               	return
  2305  0F74                     __end_of___lwdiv:
  2306                           
  2307                           	psect	text8
  2308  0687                     __ptext8:	
  2309 ;; *************** function _check_active_button *****************
  2310 ;; Defined at:
  2311 ;;		line 75 in file "heater.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 300/0
  2322 ;;		On exit  : 300/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2325 ;;      Params:         0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0
  2327 ;;      Temps:          0       0       2       0       0
  2328 ;;      Totals:         0       0       2       0       0
  2329 ;;Total ram usage:        2 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    8
  2332 ;; This function calls:
  2333 ;;		_restart_timer
  2334 ;;		_set_blink
  2335 ;;		_start_timer
  2336 ;;		_stop_timer
  2337 ;;		_temp_setting_down
  2338 ;;		_temp_setting_up
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           
  2345                           ;psect for function _check_active_button
  2346  0687                     _check_active_button:
  2347                           
  2348                           ;heater.c: 76: if(RB4==0) {
  2349                           
  2350                           ;incstack = 0
  2351 ;; hardware stack exceeded
  2352                           ; Regs used in _check_active_button: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2353  0687  1A06               	btfsc	6,4	;volatile
  2354  0688  2EB3               	goto	l555
  2355                           
  2356                           ;heater.c: 77: _delay((unsigned long)((100)*(4000000/4000.0)));
  2357  0689  3082               	movlw	130
  2358  068A  1683               	bsf	3,5	;RP0=1, select bank1
  2359  068B  1303               	bcf	3,6	;RP1=0, select bank1
  2360  068C  00C4               	movwf	(??_check_active_button^(0+128)+1)
  2361  068D  30DD               	movlw	221
  2362  068E  00C3               	movwf	??_check_active_button^(0+128)
  2363  068F                     u3417:
  2364  068F  0BC3               	decfsz	??_check_active_button^(0+128),f
  2365  0690  2E8F               	goto	u3417
  2366  0691  0BC4               	decfsz	(??_check_active_button^(0+128)+1),f
  2367  0692  2E8F               	goto	u3417
  2368                           
  2369                           ;heater.c: 78: set_blink();
  2370  0693  120A  158A  2597  120A  118A  	fcall	_set_blink
  2371                           
  2372                           ;heater.c: 79: stop_timer(1);
  2373  0698  3001               	movlw	1
  2374  0699  120A  158A  267A  120A  118A  	fcall	_stop_timer
  2375                           
  2376                           ;heater.c: 80: restart_timer(1);
  2377  069E  3001               	movlw	1
  2378  069F  120A  158A  268E  120A  118A  	fcall	_restart_timer
  2379                           
  2380                           ;heater.c: 81: start_timer(1,5000);
  2381  06A4  3088               	movlw	136
  2382  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  2383  06A6  00C0               	movwf	start_timer@time^(0+128)
  2384  06A7  3013               	movlw	19
  2385  06A8  00C1               	movwf	(start_timer@time^(0+128)+1)
  2386  06A9  3001               	movlw	1
  2387  06AA  120A  158A  2774  120A  118A  	fcall	_start_timer
  2388                           
  2389                           ;heater.c: 82: temp_setting_up();}
  2390  06AF  120A  158A  26A3   	fcall	_temp_setting_up
  2391  06B2  0008               	return
  2392  06B3                     l555:
  2393                           
  2394                           ;heater.c: 83: else if(RB5==0) {
  2395  06B3  1A86               	btfsc	6,5	;volatile
  2396  06B4  0008               	return
  2397                           
  2398                           ;heater.c: 84: _delay((unsigned long)((100)*(4000000/4000.0)));
  2399  06B5  3082               	movlw	130
  2400  06B6  1683               	bsf	3,5	;RP0=1, select bank1
  2401  06B7  1303               	bcf	3,6	;RP1=0, select bank1
  2402  06B8  00C4               	movwf	(??_check_active_button^(0+128)+1)
  2403  06B9  30DD               	movlw	221
  2404  06BA  00C3               	movwf	??_check_active_button^(0+128)
  2405  06BB                     u3427:
  2406  06BB  0BC3               	decfsz	??_check_active_button^(0+128),f
  2407  06BC  2EBB               	goto	u3427
  2408  06BD  0BC4               	decfsz	(??_check_active_button^(0+128)+1),f
  2409  06BE  2EBB               	goto	u3427
  2410                           
  2411                           ;heater.c: 85: set_blink();
  2412  06BF  120A  158A  2597  120A  118A  	fcall	_set_blink
  2413                           
  2414                           ;heater.c: 86: stop_timer(1);
  2415  06C4  3001               	movlw	1
  2416  06C5  120A  158A  267A  120A  118A  	fcall	_stop_timer
  2417                           
  2418                           ;heater.c: 87: restart_timer(1);
  2419  06CA  3001               	movlw	1
  2420  06CB  120A  158A  268E  120A  118A  	fcall	_restart_timer
  2421                           
  2422                           ;heater.c: 88: start_timer(1,5000);
  2423  06D0  3088               	movlw	136
  2424  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  2425  06D2  00C0               	movwf	start_timer@time^(0+128)
  2426  06D3  3013               	movlw	19
  2427  06D4  00C1               	movwf	(start_timer@time^(0+128)+1)
  2428  06D5  3001               	movlw	1
  2429  06D6  120A  158A  2774  120A  118A  	fcall	_start_timer
  2430                           
  2431                           ;heater.c: 89: temp_setting_down();}
  2432  06DB  120A  158A  25FB   	fcall	_temp_setting_down
  2433  06DE  0008               	return
  2434  06DF                     __end_of_check_active_button:
  2435                           
  2436                           	psect	text9
  2437  0EA3                     __ptext9:	
  2438 ;; *************** function _temp_setting_up *****************
  2439 ;; Defined at:
  2440 ;;		line 50 in file "heater.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, btemp+1
  2449 ;; Tracked objects:
  2450 ;;		On entry : 200/0
  2451 ;;		On exit  : 300/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2454 ;;      Params:         0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    5
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_check_active_button
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function _temp_setting_up
  2470  0EA3                     _temp_setting_up:
  2471                           
  2472                           ;heater.c: 51: if(temp_setting_mode==0) temp_setting_mode=1;
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _temp_setting_up: [wreg+status,2+status,0+btemp+1]
  2476  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0EA4  0850               	movf	_temp_setting_mode,w
  2478  0EA5  1D03               	btfss	3,2
  2479  0EA6  2EAA               	goto	l3092
  2480  0EA7  01D0               	clrf	_temp_setting_mode
  2481  0EA8  0AD0               	incf	_temp_setting_mode,f
  2482  0EA9  0008               	return
  2483  0EAA                     l3092:
  2484                           
  2485                           ;heater.c: 52: else if (temp_setting_mode==1){
  2486  0EAA  0350               	decf	_temp_setting_mode,w
  2487  0EAB  1D03               	btfss	3,2
  2488  0EAC  0008               	return
  2489                           
  2490                           ;heater.c: 53: if(temp_set<75) temp_set+=5;
  2491  0EAD  304B               	movlw	75
  2492  0EAE  0255               	subwf	_temp_set,w
  2493  0EAF  1803               	skipnc
  2494  0EB0  2EB6               	goto	l3098
  2495  0EB1  3005               	movlw	5
  2496  0EB2  00FF               	movwf	127
  2497  0EB3  087F               	movf	127,w
  2498  0EB4  07D5               	addwf	_temp_set,f
  2499  0EB5  0008               	return
  2500  0EB6                     l3098:
  2501                           
  2502                           ;heater.c: 54: else if (temp_set>=75) temp_set=75;
  2503  0EB6  304B               	movlw	75
  2504  0EB7  0255               	subwf	_temp_set,w
  2505  0EB8  1C03               	skipc
  2506  0EB9  0008               	return
  2507  0EBA  304B               	movlw	75
  2508  0EBB  00FF               	movwf	127
  2509  0EBC  087F               	movf	127,w
  2510  0EBD  00D5               	movwf	_temp_set
  2511  0EBE  0008               	return
  2512  0EBF                     __end_of_temp_setting_up:
  2513                           
  2514                           	psect	text10
  2515  0DFB                     __ptext10:	
  2516 ;; *************** function _temp_setting_down *****************
  2517 ;; Defined at:
  2518 ;;		line 60 in file "heater.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 200/0
  2529 ;;		On exit  : 300/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2532 ;;      Params:         0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0
  2535 ;;      Totals:         0       0       0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    5
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_check_active_button
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           
  2547                           ;psect for function _temp_setting_down
  2548  0DFB                     _temp_setting_down:
  2549                           
  2550                           ;heater.c: 61: if(temp_setting_mode==0) temp_setting_mode=1;
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _temp_setting_down: [wreg+status,2+status,0]
  2554  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0DFC  0850               	movf	_temp_setting_mode,w
  2556  0DFD  1D03               	btfss	3,2
  2557  0DFE  2E02               	goto	l3106
  2558  0DFF  01D0               	clrf	_temp_setting_mode
  2559  0E00  0AD0               	incf	_temp_setting_mode,f
  2560  0E01  0008               	return
  2561  0E02                     l3106:
  2562                           
  2563                           ;heater.c: 62: else if (temp_setting_mode==1){
  2564  0E02  0350               	decf	_temp_setting_mode,w
  2565  0E03  1D03               	btfss	3,2
  2566  0E04  0008               	return
  2567                           
  2568                           ;heater.c: 63: if(temp_set>35) temp_set-=5; }
  2569  0E05  3024               	movlw	36
  2570  0E06  0255               	subwf	_temp_set,w
  2571  0E07  1C03               	skipc
  2572  0E08  0008               	return
  2573  0E09  3005               	movlw	5
  2574  0E0A  02D5               	subwf	_temp_set,f
  2575  0E0B  0008               	return
  2576  0E0C                     __end_of_temp_setting_down:
  2577                           
  2578                           	psect	text11
  2579  0E7A                     __ptext11:	
  2580 ;; *************** function _stop_timer *****************
  2581 ;; Defined at:
  2582 ;;		line 139 in file "timer.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  timer           1    wreg     unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  timer           1    0[BANK1 ] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 300/0
  2593 ;;		On exit  : 200/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2596 ;;      Params:         0       0       0       0       0
  2597 ;;      Locals:         0       0       1       0       0
  2598 ;;      Temps:          0       0       0       0       0
  2599 ;;      Totals:         0       0       1       0       0
  2600 ;;Total ram usage:        1 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    5
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_check_active_button
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _stop_timer
  2612  0E7A                     _stop_timer:
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in _stop_timer: [wreg+status,2+status,0]
  2616                           ;stop_timer@timer stored from wreg
  2617  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  2618  0E7B  00A0               	movwf	stop_timer@timer^(0+128)
  2619                           
  2620                           ;timer.c: 140: if (timer==1){
  2621  0E7C  0320               	decf	stop_timer@timer^(0+128),w
  2622  0E7D  1D03               	btfss	3,2
  2623  0E7E  2E82               	goto	l2998
  2624                           
  2625                           ;timer.c: 141: TMR1ON=0;
  2626  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0E80  1010               	bcf	16,0	;volatile
  2628                           
  2629                           ;timer.c: 142: }
  2630  0E81  0008               	return
  2631  0E82                     l2998:
  2632                           
  2633                           ;timer.c: 143: else if (timer==2){
  2634  0E82  3002               	movlw	2
  2635  0E83  0620               	xorwf	stop_timer@timer^(0+128),w
  2636  0E84  1D03               	btfss	3,2
  2637  0E85  2E89               	goto	l3002
  2638                           
  2639                           ;timer.c: 144: TMR2ON=0;
  2640  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0E87  1112               	bcf	18,2	;volatile
  2642                           
  2643                           ;timer.c: 145: }
  2644  0E88  0008               	return
  2645  0E89                     l3002:
  2646                           
  2647                           ;timer.c: 146: else if (timer==0){
  2648  0E89  0820               	movf	stop_timer@timer^(0+128),w
  2649  0E8A  1D03               	btfss	3,2
  2650  0E8B  0008               	return
  2651                           
  2652                           ;timer.c: 147: PSA=1;
  2653  0E8C  1581               	bsf	1,3	;volatile
  2654                           
  2655                           ;timer.c: 148: }
  2656  0E8D  0008               	return
  2657  0E8E                     __end_of_stop_timer:
  2658                           
  2659                           	psect	text12
  2660  0F74                     __ptext12:	
  2661 ;; *************** function _start_timer *****************
  2662 ;; Defined at:
  2663 ;;		line 173 in file "timer.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  timer           1    wreg     unsigned char 
  2666 ;;  time            2   32[BANK1 ] unsigned short 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  timer           1   34[BANK1 ] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 300/100
  2675 ;;		On exit  : 200/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2678 ;;      Params:         0       0       2       0       0
  2679 ;;      Locals:         0       0       1       0       0
  2680 ;;      Temps:          0       0       0       0       0
  2681 ;;      Totals:         0       0       3       0       0
  2682 ;;Total ram usage:        3 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    7
  2685 ;; This function calls:
  2686 ;;		_set_timer0
  2687 ;;		_set_timer1
  2688 ;;		_set_timer2
  2689 ;; This function is called by:
  2690 ;;		_main
  2691 ;;		_check_active_button
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _start_timer
  2697  0F74                     _start_timer:
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _start_timer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2701                           ;start_timer@timer stored from wreg
  2702  0F74  00C2               	movwf	start_timer@timer^(0+128)
  2703                           
  2704                           ;timer.c: 174: if (timer==1){
  2705  0F75  0342               	decf	start_timer@timer^(0+128),w
  2706  0F76  1D03               	btfss	3,2
  2707  0F77  2F8D               	goto	l3016
  2708                           
  2709                           ;timer.c: 175: set_timer1(time);
  2710  0F78  0841               	movf	(start_timer@time+1)^(0+128),w
  2711  0F79  00B5               	movwf	(set_timer1@time+1)^(0+128)
  2712  0F7A  0840               	movf	start_timer@time^(0+128),w
  2713  0F7B  00B4               	movwf	set_timer1@time^(0+128)
  2714  0F7C  120A  118A  2232   	fcall	_set_timer1
  2715                           
  2716                           ;timer.c: 176: TMR1=*TMR1_REG;
  2717  0F7F  084B               	movf	_TMR1_REG^(0+128),w
  2718  0F80  0084               	movwf	4
  2719  0F81  1383               	bcf	3,7	;select IRP bank0
  2720  0F82  0800               	movf	0,w
  2721  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  2722  0F84  008E               	movwf	14	;volatile
  2723  0F85  0A84               	incf	4,f
  2724  0F86  0800               	movf	0,w
  2725  0F87  008F               	movwf	15	;volatile
  2726                           
  2727                           ;timer.c: 177: TMR1IE=1;
  2728  0F88  1683               	bsf	3,5	;RP0=1, select bank1
  2729  0F89  140C               	bsf	12,0	;volatile
  2730                           
  2731                           ;timer.c: 178: TMR1ON=1;
  2732  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0F8B  1410               	bsf	16,0	;volatile
  2734                           
  2735                           ;timer.c: 180: }
  2736  0F8C  0008               	return
  2737  0F8D                     l3016:
  2738                           
  2739                           ;timer.c: 181: else if (timer==2){
  2740  0F8D  3002               	movlw	2
  2741  0F8E  0642               	xorwf	start_timer@timer^(0+128),w
  2742  0F8F  1D03               	btfss	3,2
  2743  0F90  2FA3               	goto	l3026
  2744                           
  2745                           ;timer.c: 182: set_timer2(time);
  2746  0F91  0841               	movf	(start_timer@time+1)^(0+128),w
  2747  0F92  00B5               	movwf	(set_timer2@time+1)^(0+128)
  2748  0F93  0840               	movf	start_timer@time^(0+128),w
  2749  0F94  00B4               	movwf	set_timer2@time^(0+128)
  2750  0F95  120A  118A  20F4   	fcall	_set_timer2
  2751                           
  2752                           ;timer.c: 183: TMR2=*TMR2_REG;
  2753  0F98  0849               	movf	_TMR2_REG^(0+128),w
  2754  0F99  0084               	movwf	4
  2755  0F9A  1383               	bcf	3,7	;select IRP bank0
  2756  0F9B  0800               	movf	0,w
  2757  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  2758  0F9D  0091               	movwf	17	;volatile
  2759                           
  2760                           ;timer.c: 184: TMR2IE=1;
  2761  0F9E  1683               	bsf	3,5	;RP0=1, select bank1
  2762  0F9F  148C               	bsf	12,1	;volatile
  2763                           
  2764                           ;timer.c: 185: TMR2ON=1;
  2765  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  2766  0FA1  1512               	bsf	18,2	;volatile
  2767                           
  2768                           ;timer.c: 187: }
  2769  0FA2  0008               	return
  2770  0FA3                     l3026:
  2771                           
  2772                           ;timer.c: 188: else if (timer==0){
  2773  0FA3  0842               	movf	start_timer@timer^(0+128),w
  2774  0FA4  1D03               	btfss	3,2
  2775  0FA5  0008               	return
  2776                           
  2777                           ;timer.c: 189: set_timer0(time);
  2778  0FA6  0841               	movf	(start_timer@time+1)^(0+128),w
  2779  0FA7  00B5               	movwf	(set_timer0@time+1)^(0+128)
  2780  0FA8  0840               	movf	start_timer@time^(0+128),w
  2781  0FA9  00B4               	movwf	set_timer0@time^(0+128)
  2782  0FAA  120A  118A  2194   	fcall	_set_timer0
  2783                           
  2784                           ;timer.c: 190: TMR0=*TMR0_REG;
  2785  0FAD  0847               	movf	_TMR0_REG^(0+128),w
  2786  0FAE  0084               	movwf	4
  2787  0FAF  1383               	bcf	3,7	;select IRP bank0
  2788  0FB0  0800               	movf	0,w
  2789  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0FB2  0081               	movwf	1	;volatile
  2791                           
  2792                           ;timer.c: 191: TMR0IE=1;
  2793  0FB3  168B               	bsf	11,5	;volatile
  2794                           
  2795                           ;timer.c: 192: }
  2796  0FB4  0008               	return
  2797  0FB5                     __end_of_start_timer:
  2798                           
  2799                           	psect	text13
  2800  00F4                     __ptext13:	
  2801 ;; *************** function _set_timer2 *****************
  2802 ;; Defined at:
  2803 ;;		line 60 in file "timer.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  time            2   20[BANK1 ] unsigned short 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  i               2   30[BANK1 ] unsigned short 
  2808 ;;  Time            4   24[BANK1 ] unsigned long 
  2809 ;;  resolution      2   28[BANK1 ] unsigned short 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 300/100
  2816 ;;		On exit  : 300/100
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         0       0       2       0       0
  2820 ;;      Locals:         0       0       8       0       0
  2821 ;;      Temps:          0       0       2       0       0
  2822 ;;      Totals:         0       0      12       0       0
  2823 ;;Total ram usage:       12 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    6
  2826 ;; This function calls:
  2827 ;;		___lldiv
  2828 ;;		___llmod
  2829 ;;		_multiply
  2830 ;; This function is called by:
  2831 ;;		_start_timer
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _set_timer2
  2837  00F4                     _set_timer2:
  2838                           
  2839                           ;timer.c: 62: unsigned long Time=multiply(time,1000);
  2840                           
  2841                           ;incstack = 0
  2842                           ; Regs used in _set_timer2: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2843  00F4  0835               	movf	(set_timer2@time+1)^(0+128),w
  2844  00F5  00A1               	movwf	(multiply@x+1)^(0+128)
  2845  00F6  0834               	movf	set_timer2@time^(0+128),w
  2846  00F7  00A0               	movwf	multiply@x^(0+128)
  2847  00F8  30E8               	movlw	232
  2848  00F9  00A2               	movwf	multiply@y^(0+128)
  2849  00FA  3003               	movlw	3
  2850  00FB  00A3               	movwf	(multiply@y^(0+128)+1)
  2851  00FC  120A  118A  2366  120A  118A  	fcall	_multiply
  2852  0101  0823               	movf	(?_multiply+3)^(0+128),w
  2853  0102  00BB               	movwf	(set_timer2@Time+3)^(0+128)
  2854  0103  0822               	movf	(?_multiply+2)^(0+128),w
  2855  0104  00BA               	movwf	(set_timer2@Time+2)^(0+128)
  2856  0105  0821               	movf	(?_multiply+1)^(0+128),w
  2857  0106  00B9               	movwf	(set_timer2@Time+1)^(0+128)
  2858  0107  0820               	movf	?_multiply^(0+128),w
  2859  0108  00B8               	movwf	set_timer2@Time^(0+128)
  2860                           
  2861                           ;timer.c: 63: unsigned static char tmr2=0;;timer.c: 64: unsigned static char cntr2=0;;ti
      +                          mer.c: 65: T2CKPS0=1;
  2862  0109  1283               	bcf	3,5	;RP0=0, select bank0
  2863  010A  1412               	bsf	18,0	;volatile
  2864                           
  2865                           ;timer.c: 66: T2CKPS1=0;
  2866  010B  1092               	bcf	18,1	;volatile
  2867                           
  2868                           ;timer.c: 67: TOUTPS0=1;
  2869  010C  1592               	bsf	18,3	;volatile
  2870                           
  2871                           ;timer.c: 68: TOUTPS1=1;
  2872  010D  1612               	bsf	18,4	;volatile
  2873                           
  2874                           ;timer.c: 69: TOUTPS2=1;
  2875  010E  1692               	bsf	18,5	;volatile
  2876                           
  2877                           ;timer.c: 70: TOUTPS3=1;
  2878  010F  1712               	bsf	18,6	;volatile
  2879                           
  2880                           ;timer.c: 71: TMR2_REG=&tmr2;
  2881  0110  30D2               	movlw	(low (set_timer2@tmr2| 0))& (0+255)
  2882  0111  00FF               	movwf	127
  2883  0112  087F               	movf	127,w
  2884  0113  1683               	bsf	3,5	;RP0=1, select bank1
  2885  0114  00C9               	movwf	_TMR2_REG^(0+128)
  2886                           
  2887                           ;timer.c: 72: PR2=255;
  2888  0115  30FF               	movlw	255
  2889  0116  0092               	movwf	18	;volatile
  2890                           
  2891                           ;timer.c: 74: unsigned short resolution= 16320;
  2892  0117  30C0               	movlw	192
  2893  0118  00BC               	movwf	set_timer2@resolution^(0+128)
  2894  0119  303F               	movlw	63
  2895  011A  00BD               	movwf	(set_timer2@resolution^(0+128)+1)
  2896                           
  2897                           ;timer.c: 76: if (Time % resolution !=0){
  2898  011B  3000               	movlw	0
  2899  011C  00A3               	movwf	(___llmod@divisor+3)^(0+128)
  2900  011D  3000               	movlw	0
  2901  011E  00A2               	movwf	(___llmod@divisor+2)^(0+128)
  2902  011F  303F               	movlw	63
  2903  0120  00A1               	movwf	(___llmod@divisor+1)^(0+128)
  2904  0121  30C0               	movlw	192
  2905  0122  00A0               	movwf	___llmod@divisor^(0+128)
  2906  0123  083B               	movf	(set_timer2@Time+3)^(0+128),w
  2907  0124  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  2908  0125  083A               	movf	(set_timer2@Time+2)^(0+128),w
  2909  0126  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  2910  0127  0839               	movf	(set_timer2@Time+1)^(0+128),w
  2911  0128  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  2912  0129  0838               	movf	set_timer2@Time^(0+128),w
  2913  012A  00A4               	movwf	___llmod@dividend^(0+128)
  2914  012B  120A  118A  2731  120A  118A  	fcall	___llmod
  2915  0130  0823               	movf	(?___llmod+3)^(0+128),w
  2916  0131  0422               	iorwf	(?___llmod+2)^(0+128),w
  2917  0132  0421               	iorwf	(?___llmod+1)^(0+128),w
  2918  0133  0420               	iorwf	?___llmod^(0+128),w
  2919  0134  1903               	skipnz
  2920  0135  2975               	goto	l2894
  2921                           
  2922                           ;timer.c: 77: for (unsigned short i=15650;i>0;i--){
  2923  0136  3022               	movlw	34
  2924  0137  00BE               	movwf	set_timer2@i^(0+128)
  2925  0138  303D               	movlw	61
  2926  0139  00BF               	movwf	(set_timer2@i^(0+128)+1)
  2927  013A                     l2884:
  2928                           
  2929                           ;timer.c: 78: if (Time%i==0){
  2930  013A  083E               	movf	set_timer2@i^(0+128),w
  2931  013B  00A0               	movwf	___llmod@divisor^(0+128)
  2932  013C  083F               	movf	(set_timer2@i+1)^(0+128),w
  2933  013D  00A1               	movwf	(___llmod@divisor^(0+128)+1)
  2934  013E  01A2               	clrf	(___llmod@divisor^(0+128)+2)
  2935  013F  01A3               	clrf	(___llmod@divisor^(0+128)+3)
  2936  0140  083B               	movf	(set_timer2@Time+3)^(0+128),w
  2937  0141  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  2938  0142  083A               	movf	(set_timer2@Time+2)^(0+128),w
  2939  0143  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  2940  0144  0839               	movf	(set_timer2@Time+1)^(0+128),w
  2941  0145  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  2942  0146  0838               	movf	set_timer2@Time^(0+128),w
  2943  0147  00A4               	movwf	___llmod@dividend^(0+128)
  2944  0148  120A  118A  2731  120A  118A  	fcall	___llmod
  2945  014D  0823               	movf	(?___llmod+3)^(0+128),w
  2946  014E  0422               	iorwf	(?___llmod+2)^(0+128),w
  2947  014F  0421               	iorwf	(?___llmod+1)^(0+128),w
  2948  0150  0420               	iorwf	?___llmod^(0+128),w
  2949  0151  1D03               	skipz
  2950  0152  296A               	goto	l2890
  2951                           
  2952                           ;timer.c: 79: resolution=i;
  2953  0153  083F               	movf	(set_timer2@i+1)^(0+128),w
  2954  0154  00BD               	movwf	(set_timer2@resolution+1)^(0+128)
  2955  0155  083E               	movf	set_timer2@i^(0+128),w
  2956  0156  00BC               	movwf	set_timer2@resolution^(0+128)
  2957                           
  2958                           ;timer.c: 80: tmr2=-(resolution/64-PR2);
  2959  0157  083D               	movf	(set_timer2@resolution+1)^(0+128),w
  2960  0158  00B7               	movwf	(??_set_timer2^(0+128)+1)
  2961  0159  083C               	movf	set_timer2@resolution^(0+128),w
  2962  015A  00B6               	movwf	??_set_timer2^(0+128)
  2963  015B  3006               	movlw	6
  2964  015C                     u2915:
  2965  015C  1003               	clrc
  2966  015D  0CB7               	rrf	(??_set_timer2^(0+128)+1),f
  2967  015E  0CB6               	rrf	??_set_timer2^(0+128),f
  2968  015F  3EFF               	addlw	-1
  2969  0160  1D03               	skipz
  2970  0161  295C               	goto	u2915
  2971  0162  0812               	movf	18,w
  2972  0163  0236               	subwf	??_set_timer2^(0+128),w
  2973  0164  3AFF               	xorlw	255
  2974  0165  3E01               	addlw	1
  2975  0166  00FF               	movwf	127
  2976  0167  087F               	movf	127,w
  2977  0168  00D2               	movwf	set_timer2@tmr2^(0+128)
  2978                           
  2979                           ;timer.c: 81: break;
  2980  0169  297A               	goto	l2898
  2981  016A                     l2890:
  2982  016A  3001               	movlw	1
  2983  016B  02BE               	subwf	set_timer2@i^(0+128),f
  2984  016C  3000               	movlw	0
  2985  016D  1C03               	skipc
  2986  016E  03BF               	decf	(set_timer2@i+1)^(0+128),f
  2987  016F  02BF               	subwf	(set_timer2@i+1)^(0+128),f
  2988  0170  083E               	movf	set_timer2@i^(0+128),w
  2989  0171  043F               	iorwf	(set_timer2@i+1)^(0+128),w
  2990  0172  1903               	btfsc	3,2
  2991  0173  297A               	goto	l2898
  2992  0174  293A               	goto	l2884
  2993  0175                     l2894:
  2994                           
  2995                           ;timer.c: 85: else{;timer.c: 86: tmr2=0;
  2996  0175  01D2               	clrf	set_timer2@tmr2^(0+128)
  2997                           
  2998                           ;timer.c: 87: resolution=510;
  2999  0176  30FE               	movlw	254
  3000  0177  00BC               	movwf	set_timer2@resolution^(0+128)
  3001  0178  3001               	movlw	1
  3002  0179  00BD               	movwf	(set_timer2@resolution^(0+128)+1)
  3003  017A                     l2898:
  3004                           
  3005                           ;timer.c: 88: };timer.c: 89: cntr2= Time/resolution;
  3006  017A  083C               	movf	set_timer2@resolution^(0+128),w
  3007  017B  00A0               	movwf	___lldiv@divisor^(0+128)
  3008  017C  083D               	movf	(set_timer2@resolution+1)^(0+128),w
  3009  017D  00A1               	movwf	(___lldiv@divisor^(0+128)+1)
  3010  017E  01A2               	clrf	(___lldiv@divisor^(0+128)+2)
  3011  017F  01A3               	clrf	(___lldiv@divisor^(0+128)+3)
  3012  0180  083B               	movf	(set_timer2@Time+3)^(0+128),w
  3013  0181  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
  3014  0182  083A               	movf	(set_timer2@Time+2)^(0+128),w
  3015  0183  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  3016  0184  0839               	movf	(set_timer2@Time+1)^(0+128),w
  3017  0185  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  3018  0186  0838               	movf	set_timer2@Time^(0+128),w
  3019  0187  00A4               	movwf	___lldiv@dividend^(0+128)
  3020  0188  120A  118A  2629   	fcall	___lldiv
  3021  018B  0820               	movf	?___lldiv^(0+128),w
  3022  018C  00FF               	movwf	127
  3023  018D  087F               	movf	127,w
  3024  018E  00D1               	movwf	set_timer2@cntr2^(0+128)
  3025                           
  3026                           ;timer.c: 90: counter2=&cntr2;
  3027  018F  30D1               	movlw	(low (set_timer2@cntr2| 0))& (0+255)
  3028  0190  00FF               	movwf	127
  3029  0191  087F               	movf	127,w
  3030  0192  00CA               	movwf	_counter2^(0+128)
  3031  0193  0008               	return
  3032  0194                     __end_of_set_timer2:
  3033                           
  3034                           	psect	text14
  3035  0232                     __ptext14:	
  3036 ;; *************** function _set_timer1 *****************
  3037 ;; Defined at:
  3038 ;;		line 22 in file "timer.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  time            2   20[BANK1 ] unsigned short 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  i               2   30[BANK1 ] unsigned int 
  3043 ;;  Time            4   24[BANK1 ] unsigned long 
  3044 ;;  resolution      2   28[BANK1 ] unsigned int 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 300/100
  3051 ;;		On exit  : 300/100
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3054 ;;      Params:         0       0       2       0       0
  3055 ;;      Locals:         0       0       8       0       0
  3056 ;;      Temps:          0       0       2       0       0
  3057 ;;      Totals:         0       0      12       0       0
  3058 ;;Total ram usage:       12 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    6
  3061 ;; This function calls:
  3062 ;;		___lldiv
  3063 ;;		___llmod
  3064 ;;		_multiply
  3065 ;; This function is called by:
  3066 ;;		_start_timer
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _set_timer1
  3072  0232                     _set_timer1:
  3073                           
  3074                           ;timer.c: 24: unsigned long Time=multiply(time,1000);
  3075                           
  3076                           ;incstack = 0
  3077                           ; Regs used in _set_timer1: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3078  0232  0835               	movf	(set_timer1@time+1)^(0+128),w
  3079  0233  00A1               	movwf	(multiply@x+1)^(0+128)
  3080  0234  0834               	movf	set_timer1@time^(0+128),w
  3081  0235  00A0               	movwf	multiply@x^(0+128)
  3082  0236  30E8               	movlw	232
  3083  0237  00A2               	movwf	multiply@y^(0+128)
  3084  0238  3003               	movlw	3
  3085  0239  00A3               	movwf	(multiply@y^(0+128)+1)
  3086  023A  120A  118A  2366  120A  118A  	fcall	_multiply
  3087  023F  0823               	movf	(?_multiply+3)^(0+128),w
  3088  0240  00BB               	movwf	(set_timer1@Time+3)^(0+128)
  3089  0241  0822               	movf	(?_multiply+2)^(0+128),w
  3090  0242  00BA               	movwf	(set_timer1@Time+2)^(0+128)
  3091  0243  0821               	movf	(?_multiply+1)^(0+128),w
  3092  0244  00B9               	movwf	(set_timer1@Time+1)^(0+128)
  3093  0245  0820               	movf	?_multiply^(0+128),w
  3094  0246  00B8               	movwf	set_timer1@Time^(0+128)
  3095                           
  3096                           ;timer.c: 25: unsigned static int tmr1=0;;timer.c: 26: unsigned static char cntr1=0;;tim
      +                          er.c: 27: TMR1CS=0;
  3097  0247  1283               	bcf	3,5	;RP0=0, select bank0
  3098  0248  1090               	bcf	16,1	;volatile
  3099                           
  3100                           ;timer.c: 28: T1OSCEN=0;
  3101  0249  1190               	bcf	16,3	;volatile
  3102                           
  3103                           ;timer.c: 29: T1CKPS0=0;
  3104  024A  1210               	bcf	16,4	;volatile
  3105                           
  3106                           ;timer.c: 30: T1CKPS1=0;
  3107  024B  1290               	bcf	16,5	;volatile
  3108                           
  3109                           ;timer.c: 31: TMR1_REG=&tmr1;
  3110  024C  30CD               	movlw	(low (set_timer1@tmr1| 0))& (0+255)
  3111  024D  00FF               	movwf	127
  3112  024E  087F               	movf	127,w
  3113  024F  1683               	bsf	3,5	;RP0=1, select bank1
  3114  0250  00CB               	movwf	_TMR1_REG^(0+128)
  3115                           
  3116                           ;timer.c: 33: unsigned int resolution= 65535;
  3117  0251  30FF               	movlw	255
  3118  0252  00BC               	movwf	set_timer1@resolution^(0+128)
  3119  0253  30FF               	movlw	255
  3120  0254  00BD               	movwf	(set_timer1@resolution^(0+128)+1)
  3121                           
  3122                           ;timer.c: 35: if (Time % resolution !=0){
  3123  0255  3000               	movlw	0
  3124  0256  00A3               	movwf	(___llmod@divisor+3)^(0+128)
  3125  0257  3000               	movlw	0
  3126  0258  00A2               	movwf	(___llmod@divisor+2)^(0+128)
  3127  0259  30FF               	movlw	255
  3128  025A  00A1               	movwf	(___llmod@divisor+1)^(0+128)
  3129  025B  30FF               	movlw	255
  3130  025C  00A0               	movwf	___llmod@divisor^(0+128)
  3131  025D  083B               	movf	(set_timer1@Time+3)^(0+128),w
  3132  025E  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  3133  025F  083A               	movf	(set_timer1@Time+2)^(0+128),w
  3134  0260  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  3135  0261  0839               	movf	(set_timer1@Time+1)^(0+128),w
  3136  0262  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  3137  0263  0838               	movf	set_timer1@Time^(0+128),w
  3138  0264  00A4               	movwf	___llmod@dividend^(0+128)
  3139  0265  120A  118A  2731  120A  118A  	fcall	___llmod
  3140  026A  0823               	movf	(?___llmod+3)^(0+128),w
  3141  026B  0422               	iorwf	(?___llmod+2)^(0+128),w
  3142  026C  0421               	iorwf	(?___llmod+1)^(0+128),w
  3143  026D  0420               	iorwf	?___llmod^(0+128),w
  3144  026E  1903               	skipnz
  3145  026F  2AAE               	goto	l2848
  3146                           
  3147                           ;timer.c: 36: for (unsigned int i=50000;i>0;i--){
  3148  0270  3050               	movlw	80
  3149  0271  00BE               	movwf	set_timer1@i^(0+128)
  3150  0272  30C3               	movlw	195
  3151  0273  00BF               	movwf	(set_timer1@i^(0+128)+1)
  3152  0274                     l2838:
  3153                           
  3154                           ;timer.c: 37: if (Time%i==0){
  3155  0274  083E               	movf	set_timer1@i^(0+128),w
  3156  0275  00A0               	movwf	___llmod@divisor^(0+128)
  3157  0276  083F               	movf	(set_timer1@i+1)^(0+128),w
  3158  0277  00A1               	movwf	(___llmod@divisor^(0+128)+1)
  3159  0278  01A2               	clrf	(___llmod@divisor^(0+128)+2)
  3160  0279  01A3               	clrf	(___llmod@divisor^(0+128)+3)
  3161  027A  083B               	movf	(set_timer1@Time+3)^(0+128),w
  3162  027B  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  3163  027C  083A               	movf	(set_timer1@Time+2)^(0+128),w
  3164  027D  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  3165  027E  0839               	movf	(set_timer1@Time+1)^(0+128),w
  3166  027F  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  3167  0280  0838               	movf	set_timer1@Time^(0+128),w
  3168  0281  00A4               	movwf	___llmod@dividend^(0+128)
  3169  0282  120A  118A  2731  120A  118A  	fcall	___llmod
  3170  0287  0823               	movf	(?___llmod+3)^(0+128),w
  3171  0288  0422               	iorwf	(?___llmod+2)^(0+128),w
  3172  0289  0421               	iorwf	(?___llmod+1)^(0+128),w
  3173  028A  0420               	iorwf	?___llmod^(0+128),w
  3174  028B  1D03               	skipz
  3175  028C  2AA3               	goto	l2844
  3176                           
  3177                           ;timer.c: 38: resolution=i;
  3178  028D  083F               	movf	(set_timer1@i+1)^(0+128),w
  3179  028E  00BD               	movwf	(set_timer1@resolution+1)^(0+128)
  3180  028F  083E               	movf	set_timer1@i^(0+128),w
  3181  0290  00BC               	movwf	set_timer1@resolution^(0+128)
  3182                           
  3183                           ;timer.c: 39: tmr1=-(resolution-65535);
  3184  0291  083C               	movf	set_timer1@resolution^(0+128),w
  3185  0292  3E01               	addlw	1
  3186  0293  00B6               	movwf	??_set_timer1^(0+128)
  3187  0294  083D               	movf	(set_timer1@resolution+1)^(0+128),w
  3188  0295  1803               	skipnc
  3189  0296  3E01               	addlw	1
  3190  0297  3E00               	addlw	0
  3191  0298  00B7               	movwf	(??_set_timer1+1)^(0+128)
  3192  0299  09B6               	comf	??_set_timer1^(0+128),f
  3193  029A  09B7               	comf	(??_set_timer1^(0+128)+1),f
  3194  029B  0AB6               	incf	??_set_timer1^(0+128),f
  3195  029C  1903               	skipnz
  3196  029D  0AB7               	incf	(??_set_timer1^(0+128)+1),f
  3197  029E  0836               	movf	??_set_timer1^(0+128),w
  3198  029F  00CD               	movwf	set_timer1@tmr1^(0+128)
  3199  02A0  0837               	movf	(??_set_timer1+1)^(0+128),w
  3200  02A1  00CE               	movwf	(set_timer1@tmr1+1)^(0+128)
  3201                           
  3202                           ;timer.c: 40: break;
  3203  02A2  2AB4               	goto	l2852
  3204  02A3                     l2844:
  3205  02A3  3001               	movlw	1
  3206  02A4  02BE               	subwf	set_timer1@i^(0+128),f
  3207  02A5  3000               	movlw	0
  3208  02A6  1C03               	skipc
  3209  02A7  03BF               	decf	(set_timer1@i+1)^(0+128),f
  3210  02A8  02BF               	subwf	(set_timer1@i+1)^(0+128),f
  3211  02A9  083E               	movf	set_timer1@i^(0+128),w
  3212  02AA  043F               	iorwf	(set_timer1@i+1)^(0+128),w
  3213  02AB  1903               	btfsc	3,2
  3214  02AC  2AB4               	goto	l2852
  3215  02AD  2A74               	goto	l2838
  3216  02AE                     l2848:
  3217                           
  3218                           ;timer.c: 44: else{;timer.c: 45: tmr1=0;
  3219  02AE  01CD               	clrf	set_timer1@tmr1^(0+128)
  3220  02AF  01CE               	clrf	(set_timer1@tmr1+1)^(0+128)
  3221                           
  3222                           ;timer.c: 46: resolution= 65535;
  3223  02B0  30FF               	movlw	255
  3224  02B1  00BC               	movwf	set_timer1@resolution^(0+128)
  3225  02B2  30FF               	movlw	255
  3226  02B3  00BD               	movwf	(set_timer1@resolution^(0+128)+1)
  3227  02B4                     l2852:
  3228                           
  3229                           ;timer.c: 47: };timer.c: 49: cntr1= Time/resolution;
  3230  02B4  083C               	movf	set_timer1@resolution^(0+128),w
  3231  02B5  00A0               	movwf	___lldiv@divisor^(0+128)
  3232  02B6  083D               	movf	(set_timer1@resolution+1)^(0+128),w
  3233  02B7  00A1               	movwf	(___lldiv@divisor^(0+128)+1)
  3234  02B8  01A2               	clrf	(___lldiv@divisor^(0+128)+2)
  3235  02B9  01A3               	clrf	(___lldiv@divisor^(0+128)+3)
  3236  02BA  083B               	movf	(set_timer1@Time+3)^(0+128),w
  3237  02BB  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
  3238  02BC  083A               	movf	(set_timer1@Time+2)^(0+128),w
  3239  02BD  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  3240  02BE  0839               	movf	(set_timer1@Time+1)^(0+128),w
  3241  02BF  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  3242  02C0  0838               	movf	set_timer1@Time^(0+128),w
  3243  02C1  00A4               	movwf	___lldiv@dividend^(0+128)
  3244  02C2  120A  118A  2629   	fcall	___lldiv
  3245  02C5  0820               	movf	?___lldiv^(0+128),w
  3246  02C6  00FF               	movwf	127
  3247  02C7  087F               	movf	127,w
  3248  02C8  00D3               	movwf	set_timer1@cntr1^(0+128)
  3249                           
  3250                           ;timer.c: 50: counter1=&cntr1;
  3251  02C9  30D3               	movlw	(low (set_timer1@cntr1| 0))& (0+255)
  3252  02CA  00FF               	movwf	127
  3253  02CB  087F               	movf	127,w
  3254  02CC  00CC               	movwf	_counter1^(0+128)
  3255  02CD  0008               	return
  3256  02CE                     __end_of_set_timer1:
  3257                           
  3258                           	psect	text15
  3259  0194                     __ptext15:	
  3260 ;; *************** function _set_timer0 *****************
  3261 ;; Defined at:
  3262 ;;		line 100 in file "timer.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  time            2   20[BANK1 ] unsigned short 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  i               2   30[BANK1 ] unsigned short 
  3267 ;;  Time            4   24[BANK1 ] unsigned long 
  3268 ;;  resolution      2   28[BANK1 ] unsigned short 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 300/100
  3275 ;;		On exit  : 300/100
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3278 ;;      Params:         0       0       2       0       0
  3279 ;;      Locals:         0       0       8       0       0
  3280 ;;      Temps:          0       0       2       0       0
  3281 ;;      Totals:         0       0      12       0       0
  3282 ;;Total ram usage:       12 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    6
  3285 ;; This function calls:
  3286 ;;		___lldiv
  3287 ;;		___llmod
  3288 ;;		_multiply
  3289 ;; This function is called by:
  3290 ;;		_start_timer
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _set_timer0
  3296  0194                     _set_timer0:
  3297                           
  3298                           ;timer.c: 102: unsigned long Time=multiply(time,1000);
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _set_timer0: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3302  0194  0835               	movf	(set_timer0@time+1)^(0+128),w
  3303  0195  00A1               	movwf	(multiply@x+1)^(0+128)
  3304  0196  0834               	movf	set_timer0@time^(0+128),w
  3305  0197  00A0               	movwf	multiply@x^(0+128)
  3306  0198  30E8               	movlw	232
  3307  0199  00A2               	movwf	multiply@y^(0+128)
  3308  019A  3003               	movlw	3
  3309  019B  00A3               	movwf	(multiply@y^(0+128)+1)
  3310  019C  120A  118A  2366  120A  118A  	fcall	_multiply
  3311  01A1  0823               	movf	(?_multiply+3)^(0+128),w
  3312  01A2  00BB               	movwf	(set_timer0@Time+3)^(0+128)
  3313  01A3  0822               	movf	(?_multiply+2)^(0+128),w
  3314  01A4  00BA               	movwf	(set_timer0@Time+2)^(0+128)
  3315  01A5  0821               	movf	(?_multiply+1)^(0+128),w
  3316  01A6  00B9               	movwf	(set_timer0@Time+1)^(0+128)
  3317  01A7  0820               	movf	?_multiply^(0+128),w
  3318  01A8  00B8               	movwf	set_timer0@Time^(0+128)
  3319                           
  3320                           ;timer.c: 103: unsigned static char tmr0=0;;timer.c: 104: unsigned static char cntr0=0;;
      +                          timer.c: 105: PSA=0;
  3321  01A9  1181               	bcf	1,3	;volatile
  3322                           
  3323                           ;timer.c: 106: PS0=0;
  3324  01AA  1001               	bcf	1,0	;volatile
  3325                           
  3326                           ;timer.c: 107: PS1=1;
  3327  01AB  1481               	bsf	1,1	;volatile
  3328                           
  3329                           ;timer.c: 108: PS2=0;
  3330  01AC  1101               	bcf	1,2	;volatile
  3331                           
  3332                           ;timer.c: 109: T0CS=0;
  3333  01AD  1281               	bcf	1,5	;volatile
  3334                           
  3335                           ;timer.c: 110: T0SE=0;
  3336  01AE  1201               	bcf	1,4	;volatile
  3337                           
  3338                           ;timer.c: 111: TMR0_REG=&tmr0;
  3339  01AF  30D0               	movlw	(low (set_timer0@tmr0| 0))& (0+255)
  3340  01B0  00FF               	movwf	127
  3341  01B1  087F               	movf	127,w
  3342  01B2  00C7               	movwf	_TMR0_REG^(0+128)
  3343                           
  3344                           ;timer.c: 113: unsigned short resolution= 2040;
  3345  01B3  30F8               	movlw	248
  3346  01B4  00BC               	movwf	set_timer0@resolution^(0+128)
  3347  01B5  3007               	movlw	7
  3348  01B6  00BD               	movwf	(set_timer0@resolution^(0+128)+1)
  3349                           
  3350                           ;timer.c: 114: if (Time % resolution !=0){
  3351  01B7  3000               	movlw	0
  3352  01B8  00A3               	movwf	(___llmod@divisor+3)^(0+128)
  3353  01B9  3000               	movlw	0
  3354  01BA  00A2               	movwf	(___llmod@divisor+2)^(0+128)
  3355  01BB  3007               	movlw	7
  3356  01BC  00A1               	movwf	(___llmod@divisor+1)^(0+128)
  3357  01BD  30F8               	movlw	248
  3358  01BE  00A0               	movwf	___llmod@divisor^(0+128)
  3359  01BF  083B               	movf	(set_timer0@Time+3)^(0+128),w
  3360  01C0  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  3361  01C1  083A               	movf	(set_timer0@Time+2)^(0+128),w
  3362  01C2  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  3363  01C3  0839               	movf	(set_timer0@Time+1)^(0+128),w
  3364  01C4  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  3365  01C5  0838               	movf	set_timer0@Time^(0+128),w
  3366  01C6  00A4               	movwf	___llmod@dividend^(0+128)
  3367  01C7  120A  118A  2731  120A  118A  	fcall	___llmod
  3368  01CC  0823               	movf	(?___llmod+3)^(0+128),w
  3369  01CD  0422               	iorwf	(?___llmod+2)^(0+128),w
  3370  01CE  0421               	iorwf	(?___llmod+1)^(0+128),w
  3371  01CF  0420               	iorwf	?___llmod^(0+128),w
  3372  01D0  1903               	skipnz
  3373  01D1  2A13               	goto	l2938
  3374                           
  3375                           ;timer.c: 115: for (unsigned short i=2039;i>0;i--){
  3376  01D2  30F7               	movlw	247
  3377  01D3  00BE               	movwf	set_timer0@i^(0+128)
  3378  01D4  3007               	movlw	7
  3379  01D5  00BF               	movwf	(set_timer0@i^(0+128)+1)
  3380  01D6                     l2928:
  3381                           
  3382                           ;timer.c: 116: if ((Time)%i==0){
  3383  01D6  083E               	movf	set_timer0@i^(0+128),w
  3384  01D7  00A0               	movwf	___llmod@divisor^(0+128)
  3385  01D8  083F               	movf	(set_timer0@i+1)^(0+128),w
  3386  01D9  00A1               	movwf	(___llmod@divisor^(0+128)+1)
  3387  01DA  01A2               	clrf	(___llmod@divisor^(0+128)+2)
  3388  01DB  01A3               	clrf	(___llmod@divisor^(0+128)+3)
  3389  01DC  083B               	movf	(set_timer0@Time+3)^(0+128),w
  3390  01DD  00A7               	movwf	(___llmod@dividend+3)^(0+128)
  3391  01DE  083A               	movf	(set_timer0@Time+2)^(0+128),w
  3392  01DF  00A6               	movwf	(___llmod@dividend+2)^(0+128)
  3393  01E0  0839               	movf	(set_timer0@Time+1)^(0+128),w
  3394  01E1  00A5               	movwf	(___llmod@dividend+1)^(0+128)
  3395  01E2  0838               	movf	set_timer0@Time^(0+128),w
  3396  01E3  00A4               	movwf	___llmod@dividend^(0+128)
  3397  01E4  120A  118A  2731  120A  118A  	fcall	___llmod
  3398  01E9  0823               	movf	(?___llmod+3)^(0+128),w
  3399  01EA  0422               	iorwf	(?___llmod+2)^(0+128),w
  3400  01EB  0421               	iorwf	(?___llmod+1)^(0+128),w
  3401  01EC  0420               	iorwf	?___llmod^(0+128),w
  3402  01ED  1D03               	skipz
  3403  01EE  2A08               	goto	l2934
  3404                           
  3405                           ;timer.c: 117: resolution=i;
  3406  01EF  083F               	movf	(set_timer0@i+1)^(0+128),w
  3407  01F0  00BD               	movwf	(set_timer0@resolution+1)^(0+128)
  3408  01F1  083E               	movf	set_timer0@i^(0+128),w
  3409  01F2  00BC               	movwf	set_timer0@resolution^(0+128)
  3410                           
  3411                           ;timer.c: 118: tmr0=-((resolution/8)-255);
  3412  01F3  083D               	movf	(set_timer0@resolution+1)^(0+128),w
  3413  01F4  00B7               	movwf	(??_set_timer0^(0+128)+1)
  3414  01F5  083C               	movf	set_timer0@resolution^(0+128),w
  3415  01F6  00B6               	movwf	??_set_timer0^(0+128)
  3416  01F7  1003               	clrc
  3417  01F8  0CB7               	rrf	(??_set_timer0^(0+128)+1),f
  3418  01F9  0CB6               	rrf	??_set_timer0^(0+128),f
  3419  01FA  1003               	clrc
  3420  01FB  0CB7               	rrf	(??_set_timer0^(0+128)+1),f
  3421  01FC  0CB6               	rrf	??_set_timer0^(0+128),f
  3422  01FD  1003               	clrc
  3423  01FE  0CB7               	rrf	(??_set_timer0^(0+128)+1),f
  3424  01FF  0CB6               	rrf	??_set_timer0^(0+128),f
  3425  0200  0836               	movf	??_set_timer0^(0+128),w
  3426  0201  3E01               	addlw	1
  3427  0202  3AFF               	xorlw	255
  3428  0203  3E01               	addlw	1
  3429  0204  00FF               	movwf	127
  3430  0205  087F               	movf	127,w
  3431  0206  00D0               	movwf	set_timer0@tmr0^(0+128)
  3432                           
  3433                           ;timer.c: 119: break;
  3434  0207  2A18               	goto	l2942
  3435  0208                     l2934:
  3436  0208  3001               	movlw	1
  3437  0209  02BE               	subwf	set_timer0@i^(0+128),f
  3438  020A  3000               	movlw	0
  3439  020B  1C03               	skipc
  3440  020C  03BF               	decf	(set_timer0@i+1)^(0+128),f
  3441  020D  02BF               	subwf	(set_timer0@i+1)^(0+128),f
  3442  020E  083E               	movf	set_timer0@i^(0+128),w
  3443  020F  043F               	iorwf	(set_timer0@i+1)^(0+128),w
  3444  0210  1903               	btfsc	3,2
  3445  0211  2A18               	goto	l2942
  3446  0212  29D6               	goto	l2928
  3447  0213                     l2938:
  3448                           
  3449                           ;timer.c: 123: else{;timer.c: 124: tmr0=0;
  3450  0213  01D0               	clrf	set_timer0@tmr0^(0+128)
  3451                           
  3452                           ;timer.c: 125: resolution=2040;
  3453  0214  30F8               	movlw	248
  3454  0215  00BC               	movwf	set_timer0@resolution^(0+128)
  3455  0216  3007               	movlw	7
  3456  0217  00BD               	movwf	(set_timer0@resolution^(0+128)+1)
  3457  0218                     l2942:
  3458                           
  3459                           ;timer.c: 126: };timer.c: 127: cntr0= Time/resolution;
  3460  0218  083C               	movf	set_timer0@resolution^(0+128),w
  3461  0219  00A0               	movwf	___lldiv@divisor^(0+128)
  3462  021A  083D               	movf	(set_timer0@resolution+1)^(0+128),w
  3463  021B  00A1               	movwf	(___lldiv@divisor^(0+128)+1)
  3464  021C  01A2               	clrf	(___lldiv@divisor^(0+128)+2)
  3465  021D  01A3               	clrf	(___lldiv@divisor^(0+128)+3)
  3466  021E  083B               	movf	(set_timer0@Time+3)^(0+128),w
  3467  021F  00A7               	movwf	(___lldiv@dividend+3)^(0+128)
  3468  0220  083A               	movf	(set_timer0@Time+2)^(0+128),w
  3469  0221  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  3470  0222  0839               	movf	(set_timer0@Time+1)^(0+128),w
  3471  0223  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  3472  0224  0838               	movf	set_timer0@Time^(0+128),w
  3473  0225  00A4               	movwf	___lldiv@dividend^(0+128)
  3474  0226  120A  118A  2629   	fcall	___lldiv
  3475  0229  0820               	movf	?___lldiv^(0+128),w
  3476  022A  00FF               	movwf	127
  3477  022B  087F               	movf	127,w
  3478  022C  00CF               	movwf	set_timer0@cntr0^(0+128)
  3479                           
  3480                           ;timer.c: 128: counter0=&cntr0;
  3481  022D  30CF               	movlw	(low (set_timer0@cntr0| 0))& (0+255)
  3482  022E  00FF               	movwf	127
  3483  022F  087F               	movf	127,w
  3484  0230  00C8               	movwf	_counter0^(0+128)
  3485  0231  0008               	return
  3486  0232                     __end_of_set_timer0:
  3487                           
  3488                           	psect	text16
  3489  0366                     __ptext16:	
  3490 ;; *************** function _multiply *****************
  3491 ;; Defined at:
  3492 ;;		line 7 in file "timer.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  x               2    0[BANK1 ] unsigned short 
  3495 ;;  y               2    2[BANK1 ] unsigned short 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  i               2   14[BANK1 ] unsigned short 
  3498 ;;  i               2   12[BANK1 ] unsigned short 
  3499 ;;  sum             4   16[BANK1 ] unsigned long 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  4    0[BANK1 ] unsigned long 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2
  3504 ;; Tracked objects:
  3505 ;;		On entry : 300/100
  3506 ;;		On exit  : 300/100
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3509 ;;      Params:         0       0       4       0       0
  3510 ;;      Locals:         0       0       8       0       0
  3511 ;;      Temps:          0       0       8       0       0
  3512 ;;      Totals:         0       0      20       0       0
  3513 ;;Total ram usage:       20 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    5
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_set_timer1
  3520 ;;		_set_timer2
  3521 ;;		_set_timer0
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _multiply
  3527  0366                     _multiply:
  3528                           
  3529                           ;timer.c: 8: unsigned long sum=0;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _multiply: [wreg+status,2]
  3533  0366  3000               	movlw	0
  3534  0367  00B3               	movwf	(multiply@sum+3)^(0+128)
  3535  0368  3000               	movlw	0
  3536  0369  00B2               	movwf	(multiply@sum+2)^(0+128)
  3537  036A  3000               	movlw	0
  3538  036B  00B1               	movwf	(multiply@sum+1)^(0+128)
  3539  036C  3000               	movlw	0
  3540  036D  00B0               	movwf	multiply@sum^(0+128)
  3541                           
  3542                           ;timer.c: 9: if (x>=y){
  3543  036E  0823               	movf	(multiply@y+1)^(0+128),w
  3544  036F  0221               	subwf	(multiply@x+1)^(0+128),w
  3545  0370  1D03               	skipz
  3546  0371  2B74               	goto	u2675
  3547  0372  0822               	movf	multiply@y^(0+128),w
  3548  0373  0220               	subwf	multiply@x^(0+128),w
  3549  0374                     u2675:
  3550  0374  1C03               	skipc
  3551  0375  2BAF               	goto	l2758
  3552                           
  3553                           ;timer.c: 10: for (unsigned short i=0;i<y;i++)
  3554  0376  01AC               	clrf	multiply@i^(0+128)
  3555  0377  01AD               	clrf	(multiply@i+1)^(0+128)
  3556  0378                     l349:
  3557  0378  0823               	movf	(multiply@y+1)^(0+128),w
  3558  0379  022D               	subwf	(multiply@i+1)^(0+128),w
  3559  037A  1D03               	skipz
  3560  037B  2B7E               	goto	u2695
  3561  037C  0822               	movf	multiply@y^(0+128),w
  3562  037D  022C               	subwf	multiply@i^(0+128),w
  3563  037E                     u2695:
  3564  037E  1803               	btfsc	3,0
  3565  037F  2BF0               	goto	l2764
  3566                           
  3567                           ;timer.c: 11: sum=sum+x;
  3568  0380  0830               	movf	multiply@sum^(0+128),w
  3569  0381  00A4               	movwf	??_multiply^(0+128)
  3570  0382  0831               	movf	(multiply@sum+1)^(0+128),w
  3571  0383  00A5               	movwf	(??_multiply^(0+128)+1)
  3572  0384  0832               	movf	(multiply@sum+2)^(0+128),w
  3573  0385  00A6               	movwf	(??_multiply^(0+128)+2)
  3574  0386  0833               	movf	(multiply@sum+3)^(0+128),w
  3575  0387  00A7               	movwf	(??_multiply^(0+128)+3)
  3576  0388  0820               	movf	multiply@x^(0+128),w
  3577  0389  00A8               	movwf	(??_multiply+4)^(0+128)
  3578  038A  0821               	movf	(multiply@x+1)^(0+128),w
  3579  038B  00A9               	movwf	((??_multiply+4)^(0+128)+1)
  3580  038C  01AA               	clrf	((??_multiply+4)^(0+128)+2)
  3581  038D  01AB               	clrf	((??_multiply+4)^(0+128)+3)
  3582  038E  0828               	movf	(??_multiply+4)^(0+128),w
  3583  038F  07A4               	addwf	??_multiply^(0+128),f
  3584  0390  0829               	movf	(??_multiply+5)^(0+128),w
  3585  0391  1803               	skipnc
  3586  0392  0F29               	incfsz	(??_multiply+5)^(0+128),w
  3587  0393  2B95               	goto	u2680
  3588  0394  2B96               	goto	u2681
  3589  0395                     u2680:
  3590  0395  07A5               	addwf	(??_multiply^(0+128)+1),f
  3591  0396                     u2681:
  3592  0396  082A               	movf	(??_multiply+6)^(0+128),w
  3593  0397  1803               	skipnc
  3594  0398  0F2A               	incfsz	(??_multiply+6)^(0+128),w
  3595  0399  2B9B               	goto	u2682
  3596  039A  2B9C               	goto	u2683
  3597  039B                     u2682:
  3598  039B  07A6               	addwf	(??_multiply^(0+128)+2),f
  3599  039C                     u2683:
  3600  039C  082B               	movf	(??_multiply+7)^(0+128),w
  3601  039D  1803               	skipnc
  3602  039E  0A2B               	incf	(??_multiply+7)^(0+128),w
  3603  039F  07A7               	addwf	(??_multiply^(0+128)+3),f
  3604  03A0  0827               	movf	(??_multiply+3)^(0+128),w
  3605  03A1  00B3               	movwf	(multiply@sum+3)^(0+128)
  3606  03A2  0826               	movf	(??_multiply+2)^(0+128),w
  3607  03A3  00B2               	movwf	(multiply@sum+2)^(0+128)
  3608  03A4  0825               	movf	(??_multiply+1)^(0+128),w
  3609  03A5  00B1               	movwf	(multiply@sum+1)^(0+128)
  3610  03A6  0824               	movf	??_multiply^(0+128),w
  3611  03A7  00B0               	movwf	multiply@sum^(0+128)
  3612  03A8  3001               	movlw	1
  3613  03A9  07AC               	addwf	multiply@i^(0+128),f
  3614  03AA  1803               	skipnc
  3615  03AB  0AAD               	incf	(multiply@i+1)^(0+128),f
  3616  03AC  3000               	movlw	0
  3617  03AD  07AD               	addwf	(multiply@i+1)^(0+128),f
  3618  03AE  2B78               	goto	l349
  3619  03AF                     l2758:
  3620                           
  3621                           ;timer.c: 13: else if (x<y){
  3622  03AF  0823               	movf	(multiply@y+1)^(0+128),w
  3623  03B0  0221               	subwf	(multiply@x+1)^(0+128),w
  3624  03B1  1D03               	skipz
  3625  03B2  2BB5               	goto	u2705
  3626  03B3  0822               	movf	multiply@y^(0+128),w
  3627  03B4  0220               	subwf	multiply@x^(0+128),w
  3628  03B5                     u2705:
  3629  03B5  1803               	skipnc
  3630  03B6  2BF0               	goto	l2764
  3631                           
  3632                           ;timer.c: 14: for (unsigned short i=0;i<x;i++)
  3633  03B7  01AE               	clrf	multiply@i_321^(0+128)
  3634  03B8  01AF               	clrf	(multiply@i_321+1)^(0+128)
  3635  03B9                     l354:
  3636  03B9  0821               	movf	(multiply@x+1)^(0+128),w
  3637  03BA  022F               	subwf	(multiply@i_321+1)^(0+128),w
  3638  03BB  1D03               	skipz
  3639  03BC  2BBF               	goto	u2725
  3640  03BD  0820               	movf	multiply@x^(0+128),w
  3641  03BE  022E               	subwf	multiply@i_321^(0+128),w
  3642  03BF                     u2725:
  3643  03BF  1803               	btfsc	3,0
  3644  03C0  2BF0               	goto	l2764
  3645                           
  3646                           ;timer.c: 15: sum=sum+y;
  3647  03C1  0830               	movf	multiply@sum^(0+128),w
  3648  03C2  00A4               	movwf	??_multiply^(0+128)
  3649  03C3  0831               	movf	(multiply@sum+1)^(0+128),w
  3650  03C4  00A5               	movwf	(??_multiply^(0+128)+1)
  3651  03C5  0832               	movf	(multiply@sum+2)^(0+128),w
  3652  03C6  00A6               	movwf	(??_multiply^(0+128)+2)
  3653  03C7  0833               	movf	(multiply@sum+3)^(0+128),w
  3654  03C8  00A7               	movwf	(??_multiply^(0+128)+3)
  3655  03C9  0822               	movf	multiply@y^(0+128),w
  3656  03CA  00A8               	movwf	(??_multiply+4)^(0+128)
  3657  03CB  0823               	movf	(multiply@y+1)^(0+128),w
  3658  03CC  00A9               	movwf	((??_multiply+4)^(0+128)+1)
  3659  03CD  01AA               	clrf	((??_multiply+4)^(0+128)+2)
  3660  03CE  01AB               	clrf	((??_multiply+4)^(0+128)+3)
  3661  03CF  0828               	movf	(??_multiply+4)^(0+128),w
  3662  03D0  07A4               	addwf	??_multiply^(0+128),f
  3663  03D1  0829               	movf	(??_multiply+5)^(0+128),w
  3664  03D2  1803               	skipnc
  3665  03D3  0F29               	incfsz	(??_multiply+5)^(0+128),w
  3666  03D4  2BD6               	goto	u2710
  3667  03D5  2BD7               	goto	u2711
  3668  03D6                     u2710:
  3669  03D6  07A5               	addwf	(??_multiply^(0+128)+1),f
  3670  03D7                     u2711:
  3671  03D7  082A               	movf	(??_multiply+6)^(0+128),w
  3672  03D8  1803               	skipnc
  3673  03D9  0F2A               	incfsz	(??_multiply+6)^(0+128),w
  3674  03DA  2BDC               	goto	u2712
  3675  03DB  2BDD               	goto	u2713
  3676  03DC                     u2712:
  3677  03DC  07A6               	addwf	(??_multiply^(0+128)+2),f
  3678  03DD                     u2713:
  3679  03DD  082B               	movf	(??_multiply+7)^(0+128),w
  3680  03DE  1803               	skipnc
  3681  03DF  0A2B               	incf	(??_multiply+7)^(0+128),w
  3682  03E0  07A7               	addwf	(??_multiply^(0+128)+3),f
  3683  03E1  0827               	movf	(??_multiply+3)^(0+128),w
  3684  03E2  00B3               	movwf	(multiply@sum+3)^(0+128)
  3685  03E3  0826               	movf	(??_multiply+2)^(0+128),w
  3686  03E4  00B2               	movwf	(multiply@sum+2)^(0+128)
  3687  03E5  0825               	movf	(??_multiply+1)^(0+128),w
  3688  03E6  00B1               	movwf	(multiply@sum+1)^(0+128)
  3689  03E7  0824               	movf	??_multiply^(0+128),w
  3690  03E8  00B0               	movwf	multiply@sum^(0+128)
  3691  03E9  3001               	movlw	1
  3692  03EA  07AE               	addwf	multiply@i_321^(0+128),f
  3693  03EB  1803               	skipnc
  3694  03EC  0AAF               	incf	(multiply@i_321+1)^(0+128),f
  3695  03ED  3000               	movlw	0
  3696  03EE  07AF               	addwf	(multiply@i_321+1)^(0+128),f
  3697  03EF  2BB9               	goto	l354
  3698  03F0                     l2764:
  3699                           
  3700                           ;timer.c: 16: };timer.c: 17: return sum;
  3701  03F0  0833               	movf	(multiply@sum+3)^(0+128),w
  3702  03F1  00A3               	movwf	(?_multiply+3)^(0+128)
  3703  03F2  0832               	movf	(multiply@sum+2)^(0+128),w
  3704  03F3  00A2               	movwf	(?_multiply+2)^(0+128)
  3705  03F4  0831               	movf	(multiply@sum+1)^(0+128),w
  3706  03F5  00A1               	movwf	(?_multiply+1)^(0+128)
  3707  03F6  0830               	movf	multiply@sum^(0+128),w
  3708  03F7  00A0               	movwf	?_multiply^(0+128)
  3709  03F8  0008               	return
  3710  03F9                     __end_of_multiply:
  3711                           
  3712                           	psect	text17
  3713  0731                     __ptext17:	
  3714 ;; *************** function ___llmod *****************
  3715 ;; Defined at:
  3716 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\llmod.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  divisor         4    0[BANK1 ] unsigned long 
  3719 ;;  dividend        4    4[BANK1 ] unsigned long 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  counter         1    9[BANK1 ] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  4    0[BANK1 ] unsigned long 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, btemp+1
  3726 ;; Tracked objects:
  3727 ;;		On entry : 300/100
  3728 ;;		On exit  : 300/100
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3731 ;;      Params:         0       0       8       0       0
  3732 ;;      Locals:         0       0       1       0       0
  3733 ;;      Temps:          0       0       1       0       0
  3734 ;;      Totals:         0       0      10       0       0
  3735 ;;Total ram usage:       10 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    5
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		_set_timer1
  3742 ;;		_set_timer2
  3743 ;;		_set_timer0
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function ___llmod
  3749  0731                     ___llmod:
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  3753  0731  0823               	movf	(___llmod@divisor+3)^(0+128),w
  3754  0732  0422               	iorwf	(___llmod@divisor+2)^(0+128),w
  3755  0733  0421               	iorwf	(___llmod@divisor+1)^(0+128),w
  3756  0734  0420               	iorwf	___llmod@divisor^(0+128),w
  3757  0735  1903               	skipnz
  3758  0736  2F74               	goto	l2812
  3759  0737  01A9               	clrf	___llmod@counter^(0+128)
  3760  0738  0AA9               	incf	___llmod@counter^(0+128),f
  3761  0739                     l2802:
  3762  0739  1BA3               	btfsc	(___llmod@divisor+3)^(0+128),7
  3763  073A  2F49               	goto	l2804
  3764  073B  3001               	movlw	1
  3765  073C  00A8               	movwf	??___llmod^(0+128)
  3766  073D                     u2815:
  3767  073D  1003               	clrc
  3768  073E  0DA0               	rlf	___llmod@divisor^(0+128),f
  3769  073F  0DA1               	rlf	(___llmod@divisor+1)^(0+128),f
  3770  0740  0DA2               	rlf	(___llmod@divisor+2)^(0+128),f
  3771  0741  0DA3               	rlf	(___llmod@divisor+3)^(0+128),f
  3772  0742  0BA8               	decfsz	??___llmod^(0+128),f
  3773  0743  2F3D               	goto	u2815
  3774  0744  3001               	movlw	1
  3775  0745  00FF               	movwf	127
  3776  0746  087F               	movf	127,w
  3777  0747  07A9               	addwf	___llmod@counter^(0+128),f
  3778  0748  2F39               	goto	l2802
  3779  0749                     l2804:
  3780  0749  0823               	movf	(___llmod@divisor+3)^(0+128),w
  3781  074A  0227               	subwf	(___llmod@dividend+3)^(0+128),w
  3782  074B  1D03               	skipz
  3783  074C  2F57               	goto	u2835
  3784  074D  0822               	movf	(___llmod@divisor+2)^(0+128),w
  3785  074E  0226               	subwf	(___llmod@dividend+2)^(0+128),w
  3786  074F  1D03               	skipz
  3787  0750  2F57               	goto	u2835
  3788  0751  0821               	movf	(___llmod@divisor+1)^(0+128),w
  3789  0752  0225               	subwf	(___llmod@dividend+1)^(0+128),w
  3790  0753  1D03               	skipz
  3791  0754  2F57               	goto	u2835
  3792  0755  0820               	movf	___llmod@divisor^(0+128),w
  3793  0756  0224               	subwf	___llmod@dividend^(0+128),w
  3794  0757                     u2835:
  3795  0757  1C03               	skipc
  3796  0758  2F67               	goto	l2808
  3797  0759  0820               	movf	___llmod@divisor^(0+128),w
  3798  075A  02A4               	subwf	___llmod@dividend^(0+128),f
  3799  075B  0821               	movf	(___llmod@divisor+1)^(0+128),w
  3800  075C  1C03               	skipc
  3801  075D  0F21               	incfsz	(___llmod@divisor+1)^(0+128),w
  3802  075E  02A5               	subwf	(___llmod@dividend+1)^(0+128),f
  3803  075F  0822               	movf	(___llmod@divisor+2)^(0+128),w
  3804  0760  1C03               	skipc
  3805  0761  0F22               	incfsz	(___llmod@divisor+2)^(0+128),w
  3806  0762  02A6               	subwf	(___llmod@dividend+2)^(0+128),f
  3807  0763  0823               	movf	(___llmod@divisor+3)^(0+128),w
  3808  0764  1C03               	skipc
  3809  0765  0F23               	incfsz	(___llmod@divisor+3)^(0+128),w
  3810  0766  02A7               	subwf	(___llmod@dividend+3)^(0+128),f
  3811  0767                     l2808:
  3812  0767  3001               	movlw	1
  3813  0768                     u2845:
  3814  0768  1003               	clrc
  3815  0769  0CA3               	rrf	(___llmod@divisor+3)^(0+128),f
  3816  076A  0CA2               	rrf	(___llmod@divisor+2)^(0+128),f
  3817  076B  0CA1               	rrf	(___llmod@divisor+1)^(0+128),f
  3818  076C  0CA0               	rrf	___llmod@divisor^(0+128),f
  3819  076D  3EFF               	addlw	-1
  3820  076E  1D03               	skipz
  3821  076F  2F68               	goto	u2845
  3822  0770  3001               	movlw	1
  3823  0771  02A9               	subwf	___llmod@counter^(0+128),f
  3824  0772  1D03               	btfss	3,2
  3825  0773  2F49               	goto	l2804
  3826  0774                     l2812:
  3827  0774  0827               	movf	(___llmod@dividend+3)^(0+128),w
  3828  0775  00A3               	movwf	(?___llmod+3)^(0+128)
  3829  0776  0826               	movf	(___llmod@dividend+2)^(0+128),w
  3830  0777  00A2               	movwf	(?___llmod+2)^(0+128)
  3831  0778  0825               	movf	(___llmod@dividend+1)^(0+128),w
  3832  0779  00A1               	movwf	(?___llmod+1)^(0+128)
  3833  077A  0824               	movf	___llmod@dividend^(0+128),w
  3834  077B  00A0               	movwf	?___llmod^(0+128)
  3835  077C  0008               	return
  3836  077D                     __end_of___llmod:
  3837                           
  3838                           	psect	text18
  3839  0629                     __ptext18:	
  3840 ;; *************** function ___lldiv *****************
  3841 ;; Defined at:
  3842 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  divisor         4    0[BANK1 ] unsigned long 
  3845 ;;  dividend        4    4[BANK1 ] unsigned long 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  quotient        4    9[BANK1 ] unsigned long 
  3848 ;;  counter         1   13[BANK1 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  4    0[BANK1 ] unsigned long 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, btemp+1
  3853 ;; Tracked objects:
  3854 ;;		On entry : 300/100
  3855 ;;		On exit  : 300/100
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3858 ;;      Params:         0       0       8       0       0
  3859 ;;      Locals:         0       0       5       0       0
  3860 ;;      Temps:          0       0       1       0       0
  3861 ;;      Totals:         0       0      14       0       0
  3862 ;;Total ram usage:       14 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    5
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_set_timer1
  3869 ;;		_set_timer2
  3870 ;;		_set_timer0
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function ___lldiv
  3876  0629                     ___lldiv:
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  3880  0629  3000               	movlw	0
  3881  062A  00AC               	movwf	(___lldiv@quotient+3)^(0+128)
  3882  062B  3000               	movlw	0
  3883  062C  00AB               	movwf	(___lldiv@quotient+2)^(0+128)
  3884  062D  3000               	movlw	0
  3885  062E  00AA               	movwf	(___lldiv@quotient+1)^(0+128)
  3886  062F  3000               	movlw	0
  3887  0630  00A9               	movwf	___lldiv@quotient^(0+128)
  3888  0631  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  3889  0632  0422               	iorwf	(___lldiv@divisor+2)^(0+128),w
  3890  0633  0421               	iorwf	(___lldiv@divisor+1)^(0+128),w
  3891  0634  0420               	iorwf	___lldiv@divisor^(0+128),w
  3892  0635  1903               	skipnz
  3893  0636  2E7E               	goto	l2790
  3894  0637  01AD               	clrf	___lldiv@counter^(0+128)
  3895  0638  0AAD               	incf	___lldiv@counter^(0+128),f
  3896  0639                     l2776:
  3897  0639  1BA3               	btfsc	(___lldiv@divisor+3)^(0+128),7
  3898  063A  2E49               	goto	l2778
  3899  063B  3001               	movlw	1
  3900  063C  00A8               	movwf	??___lldiv^(0+128)
  3901  063D                     u2745:
  3902  063D  1003               	clrc
  3903  063E  0DA0               	rlf	___lldiv@divisor^(0+128),f
  3904  063F  0DA1               	rlf	(___lldiv@divisor+1)^(0+128),f
  3905  0640  0DA2               	rlf	(___lldiv@divisor+2)^(0+128),f
  3906  0641  0DA3               	rlf	(___lldiv@divisor+3)^(0+128),f
  3907  0642  0BA8               	decfsz	??___lldiv^(0+128),f
  3908  0643  2E3D               	goto	u2745
  3909  0644  3001               	movlw	1
  3910  0645  00FF               	movwf	127
  3911  0646  087F               	movf	127,w
  3912  0647  07AD               	addwf	___lldiv@counter^(0+128),f
  3913  0648  2E39               	goto	l2776
  3914  0649                     l2778:
  3915  0649  3001               	movlw	1
  3916  064A  00A8               	movwf	??___lldiv^(0+128)
  3917  064B                     u2765:
  3918  064B  1003               	clrc
  3919  064C  0DA9               	rlf	___lldiv@quotient^(0+128),f
  3920  064D  0DAA               	rlf	(___lldiv@quotient+1)^(0+128),f
  3921  064E  0DAB               	rlf	(___lldiv@quotient+2)^(0+128),f
  3922  064F  0DAC               	rlf	(___lldiv@quotient+3)^(0+128),f
  3923  0650  0BA8               	decfsz	??___lldiv^(0+128),f
  3924  0651  2E4B               	goto	u2765
  3925  0652  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  3926  0653  0227               	subwf	(___lldiv@dividend+3)^(0+128),w
  3927  0654  1D03               	skipz
  3928  0655  2E60               	goto	u2775
  3929  0656  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  3930  0657  0226               	subwf	(___lldiv@dividend+2)^(0+128),w
  3931  0658  1D03               	skipz
  3932  0659  2E60               	goto	u2775
  3933  065A  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  3934  065B  0225               	subwf	(___lldiv@dividend+1)^(0+128),w
  3935  065C  1D03               	skipz
  3936  065D  2E60               	goto	u2775
  3937  065E  0820               	movf	___lldiv@divisor^(0+128),w
  3938  065F  0224               	subwf	___lldiv@dividend^(0+128),w
  3939  0660                     u2775:
  3940  0660  1C03               	skipc
  3941  0661  2E71               	goto	l2786
  3942  0662  0820               	movf	___lldiv@divisor^(0+128),w
  3943  0663  02A4               	subwf	___lldiv@dividend^(0+128),f
  3944  0664  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  3945  0665  1C03               	skipc
  3946  0666  0F21               	incfsz	(___lldiv@divisor+1)^(0+128),w
  3947  0667  02A5               	subwf	(___lldiv@dividend+1)^(0+128),f
  3948  0668  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  3949  0669  1C03               	skipc
  3950  066A  0F22               	incfsz	(___lldiv@divisor+2)^(0+128),w
  3951  066B  02A6               	subwf	(___lldiv@dividend+2)^(0+128),f
  3952  066C  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  3953  066D  1C03               	skipc
  3954  066E  0F23               	incfsz	(___lldiv@divisor+3)^(0+128),w
  3955  066F  02A7               	subwf	(___lldiv@dividend+3)^(0+128),f
  3956  0670  1429               	bsf	___lldiv@quotient^(0+128),0
  3957  0671                     l2786:
  3958  0671  3001               	movlw	1
  3959  0672                     u2785:
  3960  0672  1003               	clrc
  3961  0673  0CA3               	rrf	(___lldiv@divisor+3)^(0+128),f
  3962  0674  0CA2               	rrf	(___lldiv@divisor+2)^(0+128),f
  3963  0675  0CA1               	rrf	(___lldiv@divisor+1)^(0+128),f
  3964  0676  0CA0               	rrf	___lldiv@divisor^(0+128),f
  3965  0677  3EFF               	addlw	-1
  3966  0678  1D03               	skipz
  3967  0679  2E72               	goto	u2785
  3968  067A  3001               	movlw	1
  3969  067B  02AD               	subwf	___lldiv@counter^(0+128),f
  3970  067C  1D03               	btfss	3,2
  3971  067D  2E49               	goto	l2778
  3972  067E                     l2790:
  3973  067E  082C               	movf	(___lldiv@quotient+3)^(0+128),w
  3974  067F  00A3               	movwf	(?___lldiv+3)^(0+128)
  3975  0680  082B               	movf	(___lldiv@quotient+2)^(0+128),w
  3976  0681  00A2               	movwf	(?___lldiv+2)^(0+128)
  3977  0682  082A               	movf	(___lldiv@quotient+1)^(0+128),w
  3978  0683  00A1               	movwf	(?___lldiv+1)^(0+128)
  3979  0684  0829               	movf	___lldiv@quotient^(0+128),w
  3980  0685  00A0               	movwf	?___lldiv^(0+128)
  3981  0686  0008               	return
  3982  0687                     __end_of___lldiv:
  3983                           
  3984                           	psect	text19
  3985  0D97                     __ptext19:	
  3986 ;; *************** function _set_blink *****************
  3987 ;; Defined at:
  3988 ;;		line 42 in file "ssd.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;		None
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;		None
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      void 
  3995 ;; Registers used:
  3996 ;;		None
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 300/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4002 ;;      Params:         0       0       0       0       0
  4003 ;;      Locals:         0       0       0       0       0
  4004 ;;      Temps:          0       0       0       0       0
  4005 ;;      Totals:         0       0       0       0       0
  4006 ;;Total ram usage:        0 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    5
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_check_active_button
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _set_blink
  4018  0D97                     _set_blink:
  4019                           
  4020                           ;ssd.c: 43: blink=1;
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _set_blink: []
  4024  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0D99  01D6               	clrf	_blink
  4027  0D9A  0AD6               	incf	_blink,f
  4028  0D9B  0008               	return
  4029  0D9C                     __end_of_set_blink:
  4030                           
  4031                           	psect	text20
  4032  0E8E                     __ptext20:	
  4033 ;; *************** function _restart_timer *****************
  4034 ;; Defined at:
  4035 ;;		line 156 in file "timer.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  timer           1    wreg     unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  timer           1    0[BANK1 ] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0
  4044 ;; Tracked objects:
  4045 ;;		On entry : 200/0
  4046 ;;		On exit  : 200/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4049 ;;      Params:         0       0       0       0       0
  4050 ;;      Locals:         0       0       1       0       0
  4051 ;;      Temps:          0       0       0       0       0
  4052 ;;      Totals:         0       0       1       0       0
  4053 ;;Total ram usage:        1 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_check_active_button
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _restart_timer
  4065  0E8E                     _restart_timer:
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _restart_timer: [wreg+status,2+status,0]
  4069                           ;restart_timer@timer stored from wreg
  4070  0E8E  1683               	bsf	3,5	;RP0=1, select bank1
  4071  0E8F  00A0               	movwf	restart_timer@timer^(0+128)
  4072                           
  4073                           ;timer.c: 157: if (timer==1){
  4074  0E90  0320               	decf	restart_timer@timer^(0+128),w
  4075  0E91  1D03               	btfss	3,2
  4076  0E92  2E96               	goto	l3064
  4077                           
  4078                           ;timer.c: 158: T1=0;
  4079  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  4080  0E94  01D4               	clrf	_T1
  4081                           
  4082                           ;timer.c: 159: }
  4083  0E95  0008               	return
  4084  0E96                     l3064:
  4085                           
  4086                           ;timer.c: 160: else if (timer==2){
  4087  0E96  3002               	movlw	2
  4088  0E97  0620               	xorwf	restart_timer@timer^(0+128),w
  4089  0E98  1D03               	btfss	3,2
  4090  0E99  2E9D               	goto	l3068
  4091                           
  4092                           ;timer.c: 161: T2=0;
  4093  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0E9B  01D3               	clrf	_T2
  4095                           
  4096                           ;timer.c: 162: }
  4097  0E9C  0008               	return
  4098  0E9D                     l3068:
  4099                           
  4100                           ;timer.c: 163: else if (timer==0){
  4101  0E9D  0820               	movf	restart_timer@timer^(0+128),w
  4102  0E9E  1D03               	btfss	3,2
  4103  0E9F  0008               	return
  4104                           
  4105                           ;timer.c: 164: T0=0;
  4106  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0EA1  01D2               	clrf	_T0
  4108                           
  4109                           ;timer.c: 165: }
  4110  0EA2  0008               	return
  4111  0EA3                     __end_of_restart_timer:
  4112                           
  4113                           	psect	text21
  4114  07FA                     __ptext21:	
  4115 ;; *************** function _ADC_Init *****************
  4116 ;; Defined at:
  4117 ;;		line 9 in file "adc.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg
  4126 ;; Tracked objects:
  4127 ;;		On entry : B00/0
  4128 ;;		On exit  : B00/100
  4129 ;;		Unchanged: 800/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4131 ;;      Params:         0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    5
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_main
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _ADC_Init
  4147  07FA                     _ADC_Init:
  4148                           
  4149                           ;adc.c: 11: ADCON0 = 0x51;
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _ADC_Init: [wreg]
  4153  07FA  3051               	movlw	81
  4154  07FB  009F               	movwf	31	;volatile
  4155                           
  4156                           ;adc.c: 12: ADCON1 = 0x80;
  4157  07FC  3080               	movlw	128
  4158  07FD  1683               	bsf	3,5	;RP0=1, select bank1
  4159  07FE  009F               	movwf	31	;volatile
  4160  07FF  0008               	return
  4161  0800                     __end_of_ADC_Init:
  4162                           
  4163                           	psect	text22
  4164  077D                     __ptext22:	
  4165 ;; *************** function _isr *****************
  4166 ;; Defined at:
  4167 ;;		line 22 in file "main.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 300/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       0       0       0       0
  4182 ;;      Locals:         0       0       0       0       0
  4183 ;;      Temps:          0       4       0       0       0
  4184 ;;      Totals:         0       4       0       0       0
  4185 ;;Total ram usage:        4 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    4
  4188 ;; This function calls:
  4189 ;;		_alternate
  4190 ;;		_alternate_on_off
  4191 ;;		_save_temp
  4192 ;;		_set_temp_off
  4193 ;;		_temperature_read
  4194 ;;		_timer_ISR
  4195 ;;		i1_stop_timer
  4196 ;; This function is called by:
  4197 ;;		Interrupt level 1
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _isr
  4203  077D                     _isr:
  4204                           
  4205                           ;main.c: 24: switch (timer_ISR()){
  4206  077D  2FAD               	goto	i1l2704
  4207  077E                     i1l2690:
  4208                           
  4209                           ;main.c: 26: temperature=temperature_read(2);
  4210  077E  3002               	movlw	2
  4211  077F  120A  158A  27B5  120A  118A  	fcall	_temperature_read
  4212  0784  0837               	movf	?_temperature_read+1,w
  4213  0785  00CC               	movwf	_temperature+1
  4214  0786  0836               	movf	?_temperature_read,w
  4215  0787  00CB               	movwf	_temperature
  4216                           
  4217                           ;main.c: 27: save_temp(temperature);
  4218  0788  084C               	movf	_temperature+1,w
  4219  0789  00F1               	movwf	save_temp@temp+1
  4220  078A  084B               	movf	_temperature,w
  4221  078B  00F0               	movwf	save_temp@temp
  4222  078C  120A  158A  262E  120A  118A  	fcall	_save_temp
  4223                           
  4224                           ;main.c: 28: break;
  4225  0791  2FBC               	goto	i1l108
  4226  0792                     i1l2694:
  4227                           
  4228                           ;main.c: 30: set_temp_off();
  4229  0792  120A  158A  25B5  120A  118A  	fcall	_set_temp_off
  4230                           
  4231                           ;main.c: 31: stop_timer(1);
  4232  0797  3001               	movlw	1
  4233  0798  120A  158A  2653  120A  118A  	fcall	i1_stop_timer
  4234                           
  4235                           ;main.c: 32: break;
  4236  079D  2FBC               	goto	i1l108
  4237  079E                     i1l2698:
  4238                           
  4239                           ;main.c: 34: alternate();
  4240  079E  120A  158A  25C9  120A  118A  	fcall	_alternate
  4241                           
  4242                           ;main.c: 35: break;
  4243  07A3  2FBC               	goto	i1l108
  4244  07A4                     i1l106:	
  4245                           ;main.c: 36: default:
  4246                           
  4247                           
  4248                           ;main.c: 37: if(INTF){
  4249  07A4  1C8B               	btfss	11,1	;volatile
  4250  07A5  2FBC               	goto	i1l108
  4251                           
  4252                           ;main.c: 38: alternate_on_off();
  4253  07A6  120A  158A  25D4  120A  118A  	fcall	_alternate_on_off
  4254                           
  4255                           ;main.c: 39: INTF=0;
  4256  07AB  108B               	bcf	11,1	;volatile
  4257  07AC  2FBC               	goto	i1l108
  4258  07AD                     i1l2704:
  4259  07AD  120A  118A  26DF  120A  118A  	fcall	_timer_ISR
  4260                           
  4261                           ; Switch size 1, requested type "simple"
  4262                           ; Number of cases is 3, Range of values is 48 to 50
  4263                           ; switch strategies available:
  4264                           ; Name         Instructions Cycles
  4265                           ; simple_byte           10     6 (average)
  4266                           ; direct_byte           20    11 (fixed)
  4267                           ; jumptable            263     9 (fixed)
  4268                           ;	Chosen strategy is simple_byte
  4269  07B2  3A30               	xorlw	48	; case 48
  4270  07B3  1903               	skipnz
  4271  07B4  2F7E               	goto	i1l2690
  4272  07B5  3A01               	xorlw	1	; case 49
  4273  07B6  1903               	skipnz
  4274  07B7  2F92               	goto	i1l2694
  4275  07B8  3A03               	xorlw	3	; case 50
  4276  07B9  1903               	skipnz
  4277  07BA  2F9E               	goto	i1l2698
  4278  07BB  2FA4               	goto	i1l106
  4279  07BC                     i1l108:
  4280  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  4281  07BD  083D               	movf	??_isr+3,w
  4282  07BE  00FF               	movwf	127
  4283  07BF  083C               	movf	??_isr+2,w
  4284  07C0  008A               	movwf	10
  4285  07C1  083B               	movf	??_isr+1,w
  4286  07C2  0084               	movwf	4
  4287  07C3  0E3A               	swapf	??_isr^0,w
  4288  07C4  0083               	movwf	3
  4289  07C5  0EFE               	swapf	126,f
  4290  07C6  0E7E               	swapf	126,w
  4291  07C7  0009               	retfie
  4292  07C8                     __end_of_isr:
  4293                           
  4294                           	psect	intentry
  4295  0004                     __pintentry:	
  4296                           ;incstack = 0
  4297 ;; hardware stack exceeded
  4298                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4299                           
  4300  0004                     interrupt_function:
  4301  007E                     saved_w	set	btemp
  4302  0004  00FE               	movwf	btemp
  4303  0005  0E03               	swapf	3,w
  4304  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4305  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0008  00BA               	movwf	??_isr
  4307  0009  0804               	movf	4,w
  4308  000A  00BB               	movwf	??_isr+1
  4309  000B  080A               	movf	10,w
  4310  000C  00BC               	movwf	??_isr+2
  4311  000D  087F               	movf	btemp+1,w
  4312  000E  00BD               	movwf	??_isr+3
  4313  000F  120A  118A  2F7D   	ljmp	_isr
  4314                           
  4315                           	psect	text23
  4316  0E53                     __ptext23:	
  4317 ;; *************** function i1_stop_timer *****************
  4318 ;; Defined at:
  4319 ;;		line 139 in file "timer.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  timer           1    wreg     unsigned char 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  timer           1    0[COMMON] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 300/100
  4330 ;;		On exit  : 200/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4333 ;;      Params:         0       0       0       0       0
  4334 ;;      Locals:         1       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0
  4336 ;;      Totals:         1       0       0       0       0
  4337 ;;Total ram usage:        1 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; This function calls:
  4340 ;;		Nothing
  4341 ;; This function is called by:
  4342 ;;		_isr
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           
  4347                           ;psect for function i1_stop_timer
  4348  0E53                     i1_stop_timer:
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in i1_stop_timer: [wreg+status,2+status,0]
  4352                           ;i1stop_timer@timer stored from wreg
  4353  0E53  00F0               	movwf	i1stop_timer@timer
  4354                           
  4355                           ;timer.c: 140: if (timer==1){
  4356  0E54  0370               	decf	i1stop_timer@timer,w
  4357  0E55  1D03               	btfss	3,2
  4358  0E56  2E5A               	goto	i1l2680
  4359                           
  4360                           ;timer.c: 141: TMR1ON=0;
  4361  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  4362  0E58  1010               	bcf	16,0	;volatile
  4363                           
  4364                           ;timer.c: 142: }
  4365  0E59  0008               	return
  4366  0E5A                     i1l2680:
  4367                           
  4368                           ;timer.c: 143: else if (timer==2){
  4369  0E5A  3002               	movlw	2
  4370  0E5B  0670               	xorwf	i1stop_timer@timer,w
  4371  0E5C  1D03               	btfss	3,2
  4372  0E5D  2E61               	goto	i1l2684
  4373                           
  4374                           ;timer.c: 144: TMR2ON=0;
  4375  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  4376  0E5F  1112               	bcf	18,2	;volatile
  4377                           
  4378                           ;timer.c: 145: }
  4379  0E60  0008               	return
  4380  0E61                     i1l2684:
  4381                           
  4382                           ;timer.c: 146: else if (timer==0){
  4383  0E61  0870               	movf	i1stop_timer@timer,w
  4384  0E62  1D03               	btfss	3,2
  4385  0E63  0008               	return
  4386                           
  4387                           ;timer.c: 147: PSA=1;
  4388  0E64  1581               	bsf	1,3	;volatile
  4389                           
  4390                           ;timer.c: 148: }
  4391  0E65  0008               	return
  4392  0E66                     __end_ofi1_stop_timer:
  4393                           
  4394                           	psect	text24
  4395  06DF                     __ptext24:	
  4396 ;; *************** function _timer_ISR *****************
  4397 ;; Defined at:
  4398 ;;		line 200 in file "timer.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 300/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4412 ;;      Params:         0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_isr
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _timer_ISR
  4427  06DF                     _timer_ISR:
  4428                           
  4429                           ;timer.c: 202: if (TMR1IF){
  4430                           
  4431                           ;incstack = 0
  4432                           ; Regs used in _timer_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  4433  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  4434  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  4435  06E1  1C0C               	btfss	12,0	;volatile
  4436  06E2  2EFD               	goto	i1l423
  4437                           
  4438                           ;timer.c: 203: T1++;
  4439  06E3  3001               	movlw	1
  4440  06E4  00FF               	movwf	127
  4441  06E5  087F               	movf	127,w
  4442  06E6  07D4               	addwf	_T1,f
  4443                           
  4444                           ;timer.c: 204: TMR1=*TMR1_REG;
  4445  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  4446  06E8  084B               	movf	_TMR1_REG^(0+128),w
  4447  06E9  0084               	movwf	4
  4448  06EA  1383               	bcf	3,7	;select IRP bank0
  4449  06EB  0800               	movf	0,w
  4450  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  4451  06ED  008E               	movwf	14	;volatile
  4452  06EE  0A84               	incf	4,f
  4453  06EF  0800               	movf	0,w
  4454  06F0  008F               	movwf	15	;volatile
  4455                           
  4456                           ;timer.c: 205: TMR1IF=0;
  4457  06F1  100C               	bcf	12,0	;volatile
  4458                           
  4459                           ;timer.c: 206: if (T1==(char)(*counter1)){
  4460  06F2  1683               	bsf	3,5	;RP0=1, select bank1
  4461  06F3  084C               	movf	_counter1^(0+128),w
  4462  06F4  0084               	movwf	4
  4463  06F5  0800               	movf	0,w
  4464  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  4465  06F7  0654               	xorwf	_T1,w
  4466  06F8  1D03               	skipz
  4467  06F9  2F2F               	goto	i1l2610
  4468                           
  4469                           ;timer.c: 207: T1=0;
  4470  06FA  01D4               	clrf	_T1
  4471                           
  4472                           ;timer.c: 208: return '1';
  4473  06FB  3031               	movlw	49
  4474  06FC  0008               	return
  4475  06FD                     i1l423:
  4476                           
  4477                           ;timer.c: 211: else if (TMR2IF){
  4478  06FD  1C8C               	btfss	12,1	;volatile
  4479  06FE  2F16               	goto	i1l427
  4480                           
  4481                           ;timer.c: 212: T2++;
  4482  06FF  3001               	movlw	1
  4483  0700  00FF               	movwf	127
  4484  0701  087F               	movf	127,w
  4485  0702  07D3               	addwf	_T2,f
  4486                           
  4487                           ;timer.c: 213: TMR2=*TMR2_REG;
  4488  0703  1683               	bsf	3,5	;RP0=1, select bank1
  4489  0704  0849               	movf	_TMR2_REG^(0+128),w
  4490  0705  0084               	movwf	4
  4491  0706  1383               	bcf	3,7	;select IRP bank0
  4492  0707  0800               	movf	0,w
  4493  0708  1283               	bcf	3,5	;RP0=0, select bank0
  4494  0709  0091               	movwf	17	;volatile
  4495                           
  4496                           ;timer.c: 214: TMR2IF=0;
  4497  070A  108C               	bcf	12,1	;volatile
  4498                           
  4499                           ;timer.c: 215: if (T2==*counter2){
  4500  070B  1683               	bsf	3,5	;RP0=1, select bank1
  4501  070C  084A               	movf	_counter2^(0+128),w
  4502  070D  0084               	movwf	4
  4503  070E  0800               	movf	0,w
  4504  070F  1283               	bcf	3,5	;RP0=0, select bank0
  4505  0710  0653               	xorwf	_T2,w
  4506  0711  1D03               	skipz
  4507  0712  2F2F               	goto	i1l2610
  4508                           
  4509                           ;timer.c: 216: T2=0;
  4510  0713  01D3               	clrf	_T2
  4511                           
  4512                           ;timer.c: 217: return '2';
  4513  0714  3032               	movlw	50
  4514  0715  0008               	return
  4515  0716                     i1l427:
  4516                           
  4517                           ;timer.c: 220: else if (TMR0IF){
  4518  0716  1D0B               	btfss	11,2	;volatile
  4519  0717  2F2F               	goto	i1l2610
  4520                           
  4521                           ;timer.c: 221: T0++;
  4522  0718  3001               	movlw	1
  4523  0719  00FF               	movwf	127
  4524  071A  087F               	movf	127,w
  4525  071B  07D2               	addwf	_T0,f
  4526                           
  4527                           ;timer.c: 222: TMR0=*TMR0_REG;
  4528  071C  1683               	bsf	3,5	;RP0=1, select bank1
  4529  071D  0847               	movf	_TMR0_REG^(0+128),w
  4530  071E  0084               	movwf	4
  4531  071F  1383               	bcf	3,7	;select IRP bank0
  4532  0720  0800               	movf	0,w
  4533  0721  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0722  0081               	movwf	1	;volatile
  4535                           
  4536                           ;timer.c: 223: TMR0IF=0;
  4537  0723  110B               	bcf	11,2	;volatile
  4538                           
  4539                           ;timer.c: 224: if (T0==(char)(*counter0)){
  4540  0724  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0725  0848               	movf	_counter0^(0+128),w
  4542  0726  0084               	movwf	4
  4543  0727  0800               	movf	0,w
  4544  0728  1283               	bcf	3,5	;RP0=0, select bank0
  4545  0729  0652               	xorwf	_T0,w
  4546  072A  1D03               	skipz
  4547  072B  2F2F               	goto	i1l2610
  4548                           
  4549                           ;timer.c: 225: T0=0;
  4550  072C  01D2               	clrf	_T0
  4551                           
  4552                           ;timer.c: 227: return '0';
  4553  072D  3030               	movlw	48
  4554  072E  0008               	return
  4555  072F                     i1l2610:
  4556                           
  4557                           ;timer.c: 228: };timer.c: 229: };timer.c: 231: return 'b';
  4558  072F  3062               	movlw	98
  4559  0730  0008               	return
  4560  0731                     __end_of_timer_ISR:
  4561                           
  4562                           	psect	text25
  4563  0FB5                     __ptext25:	
  4564 ;; *************** function _temperature_read *****************
  4565 ;; Defined at:
  4566 ;;		line 28 in file "adc.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  pin             1    wreg     unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  pin             1   25[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  2   22[BANK0 ] unsigned short 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 300/0
  4577 ;;		On exit  : 300/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4580 ;;      Params:         0       3       0       0       0
  4581 ;;      Locals:         0       1       0       0       0
  4582 ;;      Temps:          0       0       0       0       0
  4583 ;;      Totals:         0       4       0       0       0
  4584 ;;Total ram usage:        4 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    2
  4587 ;; This function calls:
  4588 ;;		_ADC_Read
  4589 ;;		___ftdiv
  4590 ;;		___ftmul
  4591 ;;		___fttol
  4592 ;;		___lwtoft
  4593 ;; This function is called by:
  4594 ;;		_isr
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _temperature_read
  4600  0FB5                     _temperature_read:
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _temperature_read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4604                           ;temperature_read@pin stored from wreg
  4605  0FB5  00B9               	movwf	temperature_read@pin
  4606                           
  4607                           ;adc.c: 29: AN0RES = ADC_Read(pin);
  4608  0FB6  0839               	movf	temperature_read@pin,w
  4609  0FB7  120A  158A  26DF  120A  158A  	fcall	_ADC_Read
  4610  0FBC  0871               	movf	?_ADC_Read+1,w
  4611  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  4612  0FBE  00CE               	movwf	_AN0RES+1
  4613  0FBF  0870               	movf	?_ADC_Read,w
  4614  0FC0  00CD               	movwf	_AN0RES
  4615                           
  4616                           ;adc.c: 31: Voltage = AN0RES * 0.0048828;
  4617  0FC1  3000               	movlw	0
  4618  0FC2  00A0               	movwf	___ftmul@f1
  4619  0FC3  30A0               	movlw	160
  4620  0FC4  00A1               	movwf	___ftmul@f1+1
  4621  0FC5  303B               	movlw	59
  4622  0FC6  00A2               	movwf	___ftmul@f1+2
  4623  0FC7  084E               	movf	_AN0RES+1,w
  4624  0FC8  00F9               	movwf	___lwtoft@c+1
  4625  0FC9  084D               	movf	_AN0RES,w
  4626  0FCA  00F8               	movwf	___lwtoft@c
  4627  0FCB  120A  158A  2666  120A  158A  	fcall	___lwtoft
  4628  0FD0  0878               	movf	?___lwtoft,w
  4629  0FD1  00A3               	movwf	___ftmul@f2
  4630  0FD2  0879               	movf	?___lwtoft+1,w
  4631  0FD3  00A4               	movwf	___ftmul@f2+1
  4632  0FD4  087A               	movf	?___lwtoft+2,w
  4633  0FD5  00A5               	movwf	___ftmul@f2+2
  4634  0FD6  120A  118A  2041  120A  158A  	fcall	___ftmul
  4635  0FDB  0820               	movf	?___ftmul,w
  4636  0FDC  00C8               	movwf	_Voltage
  4637  0FDD  0821               	movf	?___ftmul+1,w
  4638  0FDE  00C9               	movwf	_Voltage+1
  4639  0FDF  0822               	movf	?___ftmul+2,w
  4640  0FE0  00CA               	movwf	_Voltage+2
  4641                           
  4642                           ;adc.c: 32: return (float)Voltage / 0.01;
  4643  0FE1  0848               	movf	_Voltage,w
  4644  0FE2  00FB               	movwf	___ftdiv@f1
  4645  0FE3  0849               	movf	_Voltage+1,w
  4646  0FE4  00FC               	movwf	___ftdiv@f1+1
  4647  0FE5  084A               	movf	_Voltage+2,w
  4648  0FE6  00FD               	movwf	___ftdiv@f1+2
  4649  0FE7  30D7               	movlw	215
  4650  0FE8  00F8               	movwf	___ftdiv@f2
  4651  0FE9  3023               	movlw	35
  4652  0FEA  00F9               	movwf	___ftdiv@f2+1
  4653  0FEB  303C               	movlw	60
  4654  0FEC  00FA               	movwf	___ftdiv@f2+2
  4655  0FED  120A  118A  22CE  120A  158A  	fcall	___ftdiv
  4656  0FF2  0878               	movf	?___ftdiv,w
  4657  0FF3  00A9               	movwf	___fttol@f1
  4658  0FF4  0879               	movf	?___ftdiv+1,w
  4659  0FF5  00AA               	movwf	___fttol@f1+1
  4660  0FF6  087A               	movf	?___ftdiv+2,w
  4661  0FF7  00AB               	movwf	___fttol@f1+2
  4662  0FF8  120A  118A  23F9   	fcall	___fttol
  4663  0FFB  082A               	movf	?___fttol+1,w
  4664  0FFC  00B7               	movwf	?_temperature_read+1
  4665  0FFD  0829               	movf	?___fttol,w
  4666  0FFE  00B6               	movwf	?_temperature_read
  4667  0FFF  0008               	return
  4668  1000                     __end_of_temperature_read:
  4669                           
  4670                           	psect	text26
  4671  0E66                     __ptext26:	
  4672 ;; *************** function ___lwtoft *****************
  4673 ;; Defined at:
  4674 ;;		line 28 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwtoft.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  c               2    8[COMMON] unsigned int 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  3    8[COMMON] float 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 300/0
  4685 ;;		On exit  : 300/0
  4686 ;;		Unchanged: 300/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4688 ;;      Params:         3       0       0       0       0
  4689 ;;      Locals:         0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0
  4691 ;;      Totals:         3       0       0       0       0
  4692 ;;Total ram usage:        3 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    1
  4695 ;; This function calls:
  4696 ;;		___ftpack
  4697 ;; This function is called by:
  4698 ;;		_temperature_read
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           
  4703                           ;psect for function ___lwtoft
  4704  0E66                     ___lwtoft:
  4705                           
  4706                           ;incstack = 0
  4707                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4708  0E66  0878               	movf	___lwtoft@c,w
  4709  0E67  00F0               	movwf	___ftpack@arg
  4710  0E68  0879               	movf	___lwtoft@c+1,w
  4711  0E69  00F1               	movwf	___ftpack@arg+1
  4712  0E6A  01F2               	clrf	___ftpack@arg+2
  4713  0E6B  308E               	movlw	142
  4714  0E6C  00FF               	movwf	127
  4715  0E6D  087F               	movf	127,w
  4716  0E6E  00F3               	movwf	___ftpack@exp
  4717  0E6F  01F4               	clrf	___ftpack@sign
  4718  0E70  120A  118A  255C   	fcall	___ftpack
  4719  0E73  0870               	movf	?___ftpack,w
  4720  0E74  00F8               	movwf	?___lwtoft
  4721  0E75  0871               	movf	?___ftpack+1,w
  4722  0E76  00F9               	movwf	?___lwtoft+1
  4723  0E77  0872               	movf	?___ftpack+2,w
  4724  0E78  00FA               	movwf	?___lwtoft+2
  4725  0E79  0008               	return
  4726  0E7A                     __end_of___lwtoft:
  4727                           
  4728                           	psect	text27
  4729  03F9                     __ptext27:	
  4730 ;; *************** function ___fttol *****************
  4731 ;; Defined at:
  4732 ;;		line 44 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fttol.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;  f1              3    9[BANK0 ] float 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  lval            4   17[BANK0 ] unsigned long 
  4737 ;;  exp1            1   21[BANK0 ] unsigned char 
  4738 ;;  sign1           1   16[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  4    9[BANK0 ] long 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0, btemp+1
  4743 ;; Tracked objects:
  4744 ;;		On entry : 300/0
  4745 ;;		On exit  : 300/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4748 ;;      Params:         0       4       0       0       0
  4749 ;;      Locals:         0       6       0       0       0
  4750 ;;      Temps:          0       3       0       0       0
  4751 ;;      Totals:         0      13       0       0       0
  4752 ;;Total ram usage:       13 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_temperature_read
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function ___fttol
  4763  03F9                     ___fttol:
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  4767  03F9  0829               	movf	___fttol@f1,w
  4768  03FA  00AD               	movwf	??___fttol
  4769  03FB  082A               	movf	___fttol@f1+1,w
  4770  03FC  00AE               	movwf	??___fttol+1
  4771  03FD  082B               	movf	___fttol@f1+2,w
  4772  03FE  00AF               	movwf	??___fttol+2
  4773  03FF  1003               	clrc
  4774  0400  0D2E               	rlf	??___fttol+1,w
  4775  0401  0D2F               	rlf	??___fttol+2,w
  4776  0402  00FF               	movwf	127
  4777  0403  087F               	movf	127,w
  4778  0404  00B5               	movwf	___fttol@exp1
  4779  0405  0835               	movf	___fttol@exp1,w
  4780  0406  1D03               	btfss	3,2
  4781  0407  2C11               	goto	i1l2492
  4782  0408                     i1l2488:
  4783  0408  3000               	movlw	0
  4784  0409  00AC               	movwf	?___fttol+3
  4785  040A  3000               	movlw	0
  4786  040B  00AB               	movwf	?___fttol+2
  4787  040C  3000               	movlw	0
  4788  040D  00AA               	movwf	?___fttol+1
  4789  040E  3000               	movlw	0
  4790  040F  00A9               	movwf	?___fttol
  4791  0410  0008               	return
  4792  0411                     i1l2492:
  4793  0411  0829               	movf	___fttol@f1,w
  4794  0412  00AD               	movwf	??___fttol
  4795  0413  082A               	movf	___fttol@f1+1,w
  4796  0414  00AE               	movwf	??___fttol+1
  4797  0415  082B               	movf	___fttol@f1+2,w
  4798  0416  00AF               	movwf	??___fttol+2
  4799  0417  3017               	movlw	23
  4800  0418                     u232_25:
  4801  0418  1003               	clrc
  4802  0419  0CAF               	rrf	??___fttol+2,f
  4803  041A  0CAE               	rrf	??___fttol+1,f
  4804  041B  0CAD               	rrf	??___fttol,f
  4805  041C  3EFF               	addlw	-1
  4806  041D  1D03               	skipz
  4807  041E  2C18               	goto	u232_25
  4808  041F  082D               	movf	??___fttol,w
  4809  0420  00FF               	movwf	127
  4810  0421  087F               	movf	127,w
  4811  0422  00B0               	movwf	___fttol@sign1
  4812  0423  17AA               	bsf	___fttol@f1+1,7
  4813  0424  30FF               	movlw	255
  4814  0425  05A9               	andwf	___fttol@f1,f
  4815  0426  30FF               	movlw	255
  4816  0427  05AA               	andwf	___fttol@f1+1,f
  4817  0428  3000               	movlw	0
  4818  0429  05AB               	andwf	___fttol@f1+2,f
  4819  042A  0829               	movf	___fttol@f1,w
  4820  042B  00B1               	movwf	___fttol@lval
  4821  042C  082A               	movf	___fttol@f1+1,w
  4822  042D  00B2               	movwf	___fttol@lval+1
  4823  042E  082B               	movf	___fttol@f1+2,w
  4824  042F  00B3               	movwf	___fttol@lval+2
  4825  0430  01B4               	clrf	___fttol@lval+3
  4826  0431  308E               	movlw	142
  4827  0432  02B5               	subwf	___fttol@exp1,f
  4828  0433  1FB5               	btfss	___fttol@exp1,7
  4829  0434  2C4A               	goto	i1l2514
  4830  0435  0835               	movf	___fttol@exp1,w
  4831  0436  3A80               	xorlw	128
  4832  0437  3E8F               	addlw	143
  4833  0438  1C03               	btfss	3,0
  4834  0439  2C08               	goto	i1l2488
  4835  043A                     i1l2510:
  4836  043A  3001               	movlw	1
  4837  043B                     u235_25:
  4838  043B  1003               	clrc
  4839  043C  0CB4               	rrf	___fttol@lval+3,f
  4840  043D  0CB3               	rrf	___fttol@lval+2,f
  4841  043E  0CB2               	rrf	___fttol@lval+1,f
  4842  043F  0CB1               	rrf	___fttol@lval,f
  4843  0440  3EFF               	addlw	-1
  4844  0441  1D03               	skipz
  4845  0442  2C3B               	goto	u235_25
  4846  0443  3001               	movlw	1
  4847  0444  00FF               	movwf	127
  4848  0445  087F               	movf	127,w
  4849  0446  07B5               	addwf	___fttol@exp1,f
  4850  0447  1903               	btfsc	3,2
  4851  0448  2C5D               	goto	i1l2522
  4852  0449  2C3A               	goto	i1l2510
  4853  044A                     i1l2514:
  4854  044A  3018               	movlw	24
  4855  044B  0235               	subwf	___fttol@exp1,w
  4856  044C  1803               	btfsc	3,0
  4857  044D  2C08               	goto	i1l2488
  4858  044E                     i1l958:
  4859  044E  0835               	movf	___fttol@exp1,w
  4860  044F  1903               	btfsc	3,2
  4861  0450  2C5D               	goto	i1l2522
  4862  0451  3001               	movlw	1
  4863  0452  00AD               	movwf	??___fttol
  4864  0453                     u238_25:
  4865  0453  1003               	clrc
  4866  0454  0DB1               	rlf	___fttol@lval,f
  4867  0455  0DB2               	rlf	___fttol@lval+1,f
  4868  0456  0DB3               	rlf	___fttol@lval+2,f
  4869  0457  0DB4               	rlf	___fttol@lval+3,f
  4870  0458  0BAD               	decfsz	??___fttol,f
  4871  0459  2C53               	goto	u238_25
  4872  045A  3001               	movlw	1
  4873  045B  02B5               	subwf	___fttol@exp1,f
  4874  045C  2C4E               	goto	i1l958
  4875  045D                     i1l2522:
  4876  045D  0830               	movf	___fttol@sign1,w
  4877  045E  1903               	btfsc	3,2
  4878  045F  2C6B               	goto	i1l2526
  4879  0460  09B1               	comf	___fttol@lval,f
  4880  0461  09B2               	comf	___fttol@lval+1,f
  4881  0462  09B3               	comf	___fttol@lval+2,f
  4882  0463  09B4               	comf	___fttol@lval+3,f
  4883  0464  0AB1               	incf	___fttol@lval,f
  4884  0465  1903               	skipnz
  4885  0466  0AB2               	incf	___fttol@lval+1,f
  4886  0467  1903               	skipnz
  4887  0468  0AB3               	incf	___fttol@lval+2,f
  4888  0469  1903               	skipnz
  4889  046A  0AB4               	incf	___fttol@lval+3,f
  4890  046B                     i1l2526:
  4891  046B  0834               	movf	___fttol@lval+3,w
  4892  046C  00AC               	movwf	?___fttol+3
  4893  046D  0833               	movf	___fttol@lval+2,w
  4894  046E  00AB               	movwf	?___fttol+2
  4895  046F  0832               	movf	___fttol@lval+1,w
  4896  0470  00AA               	movwf	?___fttol+1
  4897  0471  0831               	movf	___fttol@lval,w
  4898  0472  00A9               	movwf	?___fttol
  4899  0473  0008               	return
  4900  0474                     __end_of___fttol:
  4901                           
  4902                           	psect	text28
  4903  0041                     __ptext28:	
  4904 ;; *************** function ___ftmul *****************
  4905 ;; Defined at:
  4906 ;;		line 62 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftmul.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  f1              3    0[BANK0 ] float 
  4909 ;;  f2              3    3[BANK0 ] float 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  4912 ;;  sign            1   11[BANK0 ] unsigned char 
  4913 ;;  cntr            1   10[BANK0 ] unsigned char 
  4914 ;;  exp             1    6[BANK0 ] unsigned char 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  3    0[BANK0 ] float 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 300/0
  4921 ;;		On exit  : 300/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4924 ;;      Params:         0       6       0       0       0
  4925 ;;      Locals:         0       6       0       0       0
  4926 ;;      Temps:          3       0       0       0       0
  4927 ;;      Totals:         3      12       0       0       0
  4928 ;;Total ram usage:       15 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    1
  4931 ;; This function calls:
  4932 ;;		___ftpack
  4933 ;; This function is called by:
  4934 ;;		_temperature_read
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           
  4939                           ;psect for function ___ftmul
  4940  0041                     ___ftmul:
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4944  0041  0820               	movf	___ftmul@f1,w
  4945  0042  00FB               	movwf	??___ftmul
  4946  0043  0821               	movf	___ftmul@f1+1,w
  4947  0044  00FC               	movwf	??___ftmul+1
  4948  0045  0822               	movf	___ftmul@f1+2,w
  4949  0046  00FD               	movwf	??___ftmul+2
  4950  0047  1003               	clrc
  4951  0048  0D7C               	rlf	??___ftmul+1,w
  4952  0049  0D7D               	rlf	??___ftmul+2,w
  4953  004A  00FF               	movwf	127
  4954  004B  087F               	movf	127,w
  4955  004C  00A6               	movwf	___ftmul@exp
  4956  004D  0826               	movf	___ftmul@exp,w
  4957  004E  1D03               	btfss	3,2
  4958  004F  2857               	goto	i1l2436
  4959  0050  3000               	movlw	0
  4960  0051  00A0               	movwf	?___ftmul
  4961  0052  3000               	movlw	0
  4962  0053  00A1               	movwf	?___ftmul+1
  4963  0054  3000               	movlw	0
  4964  0055  00A2               	movwf	?___ftmul+2
  4965  0056  0008               	return
  4966  0057                     i1l2436:
  4967  0057  0823               	movf	___ftmul@f2,w
  4968  0058  00FB               	movwf	??___ftmul
  4969  0059  0824               	movf	___ftmul@f2+1,w
  4970  005A  00FC               	movwf	??___ftmul+1
  4971  005B  0825               	movf	___ftmul@f2+2,w
  4972  005C  00FD               	movwf	??___ftmul+2
  4973  005D  1003               	clrc
  4974  005E  0D7C               	rlf	??___ftmul+1,w
  4975  005F  0D7D               	rlf	??___ftmul+2,w
  4976  0060  00FF               	movwf	127
  4977  0061  087F               	movf	127,w
  4978  0062  00AB               	movwf	___ftmul@sign
  4979  0063  082B               	movf	___ftmul@sign,w
  4980  0064  1D03               	btfss	3,2
  4981  0065  286D               	goto	i1l2442
  4982  0066  3000               	movlw	0
  4983  0067  00A0               	movwf	?___ftmul
  4984  0068  3000               	movlw	0
  4985  0069  00A1               	movwf	?___ftmul+1
  4986  006A  3000               	movlw	0
  4987  006B  00A2               	movwf	?___ftmul+2
  4988  006C  0008               	return
  4989  006D                     i1l2442:
  4990  006D  082B               	movf	___ftmul@sign,w
  4991  006E  3E7B               	addlw	123
  4992  006F  00FF               	movwf	127
  4993  0070  087F               	movf	127,w
  4994  0071  07A6               	addwf	___ftmul@exp,f
  4995  0072  0822               	movf	___ftmul@f1+2,w
  4996  0073  00FF               	movwf	127
  4997  0074  087F               	movf	127,w
  4998  0075  00AB               	movwf	___ftmul@sign
  4999  0076  0825               	movf	___ftmul@f2+2,w
  5000  0077  00FF               	movwf	127
  5001  0078  087F               	movf	127,w
  5002  0079  06AB               	xorwf	___ftmul@sign,f
  5003  007A  3080               	movlw	128
  5004  007B  00FF               	movwf	127
  5005  007C  087F               	movf	127,w
  5006  007D  05AB               	andwf	___ftmul@sign,f
  5007  007E  17A1               	bsf	___ftmul@f1+1,7
  5008  007F  17A4               	bsf	___ftmul@f2+1,7
  5009  0080  30FF               	movlw	255
  5010  0081  05A3               	andwf	___ftmul@f2,f
  5011  0082  30FF               	movlw	255
  5012  0083  05A4               	andwf	___ftmul@f2+1,f
  5013  0084  3000               	movlw	0
  5014  0085  05A5               	andwf	___ftmul@f2+2,f
  5015  0086  3000               	movlw	0
  5016  0087  00A7               	movwf	___ftmul@f3_as_product
  5017  0088  3000               	movlw	0
  5018  0089  00A8               	movwf	___ftmul@f3_as_product+1
  5019  008A  3000               	movlw	0
  5020  008B  00A9               	movwf	___ftmul@f3_as_product+2
  5021  008C  3007               	movlw	7
  5022  008D  00FF               	movwf	127
  5023  008E  087F               	movf	127,w
  5024  008F  00AA               	movwf	___ftmul@cntr
  5025  0090                     i1l2460:
  5026  0090  1C20               	btfss	___ftmul@f1,0
  5027  0091  28A0               	goto	i1l2464
  5028  0092  0823               	movf	___ftmul@f2,w
  5029  0093  07A7               	addwf	___ftmul@f3_as_product,f
  5030  0094  0824               	movf	___ftmul@f2+1,w
  5031  0095  1103               	clrz
  5032  0096  1803               	skipnc
  5033  0097  0A24               	incf	___ftmul@f2+1,w
  5034  0098  1D03               	btfss	3,2
  5035  0099  07A8               	addwf	___ftmul@f3_as_product+1,f
  5036  009A  0825               	movf	___ftmul@f2+2,w
  5037  009B  1103               	clrz
  5038  009C  1803               	skipnc
  5039  009D  0A25               	incf	___ftmul@f2+2,w
  5040  009E  1D03               	btfss	3,2
  5041  009F  07A9               	addwf	___ftmul@f3_as_product+2,f
  5042  00A0                     i1l2464:
  5043  00A0  3001               	movlw	1
  5044  00A1                     u223_25:
  5045  00A1  1003               	clrc
  5046  00A2  0CA2               	rrf	___ftmul@f1+2,f
  5047  00A3  0CA1               	rrf	___ftmul@f1+1,f
  5048  00A4  0CA0               	rrf	___ftmul@f1,f
  5049  00A5  3EFF               	addlw	-1
  5050  00A6  1D03               	skipz
  5051  00A7  28A1               	goto	u223_25
  5052  00A8  3001               	movlw	1
  5053  00A9                     u224_25:
  5054  00A9  1003               	clrc
  5055  00AA  0DA3               	rlf	___ftmul@f2,f
  5056  00AB  0DA4               	rlf	___ftmul@f2+1,f
  5057  00AC  0DA5               	rlf	___ftmul@f2+2,f
  5058  00AD  3EFF               	addlw	-1
  5059  00AE  1D03               	skipz
  5060  00AF  28A9               	goto	u224_25
  5061  00B0  3001               	movlw	1
  5062  00B1  02AA               	subwf	___ftmul@cntr,f
  5063  00B2  1D03               	btfss	3,2
  5064  00B3  2890               	goto	i1l2460
  5065  00B4  3009               	movlw	9
  5066  00B5  00FF               	movwf	127
  5067  00B6  087F               	movf	127,w
  5068  00B7  00AA               	movwf	___ftmul@cntr
  5069  00B8                     i1l2472:
  5070  00B8  1C20               	btfss	___ftmul@f1,0
  5071  00B9  28C8               	goto	i1l2476
  5072  00BA  0823               	movf	___ftmul@f2,w
  5073  00BB  07A7               	addwf	___ftmul@f3_as_product,f
  5074  00BC  0824               	movf	___ftmul@f2+1,w
  5075  00BD  1103               	clrz
  5076  00BE  1803               	skipnc
  5077  00BF  0A24               	incf	___ftmul@f2+1,w
  5078  00C0  1D03               	btfss	3,2
  5079  00C1  07A8               	addwf	___ftmul@f3_as_product+1,f
  5080  00C2  0825               	movf	___ftmul@f2+2,w
  5081  00C3  1103               	clrz
  5082  00C4  1803               	skipnc
  5083  00C5  0A25               	incf	___ftmul@f2+2,w
  5084  00C6  1D03               	btfss	3,2
  5085  00C7  07A9               	addwf	___ftmul@f3_as_product+2,f
  5086  00C8                     i1l2476:
  5087  00C8  3001               	movlw	1
  5088  00C9                     u228_25:
  5089  00C9  1003               	clrc
  5090  00CA  0CA2               	rrf	___ftmul@f1+2,f
  5091  00CB  0CA1               	rrf	___ftmul@f1+1,f
  5092  00CC  0CA0               	rrf	___ftmul@f1,f
  5093  00CD  3EFF               	addlw	-1
  5094  00CE  1D03               	skipz
  5095  00CF  28C9               	goto	u228_25
  5096  00D0  3001               	movlw	1
  5097  00D1                     u229_25:
  5098  00D1  1003               	clrc
  5099  00D2  0CA9               	rrf	___ftmul@f3_as_product+2,f
  5100  00D3  0CA8               	rrf	___ftmul@f3_as_product+1,f
  5101  00D4  0CA7               	rrf	___ftmul@f3_as_product,f
  5102  00D5  3EFF               	addlw	-1
  5103  00D6  1D03               	skipz
  5104  00D7  28D1               	goto	u229_25
  5105  00D8  3001               	movlw	1
  5106  00D9  02AA               	subwf	___ftmul@cntr,f
  5107  00DA  1D03               	btfss	3,2
  5108  00DB  28B8               	goto	i1l2472
  5109  00DC  0827               	movf	___ftmul@f3_as_product,w
  5110  00DD  00F0               	movwf	___ftpack@arg
  5111  00DE  0828               	movf	___ftmul@f3_as_product+1,w
  5112  00DF  00F1               	movwf	___ftpack@arg+1
  5113  00E0  0829               	movf	___ftmul@f3_as_product+2,w
  5114  00E1  00F2               	movwf	___ftpack@arg+2
  5115  00E2  0826               	movf	___ftmul@exp,w
  5116  00E3  00FF               	movwf	127
  5117  00E4  087F               	movf	127,w
  5118  00E5  00F3               	movwf	___ftpack@exp
  5119  00E6  082B               	movf	___ftmul@sign,w
  5120  00E7  00FF               	movwf	127
  5121  00E8  087F               	movf	127,w
  5122  00E9  00F4               	movwf	___ftpack@sign
  5123  00EA  120A  118A  255C   	fcall	___ftpack
  5124  00ED  0870               	movf	?___ftpack,w
  5125  00EE  00A0               	movwf	?___ftmul
  5126  00EF  0871               	movf	?___ftpack+1,w
  5127  00F0  00A1               	movwf	?___ftmul+1
  5128  00F1  0872               	movf	?___ftpack+2,w
  5129  00F2  00A2               	movwf	?___ftmul+2
  5130  00F3  0008               	return
  5131  00F4                     __end_of___ftmul:
  5132                           
  5133                           	psect	text29
  5134  02CE                     __ptext29:	
  5135 ;; *************** function ___ftdiv *****************
  5136 ;; Defined at:
  5137 ;;		line 56 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdiv.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  f2              3    8[COMMON] float 
  5140 ;;  f1              3   11[COMMON] float 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  f3              3    4[BANK0 ] float 
  5143 ;;  sign            1    8[BANK0 ] unsigned char 
  5144 ;;  exp             1    7[BANK0 ] unsigned char 
  5145 ;;  cntr            1    3[BANK0 ] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  3    8[COMMON] float 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 300/0
  5152 ;;		On exit  : 300/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5155 ;;      Params:         6       0       0       0       0
  5156 ;;      Locals:         0       6       0       0       0
  5157 ;;      Temps:          0       3       0       0       0
  5158 ;;      Totals:         6       9       0       0       0
  5159 ;;Total ram usage:       15 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    1
  5162 ;; This function calls:
  5163 ;;		___ftpack
  5164 ;; This function is called by:
  5165 ;;		_temperature_read
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function ___ftdiv
  5171  02CE                     ___ftdiv:
  5172                           
  5173                           ;incstack = 0
  5174                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5175  02CE  087B               	movf	___ftdiv@f1,w
  5176  02CF  00A0               	movwf	??___ftdiv
  5177  02D0  087C               	movf	___ftdiv@f1+1,w
  5178  02D1  00A1               	movwf	??___ftdiv+1
  5179  02D2  087D               	movf	___ftdiv@f1+2,w
  5180  02D3  00A2               	movwf	??___ftdiv+2
  5181  02D4  1003               	clrc
  5182  02D5  0D21               	rlf	??___ftdiv+1,w
  5183  02D6  0D22               	rlf	??___ftdiv+2,w
  5184  02D7  00FF               	movwf	127
  5185  02D8  087F               	movf	127,w
  5186  02D9  00A7               	movwf	___ftdiv@exp
  5187  02DA  0827               	movf	___ftdiv@exp,w
  5188  02DB  1D03               	btfss	3,2
  5189  02DC  2AE4               	goto	i1l2394
  5190  02DD  3000               	movlw	0
  5191  02DE  00F8               	movwf	?___ftdiv
  5192  02DF  3000               	movlw	0
  5193  02E0  00F9               	movwf	?___ftdiv+1
  5194  02E1  3000               	movlw	0
  5195  02E2  00FA               	movwf	?___ftdiv+2
  5196  02E3  0008               	return
  5197  02E4                     i1l2394:
  5198  02E4  0878               	movf	___ftdiv@f2,w
  5199  02E5  00A0               	movwf	??___ftdiv
  5200  02E6  0879               	movf	___ftdiv@f2+1,w
  5201  02E7  00A1               	movwf	??___ftdiv+1
  5202  02E8  087A               	movf	___ftdiv@f2+2,w
  5203  02E9  00A2               	movwf	??___ftdiv+2
  5204  02EA  1003               	clrc
  5205  02EB  0D21               	rlf	??___ftdiv+1,w
  5206  02EC  0D22               	rlf	??___ftdiv+2,w
  5207  02ED  00FF               	movwf	127
  5208  02EE  087F               	movf	127,w
  5209  02EF  00A8               	movwf	___ftdiv@sign
  5210  02F0  0828               	movf	___ftdiv@sign,w
  5211  02F1  1D03               	btfss	3,2
  5212  02F2  2AFA               	goto	i1l2400
  5213  02F3  3000               	movlw	0
  5214  02F4  00F8               	movwf	?___ftdiv
  5215  02F5  3000               	movlw	0
  5216  02F6  00F9               	movwf	?___ftdiv+1
  5217  02F7  3000               	movlw	0
  5218  02F8  00FA               	movwf	?___ftdiv+2
  5219  02F9  0008               	return
  5220  02FA                     i1l2400:
  5221  02FA  3000               	movlw	0
  5222  02FB  00A4               	movwf	___ftdiv@f3
  5223  02FC  3000               	movlw	0
  5224  02FD  00A5               	movwf	___ftdiv@f3+1
  5225  02FE  3000               	movlw	0
  5226  02FF  00A6               	movwf	___ftdiv@f3+2
  5227  0300  3089               	movlw	137
  5228  0301  0728               	addwf	___ftdiv@sign,w
  5229  0302  00A0               	movwf	??___ftdiv
  5230  0303  0820               	movf	??___ftdiv,w
  5231  0304  02A7               	subwf	___ftdiv@exp,f
  5232  0305  087D               	movf	___ftdiv@f1+2,w
  5233  0306  00FF               	movwf	127
  5234  0307  087F               	movf	127,w
  5235  0308  00A8               	movwf	___ftdiv@sign
  5236  0309  087A               	movf	___ftdiv@f2+2,w
  5237  030A  00FF               	movwf	127
  5238  030B  087F               	movf	127,w
  5239  030C  06A8               	xorwf	___ftdiv@sign,f
  5240  030D  3080               	movlw	128
  5241  030E  00FF               	movwf	127
  5242  030F  087F               	movf	127,w
  5243  0310  05A8               	andwf	___ftdiv@sign,f
  5244  0311  17FC               	bsf	___ftdiv@f1+1,7
  5245  0312  30FF               	movlw	255
  5246  0313  05FB               	andwf	___ftdiv@f1,f
  5247  0314  30FF               	movlw	255
  5248  0315  05FC               	andwf	___ftdiv@f1+1,f
  5249  0316  3000               	movlw	0
  5250  0317  05FD               	andwf	___ftdiv@f1+2,f
  5251  0318  17F9               	bsf	___ftdiv@f2+1,7
  5252  0319  30FF               	movlw	255
  5253  031A  05F8               	andwf	___ftdiv@f2,f
  5254  031B  30FF               	movlw	255
  5255  031C  05F9               	andwf	___ftdiv@f2+1,f
  5256  031D  3000               	movlw	0
  5257  031E  05FA               	andwf	___ftdiv@f2+2,f
  5258  031F  3018               	movlw	24
  5259  0320  00FF               	movwf	127
  5260  0321  087F               	movf	127,w
  5261  0322  00A3               	movwf	___ftdiv@cntr
  5262  0323                     i1l2416:
  5263  0323  3001               	movlw	1
  5264  0324                     u215_25:
  5265  0324  1003               	clrc
  5266  0325  0DA4               	rlf	___ftdiv@f3,f
  5267  0326  0DA5               	rlf	___ftdiv@f3+1,f
  5268  0327  0DA6               	rlf	___ftdiv@f3+2,f
  5269  0328  3EFF               	addlw	-1
  5270  0329  1D03               	skipz
  5271  032A  2B24               	goto	u215_25
  5272  032B  087A               	movf	___ftdiv@f2+2,w
  5273  032C  027D               	subwf	___ftdiv@f1+2,w
  5274  032D  1D03               	skipz
  5275  032E  2B35               	goto	u216_25
  5276  032F  0879               	movf	___ftdiv@f2+1,w
  5277  0330  027C               	subwf	___ftdiv@f1+1,w
  5278  0331  1D03               	skipz
  5279  0332  2B35               	goto	u216_25
  5280  0333  0878               	movf	___ftdiv@f2,w
  5281  0334  027B               	subwf	___ftdiv@f1,w
  5282  0335                     u216_25:
  5283  0335  1C03               	skipc
  5284  0336  2B42               	goto	i1l2422
  5285  0337  0878               	movf	___ftdiv@f2,w
  5286  0338  02FB               	subwf	___ftdiv@f1,f
  5287  0339  0879               	movf	___ftdiv@f2+1,w
  5288  033A  1C03               	skipc
  5289  033B  0F79               	incfsz	___ftdiv@f2+1,w
  5290  033C  02FC               	subwf	___ftdiv@f1+1,f
  5291  033D  087A               	movf	___ftdiv@f2+2,w
  5292  033E  1C03               	skipc
  5293  033F  0A7A               	incf	___ftdiv@f2+2,w
  5294  0340  02FD               	subwf	___ftdiv@f1+2,f
  5295  0341  1424               	bsf	___ftdiv@f3,0
  5296  0342                     i1l2422:
  5297  0342  3001               	movlw	1
  5298  0343                     u217_25:
  5299  0343  1003               	clrc
  5300  0344  0DFB               	rlf	___ftdiv@f1,f
  5301  0345  0DFC               	rlf	___ftdiv@f1+1,f
  5302  0346  0DFD               	rlf	___ftdiv@f1+2,f
  5303  0347  3EFF               	addlw	-1
  5304  0348  1D03               	skipz
  5305  0349  2B43               	goto	u217_25
  5306  034A  3001               	movlw	1
  5307  034B  02A3               	subwf	___ftdiv@cntr,f
  5308  034C  1D03               	btfss	3,2
  5309  034D  2B23               	goto	i1l2416
  5310  034E  0824               	movf	___ftdiv@f3,w
  5311  034F  00F0               	movwf	___ftpack@arg
  5312  0350  0825               	movf	___ftdiv@f3+1,w
  5313  0351  00F1               	movwf	___ftpack@arg+1
  5314  0352  0826               	movf	___ftdiv@f3+2,w
  5315  0353  00F2               	movwf	___ftpack@arg+2
  5316  0354  0827               	movf	___ftdiv@exp,w
  5317  0355  00FF               	movwf	127
  5318  0356  087F               	movf	127,w
  5319  0357  00F3               	movwf	___ftpack@exp
  5320  0358  0828               	movf	___ftdiv@sign,w
  5321  0359  00FF               	movwf	127
  5322  035A  087F               	movf	127,w
  5323  035B  00F4               	movwf	___ftpack@sign
  5324  035C  120A  118A  255C   	fcall	___ftpack
  5325  035F  0870               	movf	?___ftpack,w
  5326  0360  00F8               	movwf	?___ftdiv
  5327  0361  0871               	movf	?___ftpack+1,w
  5328  0362  00F9               	movwf	?___ftdiv+1
  5329  0363  0872               	movf	?___ftpack+2,w
  5330  0364  00FA               	movwf	?___ftdiv+2
  5331  0365  0008               	return
  5332  0366                     __end_of___ftdiv:
  5333                           
  5334                           	psect	text30
  5335  055C                     __ptext30:	
  5336 ;; *************** function ___ftpack *****************
  5337 ;; Defined at:
  5338 ;;		line 62 in file "E:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  arg             3    0[COMMON] unsigned um
  5341 ;;  exp             1    3[COMMON] unsigned char 
  5342 ;;  sign            1    4[COMMON] unsigned char 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  3    0[COMMON] float 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0, btemp+1
  5349 ;; Tracked objects:
  5350 ;;		On entry : 300/0
  5351 ;;		On exit  : 300/0
  5352 ;;		Unchanged: 300/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5354 ;;      Params:         5       0       0       0       0
  5355 ;;      Locals:         0       0       0       0       0
  5356 ;;      Temps:          3       0       0       0       0
  5357 ;;      Totals:         8       0       0       0       0
  5358 ;;Total ram usage:        8 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; This function calls:
  5361 ;;		Nothing
  5362 ;; This function is called by:
  5363 ;;		___ftdiv
  5364 ;;		___ftmul
  5365 ;;		___lwtoft
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function ___ftpack
  5371  055C                     ___ftpack:
  5372                           
  5373                           ;incstack = 0
  5374                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  5375  055C  0873               	movf	___ftpack@exp,w
  5376  055D  1903               	btfsc	3,2
  5377  055E  2D64               	goto	i1l2168
  5378  055F  0872               	movf	___ftpack@arg+2,w
  5379  0560  0471               	iorwf	___ftpack@arg+1,w
  5380  0561  0470               	iorwf	___ftpack@arg,w
  5381  0562  1D03               	skipz
  5382  0563  2D77               	goto	i1l2176
  5383  0564                     i1l2168:
  5384  0564  3000               	movlw	0
  5385  0565  00F0               	movwf	?___ftpack
  5386  0566  3000               	movlw	0
  5387  0567  00F1               	movwf	?___ftpack+1
  5388  0568  3000               	movlw	0
  5389  0569  00F2               	movwf	?___ftpack+2
  5390  056A  0008               	return
  5391  056B                     i1l2172:
  5392  056B  3001               	movlw	1
  5393  056C  00FF               	movwf	127
  5394  056D  087F               	movf	127,w
  5395  056E  07F3               	addwf	___ftpack@exp,f
  5396  056F  3001               	movlw	1
  5397  0570                     u169_25:
  5398  0570  1003               	clrc
  5399  0571  0CF2               	rrf	___ftpack@arg+2,f
  5400  0572  0CF1               	rrf	___ftpack@arg+1,f
  5401  0573  0CF0               	rrf	___ftpack@arg,f
  5402  0574  3EFF               	addlw	-1
  5403  0575  1D03               	skipz
  5404  0576  2D70               	goto	u169_25
  5405  0577                     i1l2176:
  5406  0577  30FE               	movlw	254
  5407  0578  0572               	andwf	___ftpack@arg+2,w
  5408  0579  1903               	btfsc	3,2
  5409  057A  2D92               	goto	i1l2184
  5410  057B  2D6B               	goto	i1l2172
  5411  057C                     i1l2178:
  5412  057C  3001               	movlw	1
  5413  057D  00FF               	movwf	127
  5414  057E  087F               	movf	127,w
  5415  057F  07F3               	addwf	___ftpack@exp,f
  5416  0580  3001               	movlw	1
  5417  0581  07F0               	addwf	___ftpack@arg,f
  5418  0582  3000               	movlw	0
  5419  0583  1803               	skipnc
  5420  0584  3001               	movlw	1
  5421  0585  07F1               	addwf	___ftpack@arg+1,f
  5422  0586  3000               	movlw	0
  5423  0587  1803               	skipnc
  5424  0588  3001               	movlw	1
  5425  0589  07F2               	addwf	___ftpack@arg+2,f
  5426  058A  3001               	movlw	1
  5427  058B                     u171_25:
  5428  058B  1003               	clrc
  5429  058C  0CF2               	rrf	___ftpack@arg+2,f
  5430  058D  0CF1               	rrf	___ftpack@arg+1,f
  5431  058E  0CF0               	rrf	___ftpack@arg,f
  5432  058F  3EFF               	addlw	-1
  5433  0590  1D03               	skipz
  5434  0591  2D8B               	goto	u171_25
  5435  0592                     i1l2184:
  5436  0592  30FF               	movlw	255
  5437  0593  0572               	andwf	___ftpack@arg+2,w
  5438  0594  1903               	btfsc	3,2
  5439  0595  2DA5               	goto	i1l2188
  5440  0596  2D7C               	goto	i1l2178
  5441  0597                     i1l2190:
  5442  0597  3002               	movlw	2
  5443  0598  0273               	subwf	___ftpack@exp,w
  5444  0599  1C03               	btfss	3,0
  5445  059A  2DA7               	goto	i1l874
  5446  059B  3001               	movlw	1
  5447  059C  02F3               	subwf	___ftpack@exp,f
  5448  059D  3001               	movlw	1
  5449  059E                     u173_25:
  5450  059E  1003               	clrc
  5451  059F  0DF0               	rlf	___ftpack@arg,f
  5452  05A0  0DF1               	rlf	___ftpack@arg+1,f
  5453  05A1  0DF2               	rlf	___ftpack@arg+2,f
  5454  05A2  3EFF               	addlw	-1
  5455  05A3  1D03               	skipz
  5456  05A4  2D9E               	goto	u173_25
  5457  05A5                     i1l2188:
  5458  05A5  1FF1               	btfss	___ftpack@arg+1,7
  5459  05A6  2D97               	goto	i1l2190
  5460  05A7                     i1l874:
  5461  05A7  1873               	btfsc	___ftpack@exp,0
  5462  05A8  2DAF               	goto	i1l875
  5463  05A9  30FF               	movlw	255
  5464  05AA  05F0               	andwf	___ftpack@arg,f
  5465  05AB  307F               	movlw	127
  5466  05AC  05F1               	andwf	___ftpack@arg+1,f
  5467  05AD  30FF               	movlw	255
  5468  05AE  05F2               	andwf	___ftpack@arg+2,f
  5469  05AF                     i1l875:
  5470  05AF  1003               	clrc
  5471  05B0  0CF3               	rrf	___ftpack@exp,f
  5472  05B1  0873               	movf	___ftpack@exp,w
  5473  05B2  00F5               	movwf	??___ftpack
  5474  05B3  01F6               	clrf	??___ftpack+1
  5475  05B4  01F7               	clrf	??___ftpack+2
  5476  05B5  3010               	movlw	16
  5477  05B6                     u177_25:
  5478  05B6  1003               	clrc
  5479  05B7  0DF5               	rlf	??___ftpack,f
  5480  05B8  0DF6               	rlf	??___ftpack+1,f
  5481  05B9  0DF7               	rlf	??___ftpack+2,f
  5482  05BA  3EFF               	addlw	-1
  5483  05BB  1D03               	skipz
  5484  05BC  2DB6               	goto	u177_25
  5485  05BD  0875               	movf	??___ftpack,w
  5486  05BE  04F0               	iorwf	___ftpack@arg,f
  5487  05BF  0876               	movf	??___ftpack+1,w
  5488  05C0  04F1               	iorwf	___ftpack@arg+1,f
  5489  05C1  0877               	movf	??___ftpack+2,w
  5490  05C2  04F2               	iorwf	___ftpack@arg+2,f
  5491  05C3  0874               	movf	___ftpack@sign,w
  5492  05C4  1903               	btfsc	3,2
  5493  05C5  0008               	return
  5494  05C6  17F2               	bsf	___ftpack@arg+2,7
  5495  05C7  0008               	return
  5496  05C8                     __end_of___ftpack:
  5497                           
  5498                           	psect	text31
  5499  0EDF                     __ptext31:	
  5500 ;; *************** function _ADC_Read *****************
  5501 ;; Defined at:
  5502 ;;		line 15 in file "adc.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  ANC             1    wreg     unsigned char 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  ANC             1    3[COMMON] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  2    0[COMMON] unsigned short 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, btemp+1
  5511 ;; Tracked objects:
  5512 ;;		On entry : 300/0
  5513 ;;		On exit  : 200/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5516 ;;      Params:         2       0       0       0       0
  5517 ;;      Locals:         1       0       0       0       0
  5518 ;;      Temps:          1       0       0       0       0
  5519 ;;      Totals:         4       0       0       0       0
  5520 ;;Total ram usage:        4 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_temperature_read
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           
  5530                           ;psect for function _ADC_Read
  5531  0EDF                     _ADC_Read:
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
  5535                           ;ADC_Read@ANC stored from wreg
  5536  0EDF  00F3               	movwf	ADC_Read@ANC
  5537                           
  5538                           ;adc.c: 17: if(ANC<0 || ANC>7)
  5539  0EE0  3008               	movlw	8
  5540  0EE1  0273               	subwf	ADC_Read@ANC,w
  5541  0EE2  1C03               	skipc
  5542  0EE3  2EE7               	goto	i1l2326
  5543                           
  5544                           ;adc.c: 18: { return 0;}
  5545  0EE4  01F0               	clrf	?_ADC_Read
  5546  0EE5  01F1               	clrf	?_ADC_Read+1
  5547  0EE6  0008               	return
  5548  0EE7                     i1l2326:
  5549                           
  5550                           ;adc.c: 19: ADCON0 &= 0b11000101;
  5551  0EE7  30C5               	movlw	197
  5552  0EE8  00FF               	movwf	127
  5553  0EE9  087F               	movf	127,w
  5554  0EEA  059F               	andwf	31,f	;volatile
  5555                           
  5556                           ;adc.c: 20: ADCON0 |= ANC<<3;
  5557  0EEB  0873               	movf	ADC_Read@ANC,w
  5558  0EEC  00F2               	movwf	??_ADC_Read
  5559  0EED  3002               	movlw	2
  5560  0EEE                     u201_25:
  5561  0EEE  1003               	clrc
  5562  0EEF  0DF2               	rlf	??_ADC_Read,f
  5563  0EF0  3EFF               	addlw	-1
  5564  0EF1  1D03               	skipz
  5565  0EF2  2EEE               	goto	u201_25
  5566  0EF3  1003               	clrc
  5567  0EF4  0D72               	rlf	??_ADC_Read,w
  5568  0EF5  00FF               	movwf	127
  5569  0EF6  087F               	movf	127,w
  5570  0EF7  049F               	iorwf	31,f	;volatile
  5571                           
  5572                           ;adc.c: 22: _delay((unsigned long)((30)*(8000000/4000000.0)));
  5573  0EF8  3013               	movlw	19
  5574  0EF9  00F2               	movwf	??_ADC_Read
  5575  0EFA                     u343_27:
  5576  0EFA  0BF2               	decfsz	??_ADC_Read,f
  5577  0EFB  2EFA               	goto	u343_27
  5578  0EFC  2EFD               	nop2
  5579                           
  5580                           ;adc.c: 23: GO_DONE = 1;
  5581  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0EFF  151F               	bsf	31,2	;volatile
  5584  0F00                     i1l266:	
  5585                           ;adc.c: 24: while(ADCON0bits.GO_DONE);
  5586                           
  5587  0F00  191F               	btfsc	31,2	;volatile
  5588  0F01  2F00               	goto	i1l266
  5589                           
  5590                           ;adc.c: 26: return ((ADRESH << 8) + ADRESL);
  5591  0F02  081E               	movf	30,w	;volatile
  5592  0F03  00F1               	movwf	?_ADC_Read+1
  5593  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  5594  0F05  081E               	movf	30,w	;volatile
  5595  0F06  00F0               	movwf	?_ADC_Read
  5596  0F07  0008               	return
  5597  0F08                     __end_of_ADC_Read:
  5598                           
  5599                           	psect	text32
  5600  0DB5                     __ptext32:	
  5601 ;; *************** function _set_temp_off *****************
  5602 ;; Defined at:
  5603 ;;		line 68 in file "heater.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 300/0
  5614 ;;		On exit  : 300/100
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5617 ;;      Params:         0       0       0       0       0
  5618 ;;      Locals:         0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0
  5620 ;;      Totals:         0       0       0       0       0
  5621 ;;Total ram usage:        0 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		_eeprom_write
  5626 ;; This function is called by:
  5627 ;;		_isr
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _set_temp_off
  5633  0DB5                     _set_temp_off:
  5634                           
  5635                           ;heater.c: 69: temp_setting_mode=0;
  5636                           
  5637                           ;incstack = 0
  5638 ;; hardware stack exceeded
  5639                           ; Regs used in _set_temp_off: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5640  0DB5  01D0               	clrf	_temp_setting_mode
  5641                           
  5642                           ;heater.c: 70: eeprom_write(0x00,temp_set);
  5643  0DB6  0855               	movf	_temp_set,w
  5644  0DB7  00FF               	movwf	127
  5645  0DB8  087F               	movf	127,w
  5646  0DB9  00F2               	movwf	eeprom_write@data
  5647  0DBA  3000               	movlw	0
  5648  0DBB  120A  158A  2708   	fcall	_eeprom_write
  5649  0DBE  0008               	return
  5650  0DBF                     __end_of_set_temp_off:
  5651                           
  5652                           	psect	text33
  5653  0F08                     __ptext33:	
  5654 ;; *************** function _eeprom_write *****************
  5655 ;; Defined at:
  5656 ;;		line 7 in file "eeprom.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  address         1    wreg     unsigned char 
  5659 ;;  data            1    2[COMMON] unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  address         1    3[COMMON] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 300/0
  5668 ;;		On exit  : 300/100
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5671 ;;      Params:         1       0       0       0       0
  5672 ;;      Locals:         1       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0
  5674 ;;      Totals:         2       0       0       0       0
  5675 ;;Total ram usage:        2 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    2
  5678 ;; This function calls:
  5679 ;;		_i2c_master_init
  5680 ;;		_i2c_master_write
  5681 ;;		_i2c_restart
  5682 ;;		_i2c_start
  5683 ;;		_i2c_stop
  5684 ;;		_i2c_write_slave_address_with_write_req
  5685 ;; This function is called by:
  5686 ;;		_set_temp_off
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           
  5691                           ;psect for function _eeprom_write
  5692  0F08                     _eeprom_write:
  5693                           
  5694                           ;incstack = 0
  5695 ;; hardware stack exceeded
  5696                           ; Regs used in _eeprom_write: [wreg+status,2+status,0+pclath+cstack]
  5697                           ;eeprom_write@address stored from wreg
  5698  0F08  00F3               	movwf	eeprom_write@address
  5699                           
  5700                           ;eeprom.c: 8: i2c_master_init();
  5701  0F09  120A  158A  25EC  120A  158A  	fcall	_i2c_master_init
  5702                           
  5703                           ;eeprom.c: 9: i2c_start();
  5704  0F0E  120A  158A  258D  120A  158A  	fcall	_i2c_start
  5705  0F13                     i1l143:	
  5706                           ;eeprom.c: 10: while(i2c_write_slave_address_with_write_req(0x50))
  5707                           
  5708  0F13  3050               	movlw	80
  5709  0F14  120A  158A  2640  120A  158A  	fcall	_i2c_write_slave_address_with_write_req
  5710  0F19  3A00               	xorlw	0
  5711  0F1A  1903               	btfsc	3,2
  5712  0F1B  2F22               	goto	i1l2318
  5713                           
  5714                           ;eeprom.c: 11: i2c_restart();
  5715  0F1C  120A  158A  2588  120A  158A  	fcall	_i2c_restart
  5716  0F21  2F13               	goto	i1l143
  5717  0F22                     i1l2318:
  5718                           
  5719                           ;eeprom.c: 12: i2c_master_write(address >> 8);
  5720  0F22  3000               	movlw	0
  5721  0F23  120A  158A  25DF  120A  158A  	fcall	_i2c_master_write
  5722                           
  5723                           ;eeprom.c: 13: i2c_master_write((uint8) address);
  5724  0F28  0873               	movf	eeprom_write@address,w
  5725  0F29  120A  158A  25DF  120A  158A  	fcall	_i2c_master_write
  5726                           
  5727                           ;eeprom.c: 14: i2c_master_write(data);
  5728  0F2E  0872               	movf	eeprom_write@data,w
  5729  0F2F  120A  158A  25DF  120A  158A  	fcall	_i2c_master_write
  5730                           
  5731                           ;eeprom.c: 15: i2c_stop();
  5732  0F34  120A  158A  2592   	fcall	_i2c_stop
  5733  0F37  0008               	return
  5734  0F38                     __end_of_eeprom_write:
  5735                           
  5736                           	psect	text34
  5737  0E40                     __ptext34:	
  5738 ;; *************** function _i2c_write_slave_address_with_write_req *****************
  5739 ;; Defined at:
  5740 ;;		line 53 in file "i2c.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  address         1    wreg     unsigned char 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  address         1    1[COMMON] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      unsigned char 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0, pclath, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 300/100
  5751 ;;		On exit  : 300/100
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5754 ;;      Params:         0       0       0       0       0
  5755 ;;      Locals:         1       0       0       0       0
  5756 ;;      Temps:          1       0       0       0       0
  5757 ;;      Totals:         2       0       0       0       0
  5758 ;;Total ram usage:        2 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    1
  5761 ;; This function calls:
  5762 ;;		_i2c_wait
  5763 ;; This function is called by:
  5764 ;;		_eeprom_write
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _i2c_write_slave_address_with_write_req
  5770  0E40                     _i2c_write_slave_address_with_write_req:
  5771                           
  5772                           ;incstack = 0
  5773 ;; hardware stack exceeded
  5774                           ; Regs used in _i2c_write_slave_address_with_write_req: [wreg+status,2+status,0+pclath+c
      +                          stack]
  5775                           ;i2c_write_slave_address_with_write_req@address stored from wreg
  5776  0E40  00F1               	movwf	i2c_write_slave_address_with_write_req@address
  5777                           
  5778                           ;i2c.c: 54: i2c_wait();
  5779  0E41  120A  158A  259C  120A  158A  	fcall	_i2c_wait
  5780                           
  5781                           ;i2c.c: 55: SSPBUF = (address << 1);
  5782  0E46  0871               	movf	i2c_write_slave_address_with_write_req@address,w
  5783  0E47  00F0               	movwf	??_i2c_write_slave_address_with_write_req
  5784  0E48  0770               	addwf	??_i2c_write_slave_address_with_write_req,w
  5785  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0E4A  0093               	movwf	19	;volatile
  5787  0E4B                     i1l219:	
  5788                           ;i2c.c: 56: while(!SSPIF);
  5789                           
  5790  0E4B  1D8C               	btfss	12,3	;volatile
  5791  0E4C  2E4B               	goto	i1l219
  5792                           
  5793                           ;i2c.c: 57: SSPIF = 0;
  5794  0E4D  118C               	bcf	12,3	;volatile
  5795                           
  5796                           ;i2c.c: 58: return ACKSTAT;
  5797  0E4E  3000               	movlw	0
  5798  0E4F  1683               	bsf	3,5	;RP0=1, select bank1
  5799  0E50  1B11               	btfsc	17,6	;volatile
  5800  0E51  3001               	movlw	1
  5801  0E52  0008               	return
  5802  0E53                     __end_of_i2c_write_slave_address_with_write_req:
  5803                           
  5804                           	psect	text35
  5805  0D92                     __ptext35:	
  5806 ;; *************** function _i2c_stop *****************
  5807 ;; Defined at:
  5808 ;;		line 27 in file "i2c.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, status,0, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 300/0
  5819 ;;		On exit  : 300/100
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5822 ;;      Params:         0       0       0       0       0
  5823 ;;      Locals:         0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0
  5825 ;;      Totals:         0       0       0       0       0
  5826 ;;Total ram usage:        0 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    1
  5829 ;; This function calls:
  5830 ;;		_i2c_wait
  5831 ;; This function is called by:
  5832 ;;		_eeprom_write
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           
  5837                           ;psect for function _i2c_stop
  5838  0D92                     _i2c_stop:
  5839                           
  5840                           ;i2c.c: 28: i2c_wait();
  5841                           
  5842                           ;incstack = 0
  5843 ;; hardware stack exceeded
  5844                           ; Regs used in _i2c_stop: [wreg+status,2+status,0+pclath+cstack]
  5845  0D92  120A  158A  259C   	fcall	_i2c_wait
  5846                           
  5847                           ;i2c.c: 29: PEN = 1;
  5848  0D95  1511               	bsf	17,2	;volatile
  5849  0D96  0008               	return
  5850  0D97                     __end_of_i2c_stop:
  5851                           
  5852                           	psect	text36
  5853  0D8D                     __ptext36:	
  5854 ;; *************** function _i2c_start *****************
  5855 ;; Defined at:
  5856 ;;		line 22 in file "i2c.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;		None
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 300/100
  5867 ;;		On exit  : 300/100
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5870 ;;      Params:         0       0       0       0       0
  5871 ;;      Locals:         0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0
  5873 ;;      Totals:         0       0       0       0       0
  5874 ;;Total ram usage:        0 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    1
  5877 ;; This function calls:
  5878 ;;		_i2c_wait
  5879 ;; This function is called by:
  5880 ;;		_eeprom_write
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           
  5885                           ;psect for function _i2c_start
  5886  0D8D                     _i2c_start:
  5887                           
  5888                           ;i2c.c: 23: i2c_wait();
  5889                           
  5890                           ;incstack = 0
  5891 ;; hardware stack exceeded
  5892                           ; Regs used in _i2c_start: [wreg+status,2+status,0+pclath+cstack]
  5893  0D8D  120A  158A  259C   	fcall	_i2c_wait
  5894                           
  5895                           ;i2c.c: 24: SEN = 1;
  5896  0D90  1411               	bsf	17,0	;volatile
  5897  0D91  0008               	return
  5898  0D92                     __end_of_i2c_start:
  5899                           
  5900                           	psect	text37
  5901  0D88                     __ptext37:	
  5902 ;; *************** function _i2c_restart *****************
  5903 ;; Defined at:
  5904 ;;		line 32 in file "i2c.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 200/100
  5915 ;;		On exit  : 300/100
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5918 ;;      Params:         0       0       0       0       0
  5919 ;;      Locals:         0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0
  5921 ;;      Totals:         0       0       0       0       0
  5922 ;;Total ram usage:        0 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    1
  5925 ;; This function calls:
  5926 ;;		_i2c_wait
  5927 ;; This function is called by:
  5928 ;;		_eeprom_write
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           
  5933                           ;psect for function _i2c_restart
  5934  0D88                     _i2c_restart:
  5935                           
  5936                           ;i2c.c: 33: i2c_wait();
  5937                           
  5938                           ;incstack = 0
  5939 ;; hardware stack exceeded
  5940                           ; Regs used in _i2c_restart: [wreg+status,2+status,0+pclath+cstack]
  5941  0D88  120A  158A  259C   	fcall	_i2c_wait
  5942                           
  5943                           ;i2c.c: 34: RSEN = 1;
  5944  0D8B  1491               	bsf	17,1	;volatile
  5945  0D8C  0008               	return
  5946  0D8D                     __end_of_i2c_restart:
  5947                           
  5948                           	psect	text38
  5949  0DDF                     __ptext38:	
  5950 ;; *************** function _i2c_master_write *****************
  5951 ;; Defined at:
  5952 ;;		line 69 in file "i2c.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  data            1    wreg     unsigned char 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  data            1    0[COMMON] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;                  1    wreg      unsigned char 
  5959 ;; Registers used:
  5960 ;;		wreg, status,2, status,0, pclath, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 200/100
  5963 ;;		On exit  : 300/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5966 ;;      Params:         0       0       0       0       0
  5967 ;;      Locals:         1       0       0       0       0
  5968 ;;      Temps:          0       0       0       0       0
  5969 ;;      Totals:         1       0       0       0       0
  5970 ;;Total ram usage:        1 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    1
  5973 ;; This function calls:
  5974 ;;		_i2c_wait
  5975 ;; This function is called by:
  5976 ;;		_eeprom_write
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _i2c_master_write
  5982  0DDF                     _i2c_master_write:
  5983                           
  5984                           ;incstack = 0
  5985 ;; hardware stack exceeded
  5986                           ; Regs used in _i2c_master_write: [wreg+status,2+status,0+pclath+cstack]
  5987                           ;i2c_master_write@data stored from wreg
  5988  0DDF  00F0               	movwf	i2c_master_write@data
  5989                           
  5990                           ;i2c.c: 70: i2c_wait();
  5991  0DE0  120A  158A  259C  120A  158A  	fcall	_i2c_wait
  5992                           
  5993                           ;i2c.c: 71: SSPBUF = data;
  5994  0DE5  0870               	movf	i2c_master_write@data,w
  5995  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  5996  0DE7  0093               	movwf	19	;volatile
  5997  0DE8                     i1l231:	
  5998                           ;i2c.c: 72: while(!SSPIF);
  5999                           
  6000  0DE8  1D8C               	btfss	12,3	;volatile
  6001  0DE9  2DE8               	goto	i1l231
  6002                           
  6003                           ;i2c.c: 73: SSPIF = 0;
  6004  0DEA  118C               	bcf	12,3	;volatile
  6005                           
  6006                           ;i2c.c: 74: return ACKSTAT;;	Return value of _i2c_master_write is never used
  6007  0DEB  0008               	return
  6008  0DEC                     __end_of_i2c_master_write:
  6009                           
  6010                           	psect	text39
  6011  0D9C                     __ptext39:	
  6012 ;; *************** function _i2c_wait *****************
  6013 ;; Defined at:
  6014 ;;		line 37 in file "i2c.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 200/100
  6025 ;;		On exit  : 300/100
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6028 ;;      Params:         0       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0
  6031 ;;      Totals:         0       0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_i2c_start
  6038 ;;		_i2c_stop
  6039 ;;		_i2c_restart
  6040 ;;		_i2c_write_slave_address_with_write_req
  6041 ;;		_i2c_master_write
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function _i2c_wait
  6047  0D9C                     _i2c_wait:
  6048  0D9C                     i1l207:	
  6049                           ;i2c.c: 38: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6050                           
  6051                           ;incstack = 0
  6052 ;; hardware stack exceeded
  6053                           ; Regs used in _i2c_wait: [wreg+status,2]
  6054                           
  6055  0D9C  1683               	bsf	3,5	;RP0=1, select bank1
  6056  0D9D  1914               	btfsc	20,2	;volatile
  6057  0D9E  2D9C               	goto	i1l207
  6058  0D9F  0811               	movf	17,w	;volatile
  6059  0DA0  391F               	andlw	31
  6060  0DA1  1903               	btfsc	3,2
  6061  0DA2  0008               	return
  6062  0DA3  2D9C               	goto	i1l207
  6063  0DA4                     __end_of_i2c_wait:
  6064                           
  6065                           	psect	text40
  6066  0DEC                     __ptext40:	
  6067 ;; *************** function _i2c_master_init *****************
  6068 ;; Defined at:
  6069 ;;		line 8 in file "i2c.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2
  6078 ;; Tracked objects:
  6079 ;;		On entry : 300/0
  6080 ;;		On exit  : 300/100
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6083 ;;      Params:         0       0       0       0       0
  6084 ;;      Locals:         0       0       0       0       0
  6085 ;;      Temps:          0       0       0       0       0
  6086 ;;      Totals:         0       0       0       0       0
  6087 ;;Total ram usage:        0 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_eeprom_write
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _i2c_master_init
  6098  0DEC                     _i2c_master_init:
  6099                           
  6100                           ;i2c.c: 10: TRISC3= 1;
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _i2c_master_init: [wreg+status,2]
  6104  0DEC  1683               	bsf	3,5	;RP0=1, select bank1
  6105  0DED  1587               	bsf	7,3	;volatile
  6106                           
  6107                           ;i2c.c: 11: TRISC4= 1;
  6108  0DEE  1607               	bsf	7,4	;volatile
  6109                           
  6110                           ;i2c.c: 12: SSPCON2 = 0x00;
  6111  0DEF  0191               	clrf	17	;volatile
  6112                           
  6113                           ;i2c.c: 13: SSPSTAT = 0x00;
  6114  0DF0  0194               	clrf	20	;volatile
  6115                           
  6116                           ;i2c.c: 14: SSPEN = 1;
  6117  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  6118  0DF2  1694               	bsf	20,5	;volatile
  6119                           
  6120                           ;i2c.c: 15: SSPM3 = 1;
  6121  0DF3  1594               	bsf	20,3	;volatile
  6122                           
  6123                           ;i2c.c: 16: SSPM2 = 0;
  6124  0DF4  1114               	bcf	20,2	;volatile
  6125                           
  6126                           ;i2c.c: 17: SSPM1 = 0;
  6127  0DF5  1094               	bcf	20,1	;volatile
  6128                           
  6129                           ;i2c.c: 18: SSPM0 = 0;
  6130  0DF6  1014               	bcf	20,0	;volatile
  6131                           
  6132                           ;i2c.c: 19: SSPADD = ((8000000 / 4) / 9600) - 1;
  6133  0DF7  30CF               	movlw	207
  6134  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  6135  0DF9  0093               	movwf	19	;volatile
  6136  0DFA  0008               	return
  6137  0DFB                     __end_of_i2c_master_init:
  6138                           
  6139                           	psect	text41
  6140  0E2E                     __ptext41:	
  6141 ;; *************** function _save_temp *****************
  6142 ;; Defined at:
  6143 ;;		line 41 in file "heater.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  temp            2    0[COMMON] short 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6152 ;; Tracked objects:
  6153 ;;		On entry : 300/0
  6154 ;;		On exit  : B00/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6157 ;;      Params:         2       0       0       0       0
  6158 ;;      Locals:         0       0       0       0       0
  6159 ;;      Temps:          0       0       0       0       0
  6160 ;;      Totals:         2       0       0       0       0
  6161 ;;Total ram usage:        2 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_isr
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _save_temp
  6172  0E2E                     _save_temp:
  6173                           
  6174                           ;heater.c: 42: past_temps[index]=temp;
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in _save_temp: [wreg-fsr0h+status,2+status,0+btemp+1]
  6178  0E2E  0870               	movf	save_temp@temp,w
  6179  0E2F  00FF               	movwf	127
  6180  0E30  0851               	movf	_index,w
  6181  0E31  3E3E               	addlw	(low (_past_temps| 0))& (0+255)
  6182  0E32  0084               	movwf	4
  6183  0E33  087F               	movf	127,w
  6184  0E34  1383               	bcf	3,7	;select IRP bank0
  6185  0E35  0080               	movwf	0
  6186                           
  6187                           ;heater.c: 43: index++;
  6188  0E36  3001               	movlw	1
  6189  0E37  00FF               	movwf	127
  6190  0E38  087F               	movf	127,w
  6191  0E39  07D1               	addwf	_index,f
  6192                           
  6193                           ;heater.c: 44: if (index==10)
  6194  0E3A  300A               	movlw	10
  6195  0E3B  0651               	xorwf	_index,w
  6196  0E3C  1D03               	btfss	3,2
  6197  0E3D  0008               	return
  6198                           
  6199                           ;heater.c: 45: index=0;
  6200  0E3E  01D1               	clrf	_index
  6201  0E3F  0008               	return
  6202  0E40                     __end_of_save_temp:
  6203                           
  6204                           	psect	text42
  6205  0DD4                     __ptext42:	
  6206 ;; *************** function _alternate_on_off *****************
  6207 ;; Defined at:
  6208 ;;		line 105 in file "heater.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;		None
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;		None
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      void 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0
  6217 ;; Tracked objects:
  6218 ;;		On entry : 300/0
  6219 ;;		On exit  : 300/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6222 ;;      Params:         0       0       0       0       0
  6223 ;;      Locals:         0       0       0       0       0
  6224 ;;      Temps:          0       0       0       0       0
  6225 ;;      Totals:         0       0       0       0       0
  6226 ;;Total ram usage:        0 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_isr
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _alternate_on_off
  6237  0DD4                     _alternate_on_off:
  6238                           
  6239                           ;heater.c: 107: if(ON_OFF_FLAG==0)
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _alternate_on_off: [wreg+status,2+status,0]
  6243  0DD4  084F               	movf	_ON_OFF_FLAG,w
  6244  0DD5  1D03               	btfss	3,2
  6245  0DD6  2DDA               	goto	i1l2562
  6246                           
  6247                           ;heater.c: 108: {;heater.c: 110: ON_OFF_FLAG=1;}
  6248  0DD7  01CF               	clrf	_ON_OFF_FLAG
  6249  0DD8  0ACF               	incf	_ON_OFF_FLAG,f
  6250  0DD9  0008               	return
  6251  0DDA                     i1l2562:
  6252                           
  6253                           ;heater.c: 111: else if (ON_OFF_FLAG==1)
  6254  0DDA  034F               	decf	_ON_OFF_FLAG,w
  6255  0DDB  1D03               	btfss	3,2
  6256  0DDC  0008               	return
  6257                           
  6258                           ;heater.c: 112: {;heater.c: 113: ON_OFF_FLAG=0;}
  6259  0DDD  01CF               	clrf	_ON_OFF_FLAG
  6260  0DDE  0008               	return
  6261  0DDF                     __end_of_alternate_on_off:
  6262                           
  6263                           	psect	text43
  6264  0DC9                     __ptext43:	
  6265 ;; *************** function _alternate *****************
  6266 ;; Defined at:
  6267 ;;		line 46 in file "ssd.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      void 
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0
  6276 ;; Tracked objects:
  6277 ;;		On entry : 300/0
  6278 ;;		On exit  : 300/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6281 ;;      Params:         0       0       0       0       0
  6282 ;;      Locals:         0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0
  6284 ;;      Totals:         0       0       0       0       0
  6285 ;;Total ram usage:        0 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; This function calls:
  6288 ;;		Nothing
  6289 ;; This function is called by:
  6290 ;;		_isr
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _alternate
  6296  0DC9                     _alternate:
  6297                           
  6298                           ;ssd.c: 47: if(blink==1)
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _alternate: [wreg+status,2+status,0]
  6302  0DC9  0356               	decf	_blink,w
  6303  0DCA  1D03               	btfss	3,2
  6304  0DCB  2DCE               	goto	i1l2554
  6305                           
  6306                           ;ssd.c: 48: blink=0;
  6307  0DCC  01D6               	clrf	_blink
  6308  0DCD  0008               	return
  6309  0DCE                     i1l2554:
  6310                           
  6311                           ;ssd.c: 49: else if(blink==0)
  6312  0DCE  0856               	movf	_blink,w
  6313  0DCF  1D03               	btfss	3,2
  6314  0DD0  0008               	return
  6315                           
  6316                           ;ssd.c: 50: blink=1;
  6317  0DD1  01D6               	clrf	_blink
  6318  0DD2  0AD6               	incf	_blink,f
  6319  0DD3  0008               	return
  6320  0DD4                     __end_of_alternate:
  6321  007E                     btemp	set	126	;btemp
  6322  007E                     wtemp0	set	126
  6323                           
  6324                           	psect	config
  6325                           
  6326                           ;Config register CONFIG @ 0x2007
  6327                           ;	Oscillator Selection bits
  6328                           ;	FOSC = HS, HS oscillator
  6329                           ;	Watchdog Timer Enable bit
  6330                           ;	WDTE = OFF, WDT disabled
  6331                           ;	Power-up Timer Enable bit
  6332                           ;	PWRTE = ON, PWRT enabled
  6333                           ;	Brown-out Reset Enable bit
  6334                           ;	BOREN = ON, BOR enabled
  6335                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  6336                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  6337                           ;	Data EEPROM Memory Code Protection bit
  6338                           ;	CPD = OFF, Data EEPROM code protection off
  6339                           ;	Flash Program Memory Write Enable bits
  6340                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  6341                           ;	In-Circuit Debugger Mode bit
  6342                           ;	DEBUG = 0x1, unprogrammed default
  6343                           ;	Flash Program Memory Code Protection bit
  6344                           ;	CP = OFF, Code protection off
  6345  2007                     	org	8199
  6346  2007  3F72               	dw	16242

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      55
    BANK1            80     39      62
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    counter0	PTR unsigned char  size(1) Largest target is 1
		 -> set_timer0@cntr0(BANK1[1]), NULL(NULL[0]), 

    TMR0_REG	PTR unsigned char  size(1) Largest target is 1
		 -> set_timer0@tmr0(BANK1[1]), NULL(NULL[0]), 

    counter2	PTR unsigned char  size(1) Largest target is 1
		 -> set_timer2@cntr2(BANK1[1]), NULL(NULL[0]), 

    TMR2_REG	PTR unsigned char  size(1) Largest target is 1
		 -> set_timer2@tmr2(BANK1[1]), NULL(NULL[0]), 

    counter1	PTR unsigned char  size(1) Largest target is 1
		 -> set_timer1@cntr1(BANK1[1]), NULL(NULL[0]), 

    TMR1_REG	PTR unsigned int  size(1) Largest target is 2
		 -> set_timer1@tmr1(BANK1[2]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _temperature_read->___ftdiv
    _temperature_read->___ftmul
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lwtoft
    ___ftdiv->___ftpack
    _set_temp_off->_eeprom_write
    _eeprom_write->_i2c_write_slave_address_with_write_req

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_temperature_read
    _temperature_read->___fttol
    ___fttol->___ftdiv

Critical Paths under _main in BANK1

    _main->_check_active_button
    _segment_display_blink->_segment_display
    _segment_display->___lwmod
    ___lwmod->___lwdiv
    _off->_segment_display_off
    _check_temp->___lwdiv
    _check_active_button->_start_timer
    _start_timer->_set_timer0
    _start_timer->_set_timer1
    _start_timer->_set_timer2
    _set_timer2->_multiply
    _set_timer1->_multiply
    _set_timer0->_multiply

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   21850
                                             37 BANK1      2     2      0
                           _ADC_Init
                _check_active_button
                         _check_temp
                                _off
                    _segment_display
              _segment_display_blink
                        _start_timer
 ---------------------------------------------------------------------------------
 (1) _segment_display_blink                                2     0      2    1423
                                             32 BANK1      2     0      2
                    _segment_display
                _segment_display_off
 ---------------------------------------------------------------------------------
 (2) _segment_display                                     20    18      2    1327
                                             12 BANK1     20    18      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              7 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _off                                                  0     0      0       0
                _segment_display_off
 ---------------------------------------------------------------------------------
 (2) _segment_display_off                                  2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_temp                                           7     7      0     736
                                              7 BANK1      7     7      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     501
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (1) _check_active_button                                  2     2      0    9275
                                             35 BANK1      2     2      0
                      _restart_timer
                          _set_blink
                        _start_timer
                         _stop_timer
                  _temp_setting_down
                    _temp_setting_up
 ---------------------------------------------------------------------------------
 (2) _temp_setting_up                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _temp_setting_down                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           1     1      0      93
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _start_timer                                          3     1      2    9089
                                             32 BANK1      3     1      2
                         _set_timer0
                         _set_timer1
                         _set_timer2
 ---------------------------------------------------------------------------------
 (2) _set_timer2                                          12    10      2    2881
                                             20 BANK1     12    10      2
                            ___lldiv
                            ___llmod
                           _multiply
 ---------------------------------------------------------------------------------
 (2) _set_timer1                                          12    10      2    2881
                                             20 BANK1     12    10      2
                            ___lldiv
                            ___llmod
                           _multiply
 ---------------------------------------------------------------------------------
 (2) _set_timer0                                          12    10      2    2881
                                             20 BANK1     12    10      2
                            ___lldiv
                            ___llmod
                           _multiply
 ---------------------------------------------------------------------------------
 (3) _multiply                                            20    16      4     814
                                              0 BANK1     20    16      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8    1012
                                              0 BANK1     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     631
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (2) _set_blink                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _restart_timer                                        1     1      0      93
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0    7274
                                             26 BANK0      4     4      0
                          _alternate
                   _alternate_on_off
                          _save_temp
                       _set_temp_off
                   _temperature_read
                          _timer_ISR
                       i1_stop_timer
 ---------------------------------------------------------------------------------
 (6) i1_stop_timer                                         1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _timer_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _temperature_read                                     4     1      3    6992
                                             22 BANK0      4     1      3
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) ___lwtoft                                             3     0      3    1983
                                              8 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             13     9      4     305
                                              9 BANK0     13     9      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    2342
                                             11 COMMON     3     3      0
                                              0 BANK0     12     6      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    2296
                                              8 COMMON     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    1908
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (7) _ADC_Read                                             4     2      2      44
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (6) _set_temp_off                                         0     0      0     141
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (7) _eeprom_write                                         2     1      1     141
                                              2 COMMON     2     1      1
                    _i2c_master_init
                   _i2c_master_write
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
_i2c_write_slave_address_with_write_
 ---------------------------------------------------------------------------------
 (8) _i2c_write_slave_address_with_write_req               2     2      0      22
                                              0 COMMON     2     2      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (8) _i2c_stop                                             0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (8) _i2c_start                                            0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (8) _i2c_restart                                          0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (8) _i2c_master_write                                     1     1      0      22
                                              0 COMMON     1     1      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (9) _i2c_wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _i2c_master_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _save_temp                                            2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _alternate_on_off                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _alternate                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _check_active_button
     _restart_timer
     _set_blink
     _start_timer
       _set_timer0
         ___lldiv
         ___llmod
         _multiply
       _set_timer1
         ___lldiv
         ___llmod
         _multiply
       _set_timer2
         ___lldiv
         ___llmod
         _multiply
     _stop_timer
     _temp_setting_down
     _temp_setting_up
   _check_temp
     ___lwdiv
   _off
     _segment_display_off
   _segment_display
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _segment_display_blink
     _segment_display
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _segment_display_off
   _start_timer
     _set_timer0
       ___lldiv
       ___llmod
       _multiply
     _set_timer1
       ___lldiv
       ___llmod
       _multiply
     _set_timer2
       ___lldiv
       ___llmod
       _multiply

 _isr (ROOT)
   _alternate
   _alternate_on_off
   _save_temp
   _set_temp_off
     _eeprom_write
       _i2c_master_init
       _i2c_master_write
         _i2c_wait
       _i2c_restart
         _i2c_wait
       _i2c_start
         _i2c_wait
       _i2c_stop
         _i2c_wait
       _i2c_write_slave_address_with_write_req
         _i2c_wait
   _temperature_read
     _ADC_Read
     ___ftdiv
       ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _timer_ISR
   i1_stop_timer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     27      3E       7       77.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      37       5       68.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      83      12        0.0%
ABS                  0      0      83       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Jul 19 02:47:29 2020

                                ??_restart_timer 00A0                                                pc 0002  
                                             _T0 0052                                               _T1 0054  
                                             _T2 0053                                               fsr 0004  
                                            l117 04B1                                              l354 03B9  
                                            l349 0378                                              l527 0624  
                                            l555 06B3                                              _GIE 005F  
                                            _RB1 0031                                              _RA4 002C  
                                            _RA5 002D                                              _RC2 003A  
                                            _RB4 0034                                              _RB5 0035  
                                            _RC5 003D                                              _PS0 0408  
                                            _PR2 0092                                              _PS1 0409  
                                            _PEN 048A                                              _PS2 040A  
                                            _SEN 0488                                              _PSA 040B  
                            _segment_display_off 0EBF                                              _off 0DAC  
                                            _isr 077D                                              fsr0 0004  
                                            indf 0000                                      _start_timer 0F74  
                                   ___ftdiv@cntr 0023                                     ___ftdiv@sign 0028  
                                           l3002 0E89                                             l3016 0F8D  
                                           l3026 0FA3                                             l3106 0E02  
                                           l3212 04C6                                             l3118 0E19  
                                           l3064 0E96                                             l3160 0609  
                                           l3144 05CC                                             l3216 04DF  
                                           l3068 0E9D                                             l3092 0EAA  
                                           l3164 060E                                             l2802 0739  
                                           l3098 0EB6                                             l2804 0749  
                                           l2812 0774                                             l2808 0767  
                                           l2764 03F0                                             l2852 02B4  
                                           l2844 02A3                                             l2790 067E  
                                           l2758 03AF                                             l2942 0218  
                                           l2934 0208                                             l2838 0274  
                                           l2776 0639                                             l2928 01D6  
                                           l2848 02AE                                             l2786 0671  
                                           l2778 0649                                             l2938 0213  
                                           l2890 016A                                             l2884 013A  
                                           l2964 0F64                                             l2956 0F40  
                                           l2980 07CE                                             l2894 0175  
                                           l2958 0F4E                                             l2982 07DC  
                                           l2990 07F5                                             ?_off 0070  
                                           l2968 0F6F                                             l2898 017A  
                                           l2986 07EA                                             l2998 0E82  
                                           ?_isr 0070                                             _T0CS 040D  
                                           _T0SE 040C                                             u3005 0F5B  
                                           u3015 0F65                                             u3045 07D1  
                                           u3150 04F1                                             u3305 05FF  
                                           u3065 07E2                                             u3075 07EB  
                                           u2710 03D6                                             u2711 03D7  
                                           u3335 061D                                             u3407 0ED7  
                                           u2712 03DC                                             u2713 03DD  
                                           u2705 03B5                                             u3417 068F  
                                           u3427 06BB                                             u2725 03BF  
                                           u2815 073D                                             u2680 0395  
                                           u2745 063D                                             u2681 0396  
                                           u3377 053E                                             u2682 039B  
                                           u2835 0757                                             u2683 039C  
                                           u2675 0374                                             u2915 015C  
                                           u3387 0554                                             _PEIE 005E  
                                           u2765 064B                                             u2845 0768  
                                           u3397 0EC8                                             _INTE 005C  
                                           _INTF 0059                                             u2775 0660  
                                           u2695 037E                                             u2785 0672  
                                           u2975 0F43                                             u2995 0F4F  
                                           _TMR0 0001                                             _TMR1 000E  
                                           _TMR2 0011                                             _RSEN 0489  
                                 ??_eeprom_write 0073                                             _main 0474  
                                   ___ftpack@arg 0070                                     ___ftpack@exp 0073  
                     __size_of_temp_setting_down 0011                                             btemp 007E  
                               __end_of_ADC_Init 0800                                 __end_of_ADC_Read 0F08  
                           ?_segment_display_off 0070                                             start 0012  
                   __size_of_check_active_button 0058                                     ___ftmul@cntr 002A  
                                  ??_i2c_restart 0070                             __end_ofi1_stop_timer 0E66  
                                   ___ftmul@sign 002B                                     ___fttol@exp1 0035  
                                          ??_off 00A2                                     ___fttol@lval 0031  
                                          ??_isr 003A                                            ?_main 0070  
                                __end_of___ftdiv 0366                                  __end_of___lldiv 0687  
                                __end_of___ftmul 00F4                                  __end_of___llmod 077D  
                                __end_of___fttol 0474                                  __end_of___lwdiv 0F74  
                                          i1l106 07A4                                            i1l108 07BC  
                                          i1l207 0D9C                                            i1l231 0DE8  
                                          i1l143 0F13                                            i1l219 0E4B  
                                          i1l423 06FD                                  __end_of___lwmod 07FA  
                                          i1l266 0F00                                            i1l427 0716  
                                          i1l874 05A7                                            i1l875 05AF  
                                          i1l958 044E                                            _PORTA 0005  
                                          _PORTB 0006                                            _PORTD 0008  
                                          _SSPM0 00A0                                            _SSPM1 00A1  
                                          _SSPM2 00A2                                            _SSPM3 00A3  
                                          _TRISA 0085                                            _TRISB 0086  
                                          _TRISC 0087                                            _TRISD 0088  
                                          _SSPEN 00A5                                            _SSPIF 0063  
                              ?_temperature_read 0036                               ??_temperature_read 007E  
                          _segment_display_blink 0E0C                                    multiply@i_321 00AE  
                                          _blink 0056                                            _index 0051  
                       __size_of_segment_display 0073                                    ___ftpack@sign 0074  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                            ??_segment_display_off 00A0  
                  segment_display@binary_pattern 00B2                                  __initialization 0015  
                                   __end_of_main 04E9                                 __end_of_i2c_wait 0DA4  
                               __end_of_i2c_stop 0D97                              __end_of_i2c_restart 0D8D  
                                         ??_main 00C5                                    ___fttol@sign1 0030  
                               segment_display@x 00AC                                           _ADCON0 001F  
                                         _ADCON1 009F                                           _AN0RES 004D  
                               ___llmod@dividend 00A4                                           _ADRESH 001E  
                                         _ADRESL 009E                                 __end_of___ftpack 05C8  
                            eeprom_write@address 0073                                           i1l2400 02FA  
                                         i1l2172 056B                                           i1l2318 0F22  
                                         i1l2326 0EE7                                           i1l2190 0597  
                                         i1l2422 0342                                           i1l2510 043A  
                                         i1l2184 0592                                           i1l2176 0577  
                                         i1l2168 0564                                           i1l2416 0323  
                                         i1l2178 057C                                           i1l2442 006D  
                                         i1l2522 045D                                           i1l2514 044A  
                                         i1l2610 072F                                           i1l2188 05A5  
                                         i1l2460 0090                                           i1l2436 0057  
                                         u201_25 0EEE                                           i1l2526 046B  
                                         i1l2472 00B8                                           i1l2464 00A0  
                                         i1l2704 07AD                                           i1l2554 0DCE  
                                         i1l2562 0DDA                                           i1l2394 02E4  
                                         i1l2476 00C8                                           i1l2492 0411  
                                         i1l2488 0408                                           i1l2680 0E5A  
                                         i1l2690 077E                                           i1l2684 0E61  
                                         i1l2694 0792                                           i1l2698 079E  
                                         _INTEDG 040E                                           u215_25 0324  
                                         u223_25 00A1                                           u216_25 0335  
                                         u224_25 00A9                                           u232_25 0418  
                                         u217_25 0343                                           u171_25 058B  
                                         u235_25 043B                                           u228_25 00C9  
                                         u173_25 059E                                           u229_25 00D1  
                                         u238_25 0453                                           u343_27 0EFA  
                                         u177_25 05B6                                           u169_25 0570  
                               __end_of___lwtoft 0E7A                                           _TMR0IE 005D  
                                         _TMR0IF 005A                                           _TMR1IE 0460  
                                         _TMR1IF 0060                                           _TMR1CS 0081  
                                         _TMR2IE 0461                                           _TMR2IF 0061  
                                         _TMR1ON 0080                                           _TMR2ON 0092  
                                         _SSPADD 0093                                           _TRISB1 0431  
                                         _TRISC3 043B                                           _TRISC4 043C  
                                         _SSPBUF 0013                               __size_of_i2c_start 0005  
                                _i2c_master_init 0DEC                                        ??___ftdiv 0020  
                                      ??___lldiv 00A8                                        ??___ftmul 007B  
                                      ??___llmod 00A8                                        ??___fttol 002D  
                                      ??___lwdiv 00A4                                        ??___lwmod 00AB  
                                _temp_setting_up 0EA3                             __end_of_eeprom_write 0F38  
                      __size_of_i2c_master_write 000D                            ___ftmul@f3_as_product 0027  
                                set_timer0@cntr0 00CF                                  set_timer1@cntr1 00D3  
                                set_timer2@cntr2 00D1                                ?_alternate_on_off 0070  
                                      ?_ADC_Init 0070                                        ?_ADC_Read 0070  
                         ?_segment_display_blink 00C0                                           saved_w 007E  
                               __end_of_multiply 03F9                               ??_alternate_on_off 0070  
                        __end_of__initialization 003D                            __size_ofi1_stop_timer 0013  
                              ??_segment_display 00AE                                       ___ftdiv@f1 007B  
                                     ___ftdiv@f2 0078                                       ___ftdiv@f3 0024  
                                     ___ftmul@f1 0020                                       ___ftmul@f2 0023  
                                     ___fttol@f1 0029                                   __pcstackCOMMON 0070  
                                    _i2c_restart 0D88                                     __pidataBANK0 0D86  
                                   __pidataBANK1 0DBF                                  stop_timer@timer 00A0  
                                     ___lwtoft@c 0078                                __end_of_i2c_start 0D92  
                                   ?_start_timer 00C0                                       ??_ADC_Init 00A0  
                                     ??_ADC_Read 0072                               __size_of_alternate 000B  
                            _check_active_button 0687                                     i1_stop_timer 0E53  
                                     __pbssBANK0 003E                                       __pbssBANK1 00C7  
                                  check_temp@avg 00AB                                    check_temp@sum 00A9  
                           set_timer0@resolution 00BC                                       _check_temp 05C8  
                                      ?_i2c_wait 0070                                        ?_i2c_stop 0070  
                            segment_display@F864 00D4                          __end_of_i2c_master_init 0DFB  
                              segment_display@a1 00BC                                segment_display@a2 00BE  
                           ?_check_active_button 0070                          __end_of_temp_setting_up 0EBF  
                                     __pmaintext 0474                                       __pintentry 0004  
                          __end_of_restart_timer 0EA3                                          _ACKSTAT 048E  
                             __size_of_save_temp 0012                             set_timer1@resolution 00BC  
                                      ?___ftpack 0070                               __size_of_set_blink 0005  
                                        _T1CKPS0 0084                                          _T1CKPS1 0085  
                                        _T2CKPS0 0090                                          _T2CKPS1 0091  
                                      ?___lwtoft 0078                                          _T1OSCEN 0083  
                             __size_of_timer_ISR 0052                                          _GO_DONE 00FA  
                                        _SSPCON2 0091                                          _SSPSTAT 0094  
                                        _TOUTPS0 0093                                          _TOUTPS1 0094  
                                        _TOUTPS2 0095                                          _TOUTPS3 0096  
                           set_timer2@resolution 00BC                                       ??_i2c_wait 0070  
                                     ??_i2c_stop 0070                        __size_of_temperature_read 004B  
                          ??_check_active_button 00C3                                __end_of_alternate 0DD4  
                          __size_of_eeprom_write 0030                                        ?_multiply 00A0  
                                        _Voltage 0048                                          ___ftdiv 02CE  
                                        ___lldiv 0629                                          ___ftmul 0041  
                                        ___llmod 0731                                          ___fttol 03F9  
                                        ___lwdiv 0F38                                          ___lwmod 07C8  
                                     ??___ftpack 0075                                    ?_set_temp_off 0070  
                                        __ptext1 0E0C                                          __ptext2 04E9  
                                        __ptext3 07C8                                          __ptext4 0DAC  
                                        __ptext5 0EBF                                          __ptext6 05C8  
                                        __ptext7 0F38                                          __ptext8 0687  
                                        __ptext9 0EA3                                 _i2c_master_write 0DDF  
                                     ??___lwtoft 007B                                     __size_of_off 0009  
                                   __size_of_isr 004B                      __end_of_segment_display_off 0EDF  
                                        clrloop0 0DA5                                       _past_temps 003E  
                           end_of_initialization 003D                                      ?_check_temp 0070  
                              __end_of_save_temp 0E40                                      set_timer0@i 00BE  
                                    set_timer1@i 00BE                                      set_timer2@i 00BE  
                              __end_of_set_blink 0D9C                                     _eeprom_write 0F08  
                               ?_i2c_master_init 0070                                __end_of_timer_ISR 0731  
                                ___lldiv@divisor 00A0                                  ___lldiv@counter 00AD  
                               ?_temp_setting_up 0070                                       _set_timer0 0194  
                                     _set_timer1 0232                                       _set_timer2 00F4  
                                     ??_multiply 00A4                                   ??_set_temp_off 0074  
                        ??_segment_display_blink 00C2                                  _segment_display 04E9  
                           __size_of_start_timer 0041                                __size_of_ADC_Init 0006  
                              __size_of_ADC_Read 0029                                      ___ftdiv@exp 0027  
                      __size_of_alternate_on_off 000B                                      multiply@sum 00B0  
                                    ___ftmul@exp 0026                                       _stop_timer 0E7A  
                                   ?_i2c_restart 0070                              __size_of_check_temp 0061  
                            start_initialization 0015                                        _i2c_start 0D8D  
                                    __end_of_off 0DB5                                      __end_of_isr 07C8  
                                  save_temp@temp 0070                                  ___llmod@divisor 00A0  
                               _temperature_read 0FB5                                  ___llmod@counter 00A9  
                              __size_of_i2c_wait 0008                                __size_of_i2c_stop 0005  
                                    ?_set_timer0 00B4                                      ?_set_timer1 00B4  
                                    ?_set_timer2 00B4                                       init_fetch0 0E1D  
                                 set_timer0@Time 00B8                                   set_timer1@Time 00B8  
                                    __pdataBANK0 0055                                      __pdataBANK1 00D4  
                                 set_timer2@Time 00B8                                   set_timer0@tmr0 00D0  
                                 set_timer0@time 00B4                                   set_timer1@tmr1 00CD  
                                 set_timer1@time 00B4                                   set_timer2@tmr2 00D2  
                                 set_timer2@time 00B4                          __end_of_segment_display 055C  
                              __size_of___ftpack 006C                                        ___latbits 0002  
                              __size_of___lwtoft 0014                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                       ?_i2c_start 0070  
                               eeprom_write@data 0072                             __end_of_set_temp_off 0DBF  
                       __end_of_i2c_master_write 0DEC                                 ___lwdiv@dividend 00A2  
                                    ?_stop_timer 0070                                         ?___ftdiv 0078  
                                       ?___lldiv 00A0                                         ?___ftmul 0020  
                                       ?___llmod 00A0                                         ?___fttol 0029  
                                       ?___lwdiv 00A0                                         ?___lwmod 00A7  
                                      _alternate 0DC9                                __size_of_multiply 0093  
                         segment_display_blink@x 00C0                                         _ADC_Init 07FA  
                                       _ADC_Read 0EDF                                      ADC_Read@ANC 0073  
                               ___lwdiv@quotient 00A5                              __size_of_set_timer0 009E  
                            __size_of_set_timer1 009C                              __size_of_set_timer2 00A0  
                                   ??_check_temp 00A7                      __end_of_check_active_button 06DF  
                         __size_of_restart_timer 0015                                interrupt_function 0004  
  i2c_write_slave_address_with_write_req@address 0071                                 _alternate_on_off 0DD4  
                                      clear_ram0 0DA4                              temperature_read@pin 0039  
                                      _save_temp 0E2E                                        _set_blink 0D97  
                                      _timer_ISR 06DF                                         _TMR0_REG 00C7  
                                       _TMR1_REG 00CB                                         _TMR2_REG 00C9  
                                     ?_alternate 0070                             __size_of_i2c_restart 0005  
                                     _ADCON0bits 001F                                 ?_segment_display 00AC  
                             __end_of_check_temp 0629                   __size_of_segment_display_blink 0011  
                  __end_of_segment_display_blink 0E1D   __end_of_i2c_write_slave_address_with_write_req 0E53  
__size_of_i2c_write_slave_address_with_write_req 0013         ??_i2c_write_slave_address_with_write_req 0070  
        ?_i2c_write_slave_address_with_write_req 0070           _i2c_write_slave_address_with_write_req 0E40  
                                    ??_i2c_start 0070                              __size_of_stop_timer 0014  
                                       _i2c_wait 0D9C                                         _i2c_stop 0D92  
                   __size_of_segment_display_off 0020                                       ?_save_temp 0070  
                             restart_timer@timer 00A0                                       ?_set_blink 0070  
                                     ?_timer_ISR 0070                                 __size_of___ftdiv 0098  
                       __size_of_i2c_master_init 000F                                 __size_of___lldiv 005E  
                               __size_of___ftmul 00B3                                 __size_of___llmod 004C  
                               __size_of___fttol 007B                                 __size_of___lwdiv 003C  
                               __size_of___lwmod 0032                                    _restart_timer 0E8E  
                                       ___ftpack 055C                         __size_of_temp_setting_up 001C  
                                       ___lwtoft 0E66                         __end_of_temperature_read 1000  
                                  ??_start_timer 00C2                                      check_temp@i 00AD  
                                ___lwdiv@divisor 00A0                                    ?i1_stop_timer 0070  
                                ___lwdiv@counter 00A4                            __size_of_set_temp_off 000A  
                                       __ptext10 0DFB                                         __ptext11 0E7A  
                                       __ptext20 0E8E                                         __ptext12 0F74  
                                       __ptext21 07FA                                         __ptext13 00F4  
                                       __ptext30 055C                                         __ptext22 077D  
                                       __ptext14 0232                                         __ptext31 0EDF  
                                       __ptext23 0E53                                         __ptext15 0194  
                                       __ptext40 0DEC                                         __ptext32 0DB5  
                                       __ptext24 06DF                                         __ptext16 0366  
                                       __ptext41 0E2E                                         __ptext33 0F08  
                                       __ptext25 0FB5                                         __ptext17 0731  
                                       __ptext42 0DD4                                         __ptext34 0E40  
                                       __ptext26 0E66                                         __ptext18 0629  
                                       __ptext43 0DC9                                         __ptext35 0D92  
                                       __ptext27 03F9                                         __ptext19 0D97  
                                       __ptext36 0D8D                                         __ptext28 0041  
                                       __ptext37 0D88                                         __ptext29 02CE  
                                       __ptext38 0DDF                                         __ptext39 0D9C  
                                       _counter0 00C8                                         _counter1 00CC  
                                       _counter2 00CA                                    __size_of_main 0075  
                              _temp_setting_down 0DFB                                _temp_setting_mode 0050  
                                       _temp_set 0055                                     ??_set_timer0 00B6  
                                   ??_set_timer1 00B6                                     ??_set_timer2 00B6  
                             ?_temp_setting_down 0070                                         _multiply 0366  
                              i1stop_timer@timer 0070                                      ??_alternate 0070  
                                 ?_restart_timer 0070                                        multiply@i 00AC  
                                      multiply@x 00A0                                        multiply@y 00A2  
                                   _set_temp_off 0DB5                              ??_temp_setting_down 00A0  
                                 ??i1_stop_timer 0070                                         init_ram0 0E21  
                            __end_of_start_timer 0FB5                                         intlevel1 0000  
                             __end_of_set_timer0 0232                               __end_of_set_timer1 02CE  
                             __end_of_set_timer2 0194                                 ___lwmod@dividend 00A9  
                               ___lldiv@dividend 00A4                        __end_of_temp_setting_down 0E0C  
                              ?_i2c_master_write 0070                                      ??_save_temp 0072  
                                    ??_set_blink 00A0                               ??_i2c_master_write 0070  
                                   ??_stop_timer 00A0                                      _ON_OFF_FLAG 004F  
                                    ??_timer_ISR 0070                                 start_timer@timer 00C2  
                                    _temperature 004B                         __end_of_alternate_on_off 0DDF  
                               ___lldiv@quotient 00A9                                  ___lwmod@divisor 00A7  
                                ___lwmod@counter 00AB                                ??_i2c_master_init 0070  
                                start_timer@time 00C0                                ??_temp_setting_up 00A0  
                           i2c_master_write@data 0070                               __end_of_stop_timer 0E8E  
                                  ?_eeprom_write 0072  
